<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/09/02/%E6%8E%A8%E5%85%8D%E8%AE%B0%E5%BD%95/2025-Soochow-University%E9%A2%84%E6%8E%A8%E5%85%8D%E6%9C%BA%E8%AF%95%E5%A4%8D%E7%9B%98/"/>
    <url>/2025/09/02/%E6%8E%A8%E5%85%8D%E8%AE%B0%E5%BD%95/2025-Soochow-University%E9%A2%84%E6%8E%A8%E5%85%8D%E6%9C%BA%E8%AF%95%E5%A4%8D%E7%9B%98/</url>
    
    <content type="html"><![CDATA[<h1 id="2025-Soochow-University预推免机试复盘"><a href="#2025-Soochow-University预推免机试复盘" class="headerlink" title="2025 Soochow University预推免机试复盘"></a>2025 <strong>Soochow University</strong>预推免机试复盘</h1><blockquote><p>批次：第一批下午场(8&#x2F;30 13-16)</p><p>语言：python</p><p>不用外部库，尽量用最基础的包</p><p>格式类似leetcode的关键函数格式，但是不能实时判断是否解答题目，需要自己编写测试用例。最后提交一个py文件。</p></blockquote><h2 id="1-日期是否合法"><a href="#1-日期是否合法" class="headerlink" title="1. 日期是否合法"></a>1. 日期是否合法</h2><p>✅</p><p>注意判断闰年的方式：<code>(y % 400 == 0) or (y % 4 == 0 and y % 100 != 0)</code></p><h2 id="2-从仅含字母与数字的字符串中提取整数，求区间内的最小值与最大值"><a href="#2-从仅含字母与数字的字符串中提取整数，求区间内的最小值与最大值" class="headerlink" title="2.从仅含字母与数字的字符串中提取整数，求区间内的最小值与最大值"></a>2.从仅含字母与数字的字符串中提取整数，求区间内的最小值与最大值</h2><p>✅</p><p>给定字符串 <code>s</code>（只含 <code>[a-zA-Z0-9]</code>），以及闭区间 <code>[L, R]</code>。从 <code>s</code> 中提取所有<strong>连续数字</strong>形成的整数，筛出落在 <code>[L,R]</code> 的，输出它们的 <code>min</code> 和 <code>max</code>。</p><h2 id="3-判断-num-是否为「不含重复数字的素数」"><a href="#3-判断-num-是否为「不含重复数字的素数」" class="headerlink" title="3. 判断 num 是否为「不含重复数字的素数」"></a>3. 判断 <code>num</code> 是否为「不含重复数字的素数」</h2><p><em>输入num &lt; 1e8</em></p><p>✅</p><p>用<strong>试除法</strong>判断素数加速处理</p><p><em>考试时，注意到题目中提到的数据量要求，但是没有想到取根号的技巧，仅使用了朴素的判断素数的方法，可能会导致超时</em></p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs maxima">def is_prime(<span class="hljs-built_in">num</span>):<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">num</span> &lt; <span class="hljs-number">2</span>: <span class="hljs-built_in">return</span> False<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">num</span> <span class="hljs-symbol">%</span> <span class="hljs-number">2</span>: <span class="hljs-built_in">return</span> <span class="hljs-built_in">num</span> == <span class="hljs-number">2</span><br>r = int(math.<span class="hljs-built_in">isqrt</span>(<span class="hljs-built_in">num</span>))   # 取<span class="hljs-built_in">num</span>的平方根<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>, r + <span class="hljs-number">1</span>, <span class="hljs-number">2</span>):<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">num</span> <span class="hljs-symbol">%</span> <span class="hljs-number">2</span> == <span class="hljs-number">0</span>: <br><span class="hljs-built_in">return</span> False<br><span class="hljs-built_in">return</span> True<br></code></pre></td></tr></table></figure><p>判断是否有重复数字</p><p><em>考试时知道应该用位掩码的方案，但是我不太会，就用了下面这个笨笨的方法，希望判卷不卡内存和时间</em>😭</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">def</span> <span class="hljs-function"><span class="hljs-title">distinct_digit</span>(<span class="hljs-variable">num</span>):</span><br><span class="hljs-function"><span class="hljs-variable">s</span> = <span class="hljs-title">str</span>(<span class="hljs-variable">n</span>)</span><br><span class="hljs-variable">return</span> <span class="hljs-function"><span class="hljs-title">len</span>(<span class="hljs-variable">s</span>) == <span class="hljs-title">len</span>(<span class="hljs-title">set</span>(<span class="hljs-variable">s</span>))</span><br></code></pre></td></tr></table></figure><h2 id="4-给定整数数组-arr-和一个个位数-d-0-9-，找出所有中间位等于-d-的数，返回其中最大值。若无，输出-1"><a href="#4-给定整数数组-arr-和一个个位数-d-0-9-，找出所有中间位等于-d-的数，返回其中最大值。若无，输出-1" class="headerlink" title="4. 给定整数数组 arr 和一个个位数 d [0..9]，找出所有中间位等于 d 的数，返回其中最大值。若无，输出 -1"></a>4. 给定整数数组 <code>arr</code> 和一个<strong>个位数</strong> <code>d [0..9]</code>，找出所有<strong>中间位</strong>等于 <code>d</code> 的数，返回其中<strong>最大值</strong>。若无，输出 <code>-1</code></h2><p>✅</p><p><strong>奇数位数</strong>的数，其正中间那一位；偶数位数的数时偏左的那一位</p><p>基础的一道双指针</p><h2 id="5-过滤文件：后缀匹配-文件名回文（忽略大小写），返回第一个"><a href="#5-过滤文件：后缀匹配-文件名回文（忽略大小写），返回第一个" class="headerlink" title="5. 过滤文件：后缀匹配 + 文件名回文（忽略大小写），返回第一个"></a>5. 过滤文件：后缀匹配 + 文件名回文（忽略大小写），返回第一个</h2><p>✅</p><p>（这个有点奇怪，测试样例中返回的是下标为1的数？？？？</p><p>给定 <code>n</code> 个文件名和目标后缀（扩展名）<code>ext</code>，找出<strong>第一个</strong>满足：</p><ul><li>后缀为 <code>ext</code>（一般大小写不敏感）；</li><li><strong>不含后缀</strong>的basename为<strong>回文</strong>（忽略大小写）</li></ul><h2 id="6-蛇形遍历矩阵（lc-498-Medium"><a href="#6-蛇形遍历矩阵（lc-498-Medium" class="headerlink" title="6. 蛇形遍历矩阵（lc 498 Medium)"></a>6. 蛇形遍历矩阵（lc 498 Medium)</h2><p>❌</p><p><em>这题遗憾，浪费了很多时间，没有做出来；</em></p><h2 id="7-每-k-个结点一组反转链表-（lc-25-Hard"><a href="#7-每-k-个结点一组反转链表-（lc-25-Hard" class="headerlink" title="7. 每 k 个结点一组反转链表 （lc 25 Hard)"></a>7. 每 k 个结点一组反转链表 （lc 25 Hard)</h2><p>✅</p><p>给定单链表头指针和整数 <code>k</code>，将链表每 <code>k</code> 个结点一组翻转（不足 <code>k</code> 的尾部保持原样），返回新表头。</p><h2 id="8-二叉树（不记得了-）"><a href="#8-二叉树（不记得了-）" class="headerlink" title="8. 二叉树（不记得了!）"></a>8. 二叉树（不记得了!）</h2><h2 id="9-乘积最大子数组-lc-152-Medium"><a href="#9-乘积最大子数组-lc-152-Medium" class="headerlink" title="9. 乘积最大子数组 (lc 152 Medium)"></a>9. 乘积最大子数组 (lc 152 Medium)</h2><p>❌</p><p>没时间做了，又丢一题。</p><h2 id="10-打家劫舍-lc-198-medium"><a href="#10-打家劫舍-lc-198-medium" class="headerlink" title="10. 打家劫舍 (lc 198 medium)"></a>10. 打家劫舍 (lc 198 medium)</h2><p>✅</p><p>题目其实是决定让哪家捐钱，不抢钱</p><p><em>有时间限制，我没时间想优化了，直接默写l</em></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs inform7">def rob(nums):<br>n = len(nums)<br># dp<span class="hljs-comment">[i]</span>: 偷i间房子，收获的最大金额<br># dp<span class="hljs-comment">[i]</span> = max(dp<span class="hljs-comment">[i-1]</span>, dp<span class="hljs-comment">[i - 2]</span> + num<span class="hljs-comment">[i-1]</span>)     <br>dp = <span class="hljs-comment">[0]</span> * (n + 1)<br>dp<span class="hljs-comment">[0]</span> = 0     # 一间都不偷<br>dp<span class="hljs-comment">[1]</span> = nums<span class="hljs-comment">[0]</span>  # 对于第一间，只有一个选择 -》 偷<br>for i in range(2, n+1):<br>dp<span class="hljs-comment">[i]</span> = max(dp<span class="hljs-comment">[i-1]</span>, dp<span class="hljs-comment">[i-2]</span> + nums<span class="hljs-comment">[i - 1]</span>)   #下标容易乱，注意一些<br>return dp<span class="hljs-comment">[n]</span><br></code></pre></td></tr></table></figure><p><strong>留个疑问，这个怎么做时间优化？还是说这个解法能过测试</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>UML真的有用吗</title>
    <link href="/2024/11/06/Stage3/UML_using_reflection/"/>
    <url>/2024/11/06/Stage3/UML_using_reflection/</url>
    
    <content type="html"><![CDATA[<h1 id="UML-真的有用吗"><a href="#UML-真的有用吗" class="headerlink" title="UML 真的有用吗"></a>UML 真的有用吗</h1><p>这是一个在知乎程序员业界被广泛讨论的一个问题。这篇文章以一个初学者的视角聊一聊浅显的理解。</p><p>第一次接触UML图是在大二春季学期的Software EngProject的课上，这门课的核心任务是小组4人合力开发一款麻将游戏。这个项目的初期提交中要求提供UML的设计，具体上是绘制用例图，时序图，类图。说实在的，第一次接触UML很陌生，我们浅显的理解为教授想要检验UML学习的成果，让我们将课上学得的方法得以练习。我们小组成员随即将这些制图任务一一认领，期间几乎没有对图设计的沟通，总是各自为战。在写这篇文章之前，我特地回顾了一下我们的第一次制图，按照现在的标准，只能是漏洞百出，用例沉余，include&#x2F;extend关系混乱，时序图只有一张，笼统的用一句话就可以表示出来。虽然类图结构完整，但也和我们完成的源代码大相径庭。好在当时的这门课程似乎更加看重功能的实现，一个混乱不堪的时序图似乎没有对成绩造成多大的影响。同时我们小组四人的能力尚可，分工也算明确，项目的开发进展也很顺利。如今回想，当时的提交的用例图仅仅使得第一个里程碑的任务量增加了，对后续的工作没有实质性的帮助。至此，UML无用的概念在我心中已然存在。</p><p>但是由此得出UML无用的观点显然是毫无道理的，因为我并没有真正利用UML。时间来到大三上，铺天盖地的项目迎面而来，既有熟悉的软件领域，也有一些陌生的计算机领域（图形学）。面向对象设计，web开发和软件工程方法学的课程中都有或多或少的UML图的使用经历。我想以OOD这门课的经历，聊一聊我的真实UML使用经历。</p><p>首先，我想交代一下这门课的背景，希望读者可以设身处地的理解我的感受。OOD的课程项目是团队（5-8人）共同设计和完成一个 This project will involve the design and implementation of a software system for the management of events,their details and tickets. This will be a web-based application built using the spring-boot framework。如果遵循我的开发惯例，我们的团队应该会按照功能划分为若干子小组（如场馆管理，票务管理），并选定一名开发能力较强的同学用较短的时间完成项目的初始版框架，一遍后续人员开发的标准接近统一。但是说实在的，就文章前述提到的麻将项目来说，这个开发方案在项目代码的架构和优美度上是差劲的，尽管最终的功能可以在多次调试修复下得以完善。其中的一个问题就在于，如果后续的开发者要符合前期开发者的开发思路，那么他就需要理解前期开发者设计源代码架构的思路。我认为若仅仅是在观察源代码的情况下，各阶段开发者的思想很难统一，只有对代码进行演示讲解，才有机会让开发的思路和架构接近一致。我们在这里先忽视团队成员水平差异的因素（有这个因素存在，开发思路的一致性维持的难度会大大提升。</p><p>回到演唱会系统上，这门课教授设计了Requirements Analysis, Analysis, Design, Implementation四个阶段的提交。在前三阶段甚至没有任何有关代码的工作需要提交，而是完全专注于用例图，时序图，类图的绘制工作。起初我们看到这样的任务是吃惊的，任务划分如此不平衡吗，真正重要的代码核心工作竟然放在最后，而且完成的时间也和前面几个阶段的任务相同。当我们团队坐在一起商讨这件事情时，质疑声首先发出，”我们直接开始代码工作吧，这些设计工作临时补充”，“按部就班完成吧”，不同的观点出现。最终我们决定，先按照教授要求试一试，实在来不及开发在中间再开始也可以。</p><p>作图的过程也是困难的，因为是多人开发，我们仍然想力求标准的统一化，但是在检索了大量资料后，我们发现根本不可能统一，用例的种类（详尽程度），时序图绘制的详细程度（数据库，边界等信息是否考虑）。好在教授给出了每一阶段的具体示例，我们只需要以他的为标准即可。此时我们也意识到了，UML图是团队沟通的工具，在一个统一标准的UML图绘制中，团队成员之间的想法被轻易捕获，系统设计和功能设计都在统一的标准下进行。用例图完整的捕获系统需求，时序图理解明确系统的动态行为，类图辅助设计了系统的结构。在此基础上，我们一致认为在前期的铺垫后，后续的代码开发工作自然水到渠成。显而易见我们不会经历重复的功能设计，不统一的任务执行流程（如删除账户时使用一个控制组件进行管理，删除场馆时对数据库直接进行操作）。</p><p>这就是我的UML实践。总结下来UML的好处是图片清晰的收集并展示系统需求，方便团队内部的沟通和交流，辅助编程工作。我认为好处是显而易见的，更多的我想聊一些反思。</p><p>首先我想引出第一个问题：UML真的帮助我们节省了沟通时间成本吗？对于我们的团队是是否定的，制定统一的绘制标准，在团队内对各种UML的绘制标准的统一，在描述同一个需求时，究竟使用哪种方式绘制这个图。沟通的成本在前期暴增，对于团队内都具备代码能力情况下，面向一个精美的代码而不是一个精美的图进行开发交流会不会是一个更好的选择。如果团队成员更换，我想这又将增加一次确定标准的沟通环节。另外，在实际的软件开发中，如何面对的需求的变更，我们应该先改图还是改代码。所以我不认为在沟通成本上UML图有很大优势，反之若出现过度设计，需求频繁变更的问题反而拖慢了开发进度。</p><p>第二个问题，UML图的表达能力有限。绘制者当然可以把所有的设计思路添加到UML中，但是此时的UML已经变得晦涩难懂，那么为什么不直接修改代码。在我们的项目开发中，用一句话能沟通清楚的功能，可能需要一张图来表示，需要20条UML语句表示。所以，UML适合更高层的设计和交流，在具体的编程者身上，面对面的沟通，在代码中使用注释也会是很好的功能。但是这个高层也仅限于能看懂UML图的高层，若是甲方的抽象需求，可能需要精美的PPT了。</p><p>第三个问题，图很有用，但UML图绘制很复杂。UML是一种语言，他依赖文本生成图，缺少了创作时的随心所欲。每当我在绘制UML图是（尤其是用例图），为了获得优美的排版，我时常需要频繁的更改绘制语句。如果需要这些图，使用真正的图片化绘制工具，或者干脆手滑（如果好看的话），随之而来的绘图灵感就不会因UML绘制语言的繁琐而打扰。知乎下有一个回答很好：“画图有用不等于UML有用”。</p><p>最后，尽管我提出了三个值得反思UML是否有用的问题，但是绘制UML图的过程近乎一个完美的软件开发工作流程，从需求分析，顶层架构，代码设计。在跟随着这套思路做开发的过程中，软件的轮廓是清晰的，工程师的思想可以建议的落实在程序上，用户的需求也会得到满足。对于是否有UML的替代工具，无论是BPMN，DSL，还是遵循敏捷方法的建模（白板绘图）都有支持者与反对者，选择适合自己开发团队的工具，适合项目背景和需求的方法和工作流程才是当务之急。</p><p><strong>最后再引用知乎的一个回答：“编程带给人的快乐，无非是巧妙的设计构思的成就感，代码只是媒介”</strong></p>]]></content>
    
    
    <categories>
      
      <category>Stage3</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>DDL</title>
    <link href="/2024/10/25/Stage3/Stage-3-DDL-List/"/>
    <url>/2024/10/25/Stage3/Stage-3-DDL-List/</url>
    
    <content type="html"><![CDATA[<embed src="./2024Fall.pdf" width="100%" height="750" type="application/pdf">]]></content>
    
    
    <categories>
      
      <category>Stage3</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Stage2秋季学期课程评价</title>
    <link href="/2024/07/12/Stage2/Stage2%E7%A7%8B%E5%AD%A3%E5%AD%A6%E6%9C%9F%E8%AF%84%E4%BB%B7/"/>
    <url>/2024/07/12/Stage2/Stage2%E7%A7%8B%E5%AD%A3%E5%AD%A6%E6%9C%9F%E8%AF%84%E4%BB%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="Stage2-1"><a href="#Stage2-1" class="headerlink" title="Stage2_1"></a>Stage2_1</h1><h2 id="面向对象编程-COMP2011J"><a href="#面向对象编程-COMP2011J" class="headerlink" title="面向对象编程 COMP2011J"></a>面向对象编程 COMP2011J</h2><p>Sean Russell</p><p>纯正爱尔兰人，英文交流口音非常地道，BDIC元老人物，是Module Coordinater Henry McLaughlin的弟子，负责的课程贯穿大家大一到大四。平时爱喝可乐，爱看Rugby，平时会喜欢在第四教学楼门口抽烟，有一个自行车用于通勤。上课内容输出密度大，课讲得不好理解。上课内容偏概念。</p><p>这门课主要讲解Java语言和面向对象知识。课程有Writing Test（主要考OOP和Java编程的概念，题目与往年相似），上机考试（java编程完成任务，有点复杂，但给分不低），个人Assignment（我们这一届是Asteroid，一个上世界的古早游戏），难度对于当时的我还是挺大的，这很sean，完成任务给分还可以。总体给分也不错，我对sean评价还是Ok的，但是部分同学评价比较差。</p>]]></content>
    
    
    <categories>
      
      <category>BDIC评价</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Stage2春季学期课程评价</title>
    <link href="/2024/07/12/Stage2/stage2%E6%98%A5%E5%AD%A3%E5%AD%A6%E6%9C%9F%E8%AF%BE%E7%A8%8B%E8%AF%84%E4%BB%B7/"/>
    <url>/2024/07/12/Stage2/stage2%E6%98%A5%E5%AD%A3%E5%AD%A6%E6%9C%9F%E8%AF%BE%E7%A8%8B%E8%AF%84%E4%BB%B7/</url>
    
    <content type="html"><![CDATA[<p>一些非常主观的课程评价，仅代表个人立场，无任何偏好。</p><h1 id="Stage2-2"><a href="#Stage2-2" class="headerlink" title="Stage2_2"></a>Stage2_2</h1><h2 id="数据结构2-COMP2014J"><a href="#数据结构2-COMP2014J" class="headerlink" title="数据结构2 COMP2014J"></a>数据结构2 COMP2014J</h2><p>David Lillis</p><p>课程内容较难，但是认真学真的有收获，老师非常认真负责，所有的邮件和讨论区中的消息都会在最快的时间收到回复，是很好的老师，良师益友。</p><p>每周两节课，一节lecture, 一节lab。整门课的评分分为两部分，考试和两个个人大作业（树和图）。lecture不记录考勤。lab课每个小组都有助教，每次有签名单，但是也不记录考勤。课程的大作业在发布成绩后可以申诉，成绩有可能提高。前几周的lab会有小任务，都会在下一节lab前公布答案。后期的lab留给大家做Assignment，有任何问题可以直接问助教。这门课的headTA是david的博士生，其他助教是BDIC大三大四的学长学姐，大家都会尽力解答同学们的问题。考试总体难度不大，题型与往年稳定，看PPT和往年试卷就可以拿高分。</p><h2 id="软件工程课设1-COMP2008J"><a href="#软件工程课设1-COMP2008J" class="headerlink" title="软件工程课设1 COMP2008J"></a>软件工程课设1 COMP2008J</h2><p>Alzubair Hassan</p><p>老师是个苏丹人，博士在电子科技大学就读，现在在BDIC当老师，口音较严重。Alzubair上课的习惯和中国老师很像，会管学生纪律，在教室来回走，上课时不能当着他面玩手机。</p><p>课程内容主要是完成一个团队大作业（4人一组），我们这一届是麻将。这门课没有考试，只有一个随堂测试。这门课程主要涉及软件工程的设计流程问题，比如说如何写规范的代码，如何小组合作，如何考虑用户需求等。还会学习一些工具的使用，如在github协作开发, 如何绘制UML图。每年的大作业选题应该是由同学们投票决定，但是每个组做的是同样的东西，对与实现大作业的技术栈要求不严格，最后有答辩环节，每个成员都可以详细介绍项目的实现即可。对于大作业的具体要求给的并不详细，有些细节最好与他多沟通。大作业最好多使用他上课讲的内容，对于答辩有帮助。这门课我印象中全是外国助教，建议大家多跟HeadTA交流，让他对你们的项目印象深刻。还没有收到分数，暂不做下一步评价。</p><h2 id="计算机网络-COMP2009J"><a href="#计算机网络-COMP2009J" class="headerlink" title="计算机网络 COMP2009J"></a>计算机网络 COMP2009J</h2><p>Alzubair Hassan</p><p>Alzubair同时教两门课，但是我们这个学期，因Hassan家中有事，中间一半的课程由其他老师代替，但是期末考试和大作业仍然是Alzubair负责。这门课有期末考试和两个大作业。老师回复邮件时慢时快，甚至不愿意提供往年考试试卷，让学生们盲考，试卷对比往年其他老师的卷子变动很大，试卷知识点考察很细致，必须死扣PPT或全程跟着上课才能掌握。总体来说，考试难度较大，但是对知识理解不深，只是考的比较奇怪。试卷多为细节题，逻辑计算类的题几乎没有。第一个大作业是使用wireshark抓包，很简单。第二个有关packet tracer网络拓扑模拟，有一定难度。老师听得懂一点中文，大家注意发言。</p><h2 id="数据库与信息系统-COMP2013J"><a href="#数据库与信息系统-COMP2013J" class="headerlink" title="数据库与信息系统 COMP2013J"></a>数据库与信息系统 COMP2013J</h2><p>Ruihai Dong</p><p>一名UCD的中国老师，上课时说英文，中间休息和Lab课会跟大家中文交流。人很好，有问题都会给大家解答，期末考试基本是历年原题，Head TA是他的一个中国人博士生。</p><p>大作业是四人小组作业，完成一个信息系统设计主题自选（车票管理系统，图书管理系统），最后会有答辩，答辩比课设的答辩轻松，用中文答辩即可，难度较易。这项大作业是一个经典的数据库类课程的大作业，所以网上有很多可以借鉴的案例，因此老师对技术栈有要求，要求大家使用上课所讲的技术栈，如果未使用，需要在答辩时解释你的技术栈如何应用。</p><h2 id="离散数学"><a href="#离散数学" class="headerlink" title="离散数学"></a>离散数学</h2><p>王少帆</p><p>北工大信息学部开设的课程，王少帆一直在带都柏林的这门课，所以教学方式趋于稳定，B站（@<strong>王少帆at北工大</strong>）有老师疫情期间录得网课，内容和线下一致，大家可以突击使用。点名次数少，不知是否计算考勤。每章结束收一次作业（4次），并跟一节习题课讲解。考前会有模拟题讲解和答疑时间，课程难度不大，考试难度比作业简单太多，大家只需复习试卷即可。</p>]]></content>
    
    
    <categories>
      
      <category>BDIC评价</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>tme Week3 lab database</title>
    <link href="/2024/03/12/Stage2/tme-Week3-lab-database/"/>
    <url>/2024/03/12/Stage2/tme-Week3-lab-database/</url>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs my">create database week3lab;<br>use week3lab;<br>show tables ;<br>create table q1(<br>    id INT PRIMARY KEY ,<br>    message VARCHAR(144)<br>);<br>ALTER TABLE q1<br>ADD attime TIME;<br>drop table q1;<br>create table item(<br>    itemid INT PRIMARY KEY,<br>    itemname VARCHAR(25) not null UNIQUE ,<br>    itemprice double not null<br>);<br>create table stocklist(<br>    itemid INT,<br>    shoplocation VARCHAR(40),<br>    count INT,<br>    primary key (itemid,shoplocation),<br>    FOREIGN KEY (itemid) references item(itemid) on UPDATE cascade on delete cascade<br>);<br>INSERT INTO item(itemid, itemname, itemprice)<br>VALUES (1,&#x27;Macbook pro 2019&#x27;,3000.00),<br>       (2,&#x27;iMac 2020&#x27;, 4422.53);<br>select * from item;<br>select * from stocklist;<br>update item<br>SET itemprice = itemprice * 1.1 where itemname = &#x27;iMac 2020&#x27;;<br>select * from item;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Stage2</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>COMP 2014J LEARNING PROCESS</title>
    <link href="/2024/03/08/Stage2/COMP-2014J-LEARNING-PROCESS/"/>
    <url>/2024/03/08/Stage2/COMP-2014J-LEARNING-PROCESS/</url>
    
    <content type="html"><![CDATA[<h1 id="Lecture-0"><a href="#Lecture-0" class="headerlink" title="Lecture 0"></a>Lecture 0</h1><p>Lecture: David Lillis</p><p>2 Assignment (40%) and Written Final Exam(60%)</p><h1 id="Lecture-1"><a href="#Lecture-1" class="headerlink" title="Lecture 1"></a>Lecture 1</h1><h2 id="Tree"><a href="#Tree" class="headerlink" title="Tree"></a>Tree</h2><p>树是按层构造的数据结构，每个数据间的关系是父与子。-</p><ul><li>数据储存在Node中</li><li>每个节点有且仅有一个父节点（除root节点），可以有任意数量的子节点。</li></ul><p>术语</p><ul><li><p><strong>Root</strong> of tree: A     头节点，没有父节点 </p></li><li><p><strong>Parent</strong> of H: F</p></li><li><p><strong>Children</strong> of J : K, L</p></li><li><p><strong>Siblings</strong> of F: G   姊妹节点</p></li><li><p><strong>Internal</strong> Nodes: A, B, C, F, G, I, J  (至少有一个子节点)</p></li><li><p><strong>External</strong> Nodes: D, E, H, K, L (没有子节点)</p></li><li><p><strong>Ancestor</strong> of I: A, C, G, I  (自己也可以是自己的祖先)</p></li><li><p><strong>Descendant</strong> of I: I, J, K, L (自己也是自己的后代)</p></li><li><p><strong>Edge</strong>: (U,V) U 是 V 的父节点 </p><p>（A, B), (G, I), BUT (A, G), (F, C) 不是Edge.</p></li><li><p><strong>Path</strong>: 从上到下的有序路径</p><p>（A, C, G, I)</p></li><li><p><strong>Depth</strong> of a node: 该节点祖先的个数，不包括该节点。Depth(A) &#x3D; 0  Depth(G) &#x3D; 2</p></li><li><p><strong>Degree</strong> of a node: 该节点子节点的个数。degree(A) &#x3D; 2, degree(G) &#x3D; 1</p></li><li><p><strong>Height of a tree</strong>： 树的层数  height(T) &#x3D; 5.  最高的节点高度就是树的层数.</p></li><li><p><strong>Subtree of tree T rooted at node v</strong> : 子树</p></li></ul><img src="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/image-20240307215642213.png" alt="image-20240307215642213" style="zoom: 25%;"><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p>最多允许有两个子节点，分为左子节点和右子节点，左节点在右节点之前。</p><p><strong>真二叉树</strong>(Proper Binary Tree): 节点的度为0或2</p><ul><li><p>通过将外部节点扩展为内部节点来实现树</p></li><li><p>只有内部节点存储数据，外部节点为空</p></li><li><p>关键操作</p><ul><li><code>expandExternal(p, e)</code>  创建两个新的空位置,并将它们作为p的左右子元素添加，并将元素e存储在p处。如果p不是外部的，则会发生错误。</li><li><code>remove(p)</code> 如果p的左子元素是外部的，则删除它和p并用右子元素替换p。如果右子节点是外部的，删除它和p并用左子节点替换它。如果两个子节点都在内部或p在外部，则会出错。</li></ul><p>如果一个节点的两个子节点都是内部节点，则无法删除。朴素的理解，删除后无法确定两个姊妹节点的关系。</p></li></ul><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><embed src="./Trees-Exercises.pdf" width="100%" height="750" type="application/pdf"><h1 id="Lecture-2-Tree-Traversals-and-Binary-Search-Trees"><a href="#Lecture-2-Tree-Traversals-and-Binary-Search-Trees" class="headerlink" title="Lecture 2 Tree Traversals and Binary Search Trees"></a>Lecture 2 Tree Traversals and Binary Search Trees</h1><h2 id="树的遍历和访问者模式"><a href="#树的遍历和访问者模式" class="headerlink" title="树的遍历和访问者模式"></a>树的遍历和访问者模式</h2><p>先序遍历：中，左，右   遍历后对于任意的节点都应满足这个顺序</p><img src="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/image-20240308113222487.png" alt="image-20240308113222487" style="zoom: 33%;"><p>实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 递归实现</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">preorder</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    print(root.val);<br>    preorder(root.left);<br>    preoerder(root.right);<br>&#125;<br></code></pre></td></tr></table></figure><p>中序遍历：左，中，右   只对二叉树有意义</p><img src="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/image-20240308114134154.png" alt="image-20240308114134154" style="zoom: 33%;"><p>实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 递归实现</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">inorder</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    preorder(root.left);<br>    print(root.val);<br>    preoerder(root.right);<br>&#125;<br></code></pre></td></tr></table></figure><p>后序遍历：左，右，中</p><img src="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/image-20240308114417818.png" alt="image-20240308114417818" style="zoom:33%;"><p>实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 递归实现</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">postorder</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    preorder(root.left);<br>    preoerder(root.right);<br>    print(root.val);<br>&#125;<br></code></pre></td></tr></table></figure><p>遍历顺序的选择：</p><ul><li><p>释放树种的内存（一次删除一个节点）</p><p>后序遍历：不会在删除子节点前删除他的父节点</p></li><li><p>复制整个树</p><p>前序遍历：先添加父节点的副本再添加子节点副本</p></li><li><p>使用树表示文件系统结构，计算目录&#x2F;文件的大小</p><p>后序遍历：先计算子树大小，相加得到目录大小</p></li><li><p>二叉搜索树中的排序</p><p>中序遍历</p></li></ul><p>思考题：<br>利用先序与中序遍历构造二叉树</p><p><a href="https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">测试链接LeetCode</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> TreeNode <span class="hljs-title function_">buildTree</span><span class="hljs-params">(<span class="hljs-type">int</span>[] pre, <span class="hljs-type">int</span>[] in)</span> &#123;<br><span class="hljs-keyword">if</span> (pre == <span class="hljs-literal">null</span> || in == <span class="hljs-literal">null</span> || pre.length != in.length) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br>HashMap&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; in.length; i++) &#123;<br>map.put(in[i], i);<br>&#125;<br><span class="hljs-keyword">return</span> f(pre, <span class="hljs-number">0</span>, pre.length - <span class="hljs-number">1</span>, in, <span class="hljs-number">0</span>, in.length - <span class="hljs-number">1</span>, map);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> TreeNode <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span>[] pre, <span class="hljs-type">int</span> l1, <span class="hljs-type">int</span> r1, <span class="hljs-type">int</span>[] in, <span class="hljs-type">int</span> l2, <span class="hljs-type">int</span> r2, HashMap&lt;Integer, Integer&gt; map)</span> &#123;<br><span class="hljs-keyword">if</span> (l1 &gt; r1) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><span class="hljs-type">TreeNode</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(pre[l1]);<br><span class="hljs-keyword">if</span> (l1 == r1) &#123;<br><span class="hljs-keyword">return</span> head;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> map.get(pre[l1]);<br><span class="hljs-comment">// pre : l1(........)[.......r1]</span><br><span class="hljs-comment">// in  : (l2......)k[........r2]</span><br><span class="hljs-comment">// (...)是左树对应，[...]是右树的对应</span><br>head.left = f(pre, l1 + <span class="hljs-number">1</span>, (l1 + <span class="hljs-number">1</span>) + (k - l2 - <span class="hljs-number">1</span>), in, l2, k-<span class="hljs-number">1</span>, map);<br>        head.right = f(pre, l1 + k - l2 + <span class="hljs-number">1</span>, r1, in, k + <span class="hljs-number">1</span>, r2,map);<br><span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h2><p>将元素储存为有序结构的二叉树</p><ol><li>内部节点储存element</li><li>左子节点小于父节点</li><li>右子节点大于父节点</li></ol><p><strong><img src="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/image-20240308121151399.png" alt="image-20240308121151399" style="zoom: 33%;"></strong></p><p>中序遍历可得到正确的顺序</p><p>三种基本操作：</p><ul><li><p>put(k, v). 加入键和值。如果k已经存在，将值替换为v.</p><p>利用find()方法查找k，若不存在k，在find()返回的节点处(一个外部节点)扩展两个节点，将其变为内部节点，在这一节点插入(k,v). 如果存在k，则直接将v替换.</p></li><li><p>get(k). 返回这个键关联的值.</p></li><li><p>remove(k). 删除k这个键</p><p>利用find()找到k，若k只有一个外部子节点，直接使用删除方法。如果由两个内部子节点，找到该节点的下一最大节点，将其复制到k这一节点处。</p><img src="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/image-20240308130244406.png" alt="image-20240308130244406" style="zoom:33%;"></li></ul><p>这三种操作基于<code>find(k, n)</code> 从n开始查找，如果k存在，则返回包含k的节点。如果k不存在，则返回搜索结束的外部节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">TreeNode <span class="hljs-title function_">find</span><span class="hljs-params">(k,n)</span> &#123;<br>    <span class="hljs-keyword">if</span>(T.isExternal(n)) &#123;<br>        <span class="hljs-keyword">return</span> n;<br>    &#125;<br>    <span class="hljs-keyword">if</span> k &lt; n.key()&#123;<br>        <span class="hljs-keyword">return</span> find(k, n.left);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(k &gt; n.key()) &#123;<br>        <span class="hljs-keyword">return</span> find(k, n.right);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> n;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>性能：</p><p>空间：O(n)</p><p>时间：</p><ul><li><strong>查找操作</strong>：在平均情况下，查找操作的时间复杂度为 O(log n)，因为每次查找都可以排除一半的节点。但如果树的结构不平衡，最坏情况下可能达到 O(n)。</li><li><strong>插入操作</strong>：插入操作的时间复杂度与查找类似，也是 O(log n)。但如果插入的数据是有序的，树会退化成链表，插入操作的时间复杂度会变为 O(n)。</li><li><strong>删除操作</strong>：删除操作的时间复杂度也与查找类似，平均情况下为 O(log n)。但同样，如果树的结构不平衡，最坏情况下可能达到 O(n)。</li></ul><p>Example:<br><embed src="./02c-Binary-Search-Tree-Example.pdf" width="100%" height="750" type="application/pdf"></p><h1 id="Lecture-3"><a href="#Lecture-3" class="headerlink" title="Lecture 3"></a>Lecture 3</h1><h2 id="AVL-Trees-平衡二叉树"><a href="#AVL-Trees-平衡二叉树" class="headerlink" title="AVL Trees 平衡二叉树"></a>AVL Trees 平衡二叉树</h2><h3 id="AVL：一种平衡二叉搜索树"><a href="#AVL：一种平衡二叉搜索树" class="headerlink" title="AVL：一种平衡二叉搜索树"></a>AVL：一种平衡二叉搜索树</h3><ol><li><p>对于任意子节点，其子树的高度相差最多为1</p></li><li><p>对于任意子节点，其子树也为AVL</p></li><li><p>AVL的性能均为O(logN)</p><img src="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/image-20240311090328888.png" alt="image-20240311090328888" style="zoom:33%;"></li></ol><h3 id="AVL插入："><a href="#AVL插入：" class="headerlink" title="AVL插入："></a>AVL插入：</h3><p>和普通的二叉搜索树相同，但在插入后，需要检查是否仍然满足性质，若不满足，需通过<strong>trinode restructuring</strong>来维持树平衡。</p><ul><li><p>检查平衡：从新展开的节点开始向上搜索，比较每个节点子节点的高度，如果高度差大于1，则树不平衡。</p><img src="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/image-20240314203954911.png" alt="image-20240314203954911" style="zoom:50%;"></li></ul><p>插入54之后，上图树不平衡。我们从54向上搜素，找到第一个不平衡的节点Z，然后设Z的子节点（高度更高的）为Y节点，然后将Y的子节点（高度更高的）设为X。执行<code>restructure(x)</code>对树重建。</p><h3 id="Trinode-重组"><a href="#Trinode-重组" class="headerlink" title="Trinode 重组"></a>Trinode 重组</h3><p>设(a, b, c) 为 x, y, z 按从小到大顺序排列。执行旋转操作，另B成为中间的节点(即其他两个节点的父节点)</p><img src="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/image-20240314205130971.png" alt="image-20240314205130971" style="zoom:40%;"><p>单次旋转：</p><img src="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/image-20240314205211943.png" alt="image-20240314205211943" style="zoom:50%;"><p>双次旋转：</p><img src="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/image-20240314205531895.png" alt="image-20240314205531895" style="zoom:50%;"><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><p>被删除地节点节点成为空的外部节点。从根节点开始向下检查平衡。执行Trinode重组。</p><h1 id="Lecture-4a-Amortised-Analysis"><a href="#Lecture-4a-Amortised-Analysis" class="headerlink" title="Lecture 4a Amortised-Analysis"></a>Lecture 4a Amortised-Analysis</h1><p>摊销分析：考虑一系列操作的总体影响平衡每个操作的成本。</p><h1 id="Lecture-4b-Splay-Trees"><a href="#Lecture-4b-Splay-Trees" class="headerlink" title="Lecture 4b Splay Trees"></a>Lecture 4b Splay Trees</h1><p>一种使用平摊的二叉搜索树。使用<strong>Splaying</strong>维持平衡 (move-to-root)</p><p>特殊的性质：</p><ul><li>最近访问过的节点可以再次快速访问</li><li>用于数据压缩</li></ul><h2 id="Splaying"><a href="#Splaying" class="headerlink" title="Splaying"></a>Splaying</h2><p>给定内部节点X。不断重构将X移动至根节点。根据父节点(Y)和祖父节点(Z)决定如何重构。</p><p>重构操作：</p><ul><li>Zig(没有祖父节点)</li></ul><img src="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/image-20240416220405617.png" alt="image-20240416220405617" style="zoom:50%;"><ul><li><p>Zig-Zig(同AVL单旋转的形状) <img src="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/image-20240416220448849.png" alt="image-20240416220448849" style="zoom:50%;"></p><ol><li>X替换Z，Y成为X的子节点，Z成为Y的子节点</li><li>维持树的大小关系（左小右大）</li><li>起始状态与AVL相同，结果并不同</li></ol></li><li><p>Zig-Zag(同AVL双旋转的形状)</p><img src="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/image-20240416220941337.png" alt="image-20240416220941337" style="zoom:50%;"><ol><li>X成为根节点，Y，Z分别是X的左右子节点</li><li>树的in-order关系维持（左小右大）</li><li>同AVL的双旋转</li></ol></li></ul><h2 id="Splay-Trees"><a href="#Splay-Trees" class="headerlink" title="Splay Trees"></a>Splay Trees</h2><ul><li>get(k): 如果找到K，Splay(k)。若K不存在，对最后的外部节点的父节点执行Splay</li><li>put(k, v): 对新的放入的节点执行Splay</li><li>remove(k): 对实际被删除的节点的父节点执行Splay。删除规则同搜索二叉树</li></ul><h2 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h2><p>查找，插入和删除均为O(logN)</p><h1 id="Lab-1"><a href="#Lab-1" class="headerlink" title="Lab 1"></a>Lab 1</h1><p>3&#x2F;16 上传源代码</p><embed src="./WS1-Trees.pdf" width="100%" height="750" type="application/pdf"><p><a href="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/comp2014J/lab_1_src.zip">src文件下载</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// </span><br></code></pre></td></tr></table></figure><h1 id="Lab-2"><a href="#Lab-2" class="headerlink" title="Lab 2"></a>Lab 2</h1><p>3&#x2F;20上传源代码</p><p><a href="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/comp2014J/lab_2_src.zip">src文件下载</a></p><h1 id="Lab-3"><a href="#Lab-3" class="headerlink" title="Lab 3"></a>Lab 3</h1><p>3&#x2F;27 上传源代码<br><embed src="./WS3-Binary_Tree_Internals.pdf" width="100%" height="750" type="application/pdf"></p><p><a href="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/comp2014J/Compled-WS3-Source.zip">zip项目文件下载</a></p>]]></content>
    
    
    <categories>
      
      <category>Stage2</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>工大环</title>
    <link href="/2024/02/23/%E5%B7%A5%E5%A4%A7%E7%8E%AF/"/>
    <url>/2024/02/23/%E5%B7%A5%E5%A4%A7%E7%8E%AF/</url>
    
    <content type="html"><![CDATA[<div class="strava-embed-placeholder" data-embed-type="route" data-embed-id="3196125439878773084" data-style="standard"></div><script src="https://strava-embeds.com/embed.js"></script>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>OOP writing exam 试题答案整理</title>
    <link href="/2023/12/19/Stage2/OOP-%E8%AF%95%E9%A2%98%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86/"/>
    <url>/2023/12/19/Stage2/OOP-%E8%AF%95%E9%A2%98%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p><em>What is the biggest difference between object-oriented programming and procedural programming? Compare how data is accessed by functions in procedural programs and by methods in object-oriented programs. What effect does this have on the number of parameters required for methods?</em> (2022 Resit a) (2021 Resit Q1 3)</p><ul><li><p><strong>Lecture 01</strong></p><p>The biggest difference is that we structure our programming using classes and objects instead of function.</p><p>Procedural Programming use global data to functions and data is often passed between functions as parameters. OOP store data together methods, methods are used to operate data, data is accessed by a object. </p><p>OOP methods don’t need require as many parameters because they can have access to data in object’s internal state.</p></li></ul><hr><p><em>What format is Java code compiled into? Explain the purpose of the Java Virtual Machine (JVM) in executing Java code. How does this make Java programs portable between different architectures and operation systems? (2020 Final Q1 h)</em></p><ul><li><p><strong>Lecture 01 P8</strong></p><p>Java bytecode.</p><p>JVM can interpret and execute the bytecode.</p><p>It will work an any system with a JVM installed.</p></li></ul><hr><p><em>Is Java a compiled or interpreted programming language? How does this process work? What are the benefits of this approach? (2021 Resit Q2 b)</em> (2021 Final Q1 b)</p><ul><li><p><strong>Lecture 01 P8</strong></p><p>Java is both compiled and interpreted.</p><p>The text we write is compiled into bytecode. An interpreter called JVM can execute the bytecode.</p><p>It makes Java almost as fast as compiled languages.</p></li></ul><hr><p><em>Does Java use static or dynamic typing? Does Python use static or dynamic typing? What is the difference between the two? What are the benefits of static typing? (2021 Resit Q1 a)</em> (2021 Final Q1 a)</p><ul><li><p><strong>Lecture 02</strong></p><p>Java is static, Python is dynamic. </p><p>In Static language, the type of variables are know before compile. We can’t change the type of variable we are using. In dynamic language, the type of variables are determined at runtime. </p><p>Find our mistakes more easily.</p></li></ul><hr><p><em>Explain the difference between an expression and a statement. Name and explain the use of one of the statements in Java you have learned, give an example showing the statement being used. Can a piece of code be both a statement and an expression? Give an example.</em> (2022 Resit b) (2021 Resit Q1 e)</p><ul><li><p><strong>Lecture 02 P42</strong></p><p>A statement is a piece of code that does something. An expression is a piece of code that can be calculated<br>to give us a result. <code>int number;</code> It be used to declare a int named number. Yes. <code>int number = 5;</code></p></li></ul><hr><p><em>What are the main differences between arrays in Java and Lists in Python? How can we find the size of an array in Java (Include an example of finding the size)? Give an example of declaring and constructing an array to remember 10 int values. (2021 Resit Q1 d)</em> (2021 Final Q1 d)</p><ul><li><p><strong>Lecture 02 P56</strong></p><p>Arrays in Java have a fixed size and all values in a array must be the same type. Lists in Python have a flexible size and cloud have different type of values.</p><p>Using <code>arrayName.length</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">numbers</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>];<br><span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> number.length;<br></code></pre></td></tr></table></figure></li></ul><hr><p><em>Java has many rules about what names we can use for classes, methods and variables (known as identifiers). In addition to this programmers should also follow a number of conventions for identifiers. For each of the following, list the conventions (not the rules) that you should follow:  (2021 Final Q1 c) (2020 Final Q1 e) (2020 Resit Q1 d)</em></p><p><em>(i) All identifiers (ii) Class identifiers (iii) Variable identifiers (iv) Constant identifiers</em></p><ul><li><strong>Lecture 02 P29</strong></li></ul><p>​     All identifiers: can contain letters,digits and underscore. cannot start with a digit,         cannot contain spaces, they are case sensitive.</p><p>​     Class identifiers: start with an uppercase letter, more than one word use camel case.</p><p>​     Variable identifiers: start with a lowercase letter, more than one word use camel case.</p><p>​     Constant identifiers: use all uppercase letter, separate words with underscores (‘__’)</p><hr><p><em>Given the variables listed below, calculate the type of data that would be returned as the result of each of the following expressions? Explain each of your answers. • An int named i  (2020 Final Q1 a) (2020 Resit Q1 a)</em></p><p>• A long named l </p><p>• A short named s </p><p>• A String named t </p><p>• A float named f </p><p>• A double named d </p><p>(i) i + d     (ii) l - i * s     (iii) i &#x2F; s     (iv) l + i + t    (v) s &lt; i</p><ul><li><p><strong>Lecture 02 P11</strong></p><p>i. <code>i + d</code></p><ul><li>result is a <code>double</code></li><li>Explanation: The <code>int</code> would be implicitly promoted a <code>double</code> for the addition operation.</li></ul><p>ii. <code>l -i *s</code></p><ul><li>result is a <code>long</code> </li><li>Explanation: <code>i * s</code> is a <code>short</code>, and <code>l - short</code> is a <code>long</code></li></ul><p>iii. <code>i/s</code></p><ul><li>result is a <code>short</code></li><li>implicitly promoted</li></ul><p>iv: <code>l + i + t</code></p><ul><li>result: String</li><li>it is String operators. Numbers will automatically be converted to string</li></ul><p>v. <code>s &lt; i</code></p><ul><li>result: boolean</li><li>Belongs to the comparison operator</li></ul></li></ul><hr><p><em>What is the implicit parameter? Given the following example of comparing two date objects (birthday and today), which is the implicit parameter?</em> (2022 Resit c) (2021 Resit Q2 d) (2020 Final Q1 c) (2020 Resit Q1 c)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">today.sameDate(birthday);<br></code></pre></td></tr></table></figure><p><em>Rewrite the following method to show the implicit parameter in the code using the keyword this:</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">summate</span> <span class="hljs-params">(<span class="hljs-type">int</span> a )</span> &#123;<br>count = count + a;<br><span class="hljs-keyword">if</span> ( count &gt; <span class="hljs-number">28</span>) &#123;<br><span class="hljs-keyword">return</span> sum () ;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><strong>Lecture 03 P39</strong></p><p>The object we use to call method is know as implicit parameter. In example, <code>today</code> is implicit parameter.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">summate</span> <span class="hljs-params">(<span class="hljs-type">int</span> a )</span> &#123;<br><span class="hljs-built_in">this</span>.count = <span class="hljs-built_in">this</span>.count + a;<br><span class="hljs-keyword">if</span> ( <span class="hljs-built_in">this</span>.count &gt; <span class="hljs-number">28</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.sum () ;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><p><em>Explain the difference between the two examples below. What is the output in each example? (2021 Final Q1 e)</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">120</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> x;<br>y++;<br>System.out.println(x + <span class="hljs-string">&quot; &quot;</span> + y);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Date</span> <span class="hljs-variable">today</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2019</span>);<br><span class="hljs-type">Date</span> <span class="hljs-variable">tomorrow</span> <span class="hljs-operator">=</span> today;<br>tomorrow.incrementDay();<br>System.out.println(today.getDay() + <span class="hljs-string">&quot; &quot;</span> + tomorrow.getDay());<br></code></pre></td></tr></table></figure><ul><li><p><strong>Lecture 3 P47</strong></p><p>First one is primitive variables, they are stored directly in memory. The value of 120 is stored in the variable x. The value of x is then copied into y. When y is incremented, only the value of y changes. So output is <code>120 121</code></p><p>Second one is object variables. When <code>tomorrow</code> is assigned the value of <code>today</code> both references point to the same<code>Date</code> object. So when <code>tomorrow</code> is incrementDay, the today also is changed. Output is <code>2 2</code></p></li></ul><hr><p><em>Explain in your own words the OOP concept cohesion. Describe high and low cohesion. Which is considered good? Why? (2022 Resit d) (2020 Resit Q1 h)</em> </p><ul><li><p><strong>Lecture 04 P34</strong></p><p>Cohesion in programming is about how much the elements of a component belong together. It measures the strength of relationship between method in class. High cohesion is better. High cohesion is related to robustness, reliability, reusability, easy to understand AND maintain. But low cohesion is not.</p></li></ul><hr><p><em>Explain the difference between the following pieces of code (Assuming s is a String variable). Will they always return the same result? Why? (2022 Resit e) (2020 Final Q1 b)</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">s == <span class="hljs-string">&quot; Hello &quot;</span>;       s.equals (<span class="hljs-string">&quot;Hello&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li><p><strong>Lecture  05 P40</strong></p><p><code>==</code> compare the memory address of two string. <code>equals</code> is a method of String be used to compare 2 string whether same.</p></li></ul><p>​No. <code>==</code> not always worked, when dynamically create String.</p><hr><p><em>Explain the concept of a ‘black box’ in programming. How does encapsulation allow us to achieve this concept in Java? (2020 Final Q1 d )</em></p><ul><li><p><strong>Lecture 06 P18</strong></p><p>Black box is a system which can know what it can do but not need to know how it work. Such as A car, we know how to drive it, but don’t know why.</p><p>Encapsulation is achieved through the use of access modifiers to restrict access to class member, such as public private.</p></li></ul><hr><p><em>What effect does the keyword final have on a variable? Explain the difference between a final primitive variable and a final object variable. (2022 Resit Q2 a) (2021 Resit Q2 b)</em> </p><ul><li><p><strong>Lecture 06 P38</strong></p><p>Final variables can be assigned only once, it would never change. Final primitive variable and final object variable couldn’t be changed after initialization. But final object variable could be modified. Such as A final ArrayList could add element.</p></li></ul><hr><p><em>What is encapsulation? Why is it useful in Object-Oriented Programming? How do we implement encapsulation in Java? (2021 Resit Q2 a)</em> (2021 Final Q2 a) (2020 Resit Q1 j)</p><ul><li><p><strong>Lecture 06 P17</strong></p><p>Encapsulation is the combination 2 ideas: 1. Grouping together of instance variable and methods into classes. 2. Ability to restrict access to some of the objects components.</p><p>It provides a way to protect internal of object. Easy to maintain and test.</p><p>Encapsulation is achieved through the use of access modifiers to restrict access to class member, such as public private. If other class need to access variables always call getter and setter.</p></li></ul><hr><p><em>What is the function of the keyword final in Java? What effect does it have on a variable? What effect does it have on a method? What effect does it have on a class? (2020 Resit Q1 b)</em></p><ul><li><p><strong>Lecture 06 P38 &amp; Lecture 08 P63</strong></p><p>Final is used in declaration variable, method or class is “final” and cannot be changed. </p><p>Final variables can be assigned only once, it would never change.</p><p>Final class is one that cannot be extended. </p><p>Final method cannot be overridden by subclasses. It means when class is extended, the final methods cannot be overridden.</p></li></ul><hr><p><em>What is the function of the keyword static in Java? What effect does it have on a variable? What effect does it have on a method? Give an example of using the static method hello in the class Mess. The signature of the method is hello(int n, String s) (2021 Fina Q2 b)</em></p><ul><li><p><strong>Lecture 06 P32</strong></p><p>static in Java is used in declaration class variable and class method.</p><p>Class variable share a single value over all object, only created in memory once. </p><p>Class method not connected to objects, cannot use instance variables. It allows other to use this method without create object.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Mess</span> &#123;<br>    pubilc <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Mess.hello(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;you&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello</span><span class="hljs-params">(<span class="hljs-type">int</span> n, String s)</span> &#123;<br>        System.out.println(n + s);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><p><em>Describe how Interfaces can be used to enable code reuse in Java. Describe in detail how an interface would be defined and implemented to make reusable code. (2022 Resit Q2 b) (2021 Resit Q2 c)</em>  (2021 Final Q2 c) (2020 Final Q1 f)</p><ul><li><p><strong>Lecture 07 P16</strong></p><p>Interface is a list of action an object can do. Its methods focus on behave like an “X”. An interface specifier what an object can do not how.</p><p>Defined an interface and implemented.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">InterfaceName</span> &#123;<br>    pubilc <span class="hljs-keyword">void</span> requiredMethod<br>&#125;<br><br>Public <span class="hljs-keyword">class</span> <span class="hljs-title class_">className</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InterfaceName</span> &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><p><em>Explain the idea of polymorphism in your own words. You should illustrate using an example with some code showing its use. (2021 Final Q2 e)</em></p><ul><li><p>Polymorphism means that we can store object in different type, and when executing methods each object may execute different versions of the same method according to their type.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">add</span><span class="hljs-params">(String a, String B)</span> &#123;<br>    <span class="hljs-keyword">return</span> a + b<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><p><em>What is an immutable object? What changes must we make to a class to make its objects immutable? (2021 Final Q2 d)</em></p><ul><li><p><strong>Lecture 08 P69</strong></p><p>An object is considered immutable if its state cannot change after it is constructed.</p><p>All instance variables and class variables are declared as final and private. Setter methods are not provided. Subclasses are not allowed to override, usually this is done by declaring the class as final. Instance variables that refer to objects cannot be changed.</p></li></ul><hr><p><em>Explain the phrase “prefer composition over inheritance” in your own words. How is this achieved in a Java class? Give one benefit and one drawback of choosing to create a class using composition instead of inheritance. (2022 Resit Q2 c)</em> (2021 Resit Q2 e)</p><ul><li><p><strong>Lecture 08 P77</strong></p><p>It means whenever possible you should define classes using composition instead of inheritance. It is a general rule of good design.</p><p>Composition can be achieved by creating objects of other classes within a class and using them to provided desired function.</p><p>Benefit: More code reuse.</p><p>Drawback: Implementing many forwarding methods. We need to add many forwarding methods, getter and setter.</p></li></ul><hr><p><em>Given the following two examples of nested classes (a and b). Explain the difference between the two examples. Write the code required to create an object based on the nested class for each example.(2021 Final Q3 b)</em></p><p><img src="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/image-20231219152840199.png" alt="image-20231219152840199"></p><ul><li><p><strong>Lecture 09 P25</strong></p><p>Static nested class is not connect to an instance of the outer class and so it cannot access the instance variables of the outer class. They can be constructed without an instance of the outer class.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// a</span><br>C.object = <span class="hljs-keyword">new</span> <span class="hljs-title class_">C</span>();<br>C.<span class="hljs-type">D</span> <span class="hljs-variable">nestedObject</span> <span class="hljs-operator">=</span> object.<span class="hljs-keyword">new</span> <span class="hljs-title class_">D</span>();<br><br><span class="hljs-comment">// b</span><br>E.<span class="hljs-type">F</span> <span class="hljs-variable">nestedObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">E</span>.F();<br></code></pre></td></tr></table></figure></li></ul><hr><p><em>What is a lambda function? When can we use a lambda function in Java? Define a lambda function to implement the Calculator interface defined below. The lambda function should calculate the product of these numbers multiplied by 2 (i.e a ∗ b ∗ 2). What parts of the syntax of a lambda function are optional? (2022 Resit Q2 d) (2021 Resit Q3 a) (2021 Final Q3 a)</em>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Calculator</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-title function_">performCalculation</span> <span class="hljs-params">(<span class="hljs-type">int</span> a , <span class="hljs-type">int</span> b )</span> ;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><strong>Lecture 09 P28</strong></p><p>Lambda is a simple way to represent anonymous inner classes. They could be used when interface require a single method.</p><p><code>Calculator lam = (a,b) -&gt; &#123;a * b *2&#125;</code></p><p><strong>Variable type</strong>, <strong>round brackets</strong> when only a single parameter, <strong>curly braces</strong> when only a single statement are optional.</p></li></ul><hr><p><em>Explain the concept of inversion of control. What is required in our code to make this work? Why is this necessary when we are programming a graphical user interface? (2022 Resit Q2 e)</em> (2020 Final Q1 g)</p><ul><li><p><strong>Lecture 10 P9</strong></p><p>It give control to framework, the framework will decide the code will be executed.</p><p>We must implement specific methods, typically in classes that have extended a class in the framework.</p><p>That’s because we can not know when our code should be executed.</p></li></ul><hr><p><em>What is a callback method? List the steps we must complete to cause a message to be printed on the screen whenever the user clicks the mouse.(2021 Resit Q3 b)</em></p><ul><li><p><strong>Lecture 10 P46</strong></p><p>A callback method is a method that we implement knowing that it will be called whenever a particular event happens.</p><ol><li>Implement the <code>MouseListen</code> interface.</li><li>Define the code to print on screen and the listener to call when the mouse is clicked.</li><li>Draw the window again by calling the repaint method.</li></ol></li></ul><hr><p><em>What is a Stack Trace? Explain the order that a stack trace is printed in and why. (2022 Resit Q3 a)</em> (2021 Resit Q3 e) (2020 Final Q1 i)</p><ul><li><p><strong>Lecture 11 P14</strong></p><p>When an exception happens, a stack trace tells us what frames were on the stack at exact moment that the exception happened.</p><p>The order of stack trace is stack frames are removed, due to the principle of stack LIFO.</p></li></ul><hr><p><em>What is the difference between the information in a text file and a data file? Give an example of both storing the integer value 123. What would happen if I try to use readLine from a BufferedReader to read information from a data file containing integer values? (2022 Resit Q3 b) (2020 Resit Q1 i)</em> </p><ul><li><p><strong>Lecture 12 P11</strong></p><p>Text file are used only to store text information, this data is represented using ASCll codes. Easy to understand. Data file contain only data in binary. Difficult to understand.<br>Text: 123</p><p>Data: 1111011</p><p><code>readLine</code> can result in loss of procession or unexpected characters.</p></li></ul><hr><p><em>Describe the difference between traditional testing and unit testing. How do we know when we have enough code coverage in our testing? (2022  Resit Q3 c)</em> (2021 Resit Q3 c) (2021 Final Q3 c) (2020 Resit Q1 f)</p><ul><li><p>**Lecture 13 P5 **</p><p>Traditional testing means running the program and seeing the result. Unit testing is testing each component of the system individually.</p><p>Code coverage is measured by tools and expressed as a percentage of the total code.</p></li></ul><hr><p><em>What is code coverage? With respect to code coverage, explain each of the following coverage criteria: (2020 Final Q1 j)</em></p><p><em>• Function coverage</em> </p><p><em>• Statement coverage</em> </p><p><em>• Branch coverage</em> </p><p><em>• Condition coverage</em></p><ul><li><p><strong>Lecture 13 P49</strong></p><p>Code coverage is a measurement of the code that has been tested.</p><ul><li>Function coverage: Has each function in the application been called by test?</li><li>Statement coverage: Has each statement in the application been called by test?</li><li>Branch coverage: Has each branch of each control structure been executed by the test?</li><li>Condition coverage: Has each Boolean sub-expression evaluated both to true and false?</li></ul></li></ul><hr><p><em>What is the purpose of code documentation (e.g. Javadoc)? Write a suitable javadoc comment for the following method. Parameters, return types and exceptions should be specified correctly (you can list yourself as the author). (2022 Resit Q3 d)</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">converToInteger</span><span class="hljs-params">(String s)</span> &#123;<br>    <span class="hljs-keyword">if</span>(s == <span class="hljs-literal">null</span> || s.length() == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Input is not valid!&quot;</span>);<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br>        <span class="hljs-keyword">if</span>(s.charAt(i) &lt; <span class="hljs-string">&#x27;0&#x27;</span> || s.charAt(i) &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NumberFormatException</span>(<span class="hljs-string">&quot;Input is not a number!&quot;</span>);<br>        &#125;<br>        result = result * <span class="hljs-number">10</span> + (s.charAt(i) - <span class="hljs-string">&#x27;0&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><strong>Lecture 14 P5</strong></p><p>Code Documentation is for explaining what code does, it is useful for others to use our code without having to read the code.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Convert a string to an integer.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> s The String to be converted to an integer.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The integer value represented by the string.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IllegalArgumentException If the input string is null or empty.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> NumberFormatException If the input string is not a valid number string.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Le Liu</span><br></code></pre></td></tr></table></figure></li></ul><hr><p><em>Explain how generics improves type checking in the compiler. Give an example of a situation where an error would not be detected without generics. (2022 Resit Q3 e)</em> (2021 Final Q3 d)</p><ul><li><p>**Lecture 15 **</p><p>Generic allows for writing code that can work with variety of data type while proving strong type checking at compile time. If a parameter is not correct, the compiler will show an error.</p><p>Given a stack only for storing int. If we push a element not be int, error will show until we pop() it. We can’t find error when push it.</p></li></ul><hr><p><em>When does Java know what type a generic object will be using? Give an example of the code required to construct an object based on the generic class named GC. The object should use integer values for the parameters type. The class has a constructor that takes no parameters. (2021 Final Q3 e) (2020 Resit Q1 g)</em></p><ul><li><p><strong>Lecture 15</strong></p><p>During compile-time.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">GC&lt;Integer&gt; g = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GC</span>&lt;&gt;();<br>g.setvalue(<span class="hljs-number">5</span>);<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Stage2</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2021_Programming_Exam_开卷考参考文档</title>
    <link href="/2023/12/14/Stage2/2021_Programming_Exam/"/>
    <url>/2023/12/14/Stage2/2021_Programming_Exam/</url>
    
    <content type="html"><![CDATA[<p><img src="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/image-20231214115224920.png" alt="image-20231214115224920"></p><p><img src="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/image-20231214115243096.png" alt="image-20231214115243096"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Q2</span> &#123;<br>    <span class="hljs-keyword">private</span> ArrayList&lt;String&gt; arrayList;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span>[] doubleArray;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> rearOfDoubleArray;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Q2</span><span class="hljs-params">(<span class="hljs-type">int</span> initialSize)</span> &#123;<br>        <span class="hljs-keyword">if</span> (initialSize &lt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>();<br>        &#125;<br>        doubleArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[initialSize];<br>        arrayList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> ArrayList&lt;String&gt; <span class="hljs-title function_">getArrayList</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(arrayList);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span>[] getDoubleArray() &#123;<br>        <span class="hljs-keyword">return</span> Arrays.copyOf(doubleArray, rearOfDoubleArray);<br>    &#125;<br><br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Number value)</span> &#123;<br>        <span class="hljs-keyword">if</span>(rearOfDoubleArray == doubleArray.length -<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-type">double</span>[] newDoubleArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[doubleArray.length +<span class="hljs-number">5</span>];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; doubleArray.length; i++)&#123;<br>                newDoubleArray[i] = doubleArray[i];<br>            &#125;<br>            doubleArray = newDoubleArray;<br>        &#125;<br>        doubleArray[rearOfDoubleArray] = value.doubleValue();<br>        rearOfDoubleArray++;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Object value)</span> &#123;<br>        arrayList.add(value.toString());<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">contains</span><span class="hljs-params">(Number value)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">double</span> element : doubleArray) &#123;<br>            <span class="hljs-keyword">if</span> (element ==  value.doubleValue()) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">contains</span><span class="hljs-params">(Object value)</span> &#123;<br>        <span class="hljs-keyword">return</span> arrayList.contains(value.toString());<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (String element : arrayList)&#123;<br>            s += element + <span class="hljs-string">&quot;,&quot;</span>;<br>            count++;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; rearOfDoubleArray; i++) &#123;<br>                <span class="hljs-keyword">if</span> (i != rearOfDoubleArray - <span class="hljs-number">1</span>) &#123;<br>                    s += doubleArray[i] + <span class="hljs-string">&quot;,&quot;</span>;<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    s += doubleArray[i];<br>                &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/image-20231214115942916.png" alt="image-20231214115942916"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Q3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ArrayList&lt;Student&gt; <span class="hljs-title function_">readStudentsFile</span><span class="hljs-params">(String fileName)</span> &#123;<br>        ArrayList&lt;Student&gt; students = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Student&gt;();<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(fileName))) &#123;<br>            String line;<br><br>            <span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>                line = line.trim();<br>                String[] parts = line.split(<span class="hljs-string">&quot;,&quot;</span>);<br>                <span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(parts[<span class="hljs-number">1</span>], parts[<span class="hljs-number">0</span>], parts[<span class="hljs-number">2</span>]);<br>                students.add(s);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> students;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sortAge</span><span class="hljs-params">(ArrayList&lt;Student&gt; students)</span> &#123;<br>        Collections.sort(students, (a, b) -&gt; &#123;<br>            <span class="hljs-keyword">return</span> a.getDateOfBirth().compareTo(b.getDateOfBirth());<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sortFamilyGivenName</span><span class="hljs-params">(ArrayList&lt;Student&gt; students)</span> &#123;<br>        Collections.sort(students, (a, b) -&gt; &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">comparison</span> <span class="hljs-operator">=</span> a.getFamilyName().compareTo(b.getFamilyName());<br>            <span class="hljs-keyword">if</span> (comparison == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> a.getGivenName().compareTo(b.getGivenName());<br>            &#125;<br>            <span class="hljs-keyword">return</span> comparison;<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Student <span class="hljs-title function_">getMedianAgeStudent</span><span class="hljs-params">(ArrayList&lt;Student&gt; students)</span> &#123;<br>        sortAge(students);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">medIndex</span> <span class="hljs-operator">=</span> students.size() / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">return</span> students.get(medIndex);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Student <span class="hljs-title function_">getYoungestStudent</span><span class="hljs-params">(ArrayList&lt;Student&gt; students)</span> &#123;<br>        sortAge(students);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">youngestIndex</span> <span class="hljs-operator">=</span> students.size() - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> students.get(youngestIndex);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Student <span class="hljs-title function_">getOldestStudent</span><span class="hljs-params">(ArrayList&lt;Student&gt; students)</span> &#123;<br>        sortAge(students);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">oldestIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> students.get(oldestIndex);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>Hint:</strong></p><p>按照年龄大小排序 <code>Collection.sort()</code></p><p><img src="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/image-20231214130512400.png" alt="image-20231214130512400"></p>]]></content>
    
    
    <categories>
      
      <category>Stage2</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2022_Programming Exam_开卷考参考文档</title>
    <link href="/2023/12/14/Stage2/2022_Programming_Exam/"/>
    <url>/2023/12/14/Stage2/2022_Programming_Exam/</url>
    
    <content type="html"><![CDATA[<p><img src="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/image-20231214104329639.png" alt="image-20231214104329639"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Q1</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">diagonals</span><span class="hljs-params">(<span class="hljs-type">int</span> size, <span class="hljs-type">int</span> gap, <span class="hljs-type">char</span> char1, <span class="hljs-type">char</span> char2)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span>(char1 == char2)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (size &lt; <span class="hljs-number">7</span> || size &gt; <span class="hljs-number">31</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (gap &lt; <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>();<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; size; j++)&#123;<br>                <span class="hljs-keyword">if</span> (i == j || (j-i) % (gap + <span class="hljs-number">1</span>) == <span class="hljs-number">0</span>)&#123;<br>                    pattern += char1;<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    pattern += char2;<br>                &#125;<br><br>                <span class="hljs-keyword">if</span>(j == size - <span class="hljs-number">1</span> &amp;&amp; i != size-<span class="hljs-number">1</span>)&#123;<br>                    pattern += <span class="hljs-string">&quot;\n&quot;</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> pattern;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(Q1.diagonals(<span class="hljs-number">10</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;+&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>));<br>        System.out.println(Q1.diagonals(<span class="hljs-number">12</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;X&#x27;</span>, <span class="hljs-string">&#x27;!&#x27;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Question 2: Modelling and Processing Files and Objects</strong><br>The world cup is currently under way, but the organisers have been very forgetful. They need a<br>system to help them keep track of the progress of the tournament and determine which teams<br>have won in the groups and which games should be played next.</p><p><strong>a. Define a class named FootballTeam which implements the Team interface provided.</strong> This<br>class will be used to keep track of the progress of teams in the group stages of the<br>tournament. This means we need to be able to remember or calculate all of the relevant<br>statistics. The methods in the FootballTeam class should be implemented based on the<br>following descriptions:<br>•public String getName() - Returns the name of the team<br>•public int getWins() - Returns the number of games the team has won<br>•public int getLosses() - Returns the number of games the team has lost<br>•public int getDraws() - Returns the number of games the team has drawn<br>•public int getPoints() - Returns the number of points the team has scored (3<br>for a win, 1 for a draw and 0 for a loss)<br>•public int getGoalsFor() - Returns the number of goals that this team has scored<br>in all of their games<br>•public int getGoalsAgainst() - Returns the number of goals that other teams<br>have scored when playing this team<br>•public int addGame(Game g) - Adds the result of a game that was played by this<br>team.1 In order to function in the testing system, you must also add a constructor<br>with the following signature:<br>public FootballTeam(String name).</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FootballTeam</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;FootballTeam&gt;, Team &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> wins;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> draws;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> losses;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> goalsFor;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> goalsAgainst;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> points;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">FootballTeam</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addGame</span><span class="hljs-params">(Game game)</span> &#123;<br>        <span class="hljs-type">Result</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> game.getResult(<span class="hljs-built_in">this</span>);<br>        <span class="hljs-keyword">if</span> (result == Result.WIN) &#123;<br>            wins++;<br>            points += <span class="hljs-number">3</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (result == Result.DRAW) &#123;<br>            draws++;<br>            points++;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            losses++;<br>        &#125;<br>        goalsFor += game.getGoalsFor(<span class="hljs-built_in">this</span>);<br>        goalsAgainst += game.getGoalsAgainst(<span class="hljs-built_in">this</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getWins</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> wins;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getLosses</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> losses;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getDraws</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> draws;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getPoints</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> points;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(FootballTeam other)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.getPoints() &gt; other.getPoints()) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.getPoints() &lt; other.getPoints()) &#123;<br>            <span class="hljs-keyword">return</span> +<span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.getGoalsFor() - <span class="hljs-built_in">this</span>.getGoalsAgainst() &gt; other.getGoalsFor() - other.getGoalsAgainst()) &#123;<br>                <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.getGoalsFor() - <span class="hljs-built_in">this</span>.getGoalsAgainst() &lt; other.getGoalsFor() - other.getGoalsAgainst()) &#123;<br>                <span class="hljs-keyword">return</span> +<span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.getGoalsFor() &gt; other.getGoalsFor()) &#123;<br>                    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.getGoalsFor() &lt; other.getGoalsFor()) &#123;<br>                    <span class="hljs-keyword">return</span> +<span class="hljs-number">1</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name.compareTo(other.name);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getGoalsFor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> goalsFor;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getGoalsAgainst</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> goalsAgainst;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> compareTo( NumberSubClass <span class="hljs-built_in">ref</span>erenceName )<br></code></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p><strong>referenceName</strong> – 可以是一个 Byte, Double, Integer, Float, Long 或 Short 类型的参数。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><ul><li>如果指定的数与参数相等返回 0。</li><li>如果指定的数小于参数返回 -1。</li><li>如果指定的数大于参数返回 1。</li></ul><p><strong>b. Define a class named FootballGame which implements the Game interface provided</strong>. This<br>class will be used to remember the statistics of a single game in the tournament between<br>two teams. The methods in the FootballGame class should be implemented based on the<br>following descriptions:<br>•public Result getResult(Team team) - Returns the result of the game (Result.WIN,<br>Result.LOSS, or result.DRAW) for the team passed as a parameter<br>•public int getGoalsFor(Team team) - Returns the number of goals that were<br>scored by the team passed as a parameter<br>•public int getGoalsAgainst(Team team) - Returns the number of goals that<br>were against by the team passed as a parameter<br>For all of these methods, if the team parameter that is passed does not match either of<br>the teams in the game then an IllegalArgumentException should be thrown.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FootballGame</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Game</span>&#123;<br>    <span class="hljs-keyword">private</span> Team teamA;<br>    <span class="hljs-keyword">private</span> Team teamB;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> scoreA;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> scoreB;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">FootballGame</span><span class="hljs-params">(Team teamA, <span class="hljs-type">int</span> scoreA, Team teamB, <span class="hljs-type">int</span> scoreB)</span>&#123;<br>        <span class="hljs-built_in">this</span>.teamA = teamA;<br>        <span class="hljs-built_in">this</span>.teamB = teamB;<br>        <span class="hljs-built_in">this</span>.scoreA = scoreA;<br>        <span class="hljs-built_in">this</span>.scoreB = scoreB;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">getResult</span><span class="hljs-params">(Team a)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!a.equals(teamA) &amp;&amp; !a.equals(teamB)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>();<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (a.equals(teamA)) &#123;<br>            <span class="hljs-keyword">if</span> (scoreA &gt; scoreB) &#123;<br>                <span class="hljs-keyword">return</span> Result.WIN;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (scoreA &lt; scoreB) &#123;<br>                <span class="hljs-keyword">return</span> Result.LOSS;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> Result.DRAW;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a.equals(teamB)) &#123;<br>            <span class="hljs-keyword">if</span> (scoreA &gt; scoreB) &#123;<br>                <span class="hljs-keyword">return</span> Result.LOSS;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (scoreA &lt; scoreB) &#123;<br>                <span class="hljs-keyword">return</span> Result.WIN;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> Result.DRAW;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getGoalsFor</span><span class="hljs-params">(Team a)</span> &#123;<br>        <span class="hljs-keyword">if</span> (a.equals(teamA)) &#123;<br>            <span class="hljs-keyword">return</span> scoreA;<br>        &#125; <span class="hljs-keyword">else</span>   &#123;<br>            <span class="hljs-keyword">return</span> scoreB;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getGoalsAgainst</span><span class="hljs-params">(Team a)</span> &#123;<br>        <span class="hljs-keyword">if</span> (a.equals(teamA)) &#123;<br>            <span class="hljs-keyword">return</span> scoreB;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> scoreA;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>c. Define a class named WorldCupGroup which implements the Group interface provided.</strong><br>This class will be used to determine which teams can progress to the next round of the<br>tournament as well as producing the table of results. The methods in the WorldCupGroup<br>class should be implemented based on the following descriptions:<br>•public Team getWinner() - Returns the team object of the team that came first<br>in the group<br>•public Team getRunnerUp() - Returns the team object of the team that came<br>second in the group<br>•public String getTable() - Returns a string containing the current table for the<br>group.<br>The getTable method should have output in the following format. The group name<br>should be on the first line, the column headers should be on the second line, and the<br>teams and their statistics should be on the remaining lines. An example of the output is<br>given here:<br><img src="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/image-20231214112811984.png" alt="image-20231214112811984"><br>In this the following abbreviations are made:<br>•W - For the number of games the team has won<br>•D - For the number of games the team has drawn<br>•L - For the number of games the team has lost<br>•F - For the number of goals the team has scored<br>•A - For the number of goals that have been scored against this team<br>•P - For the number of points the team has scored<br>The teams should be primarily ordered from largest to smallest by points. If teams are<br>equal on points, then they should be secondarily ordered by goal difference (F - A).<br>Finally, if all of these are equal then they should be orders based on their names. All<br>of the methods in this class rely on the ability to correctly order the teams in this way.<br>Consider what approach you will use to sort the objects into the correct order.<br>In order to function in the testing system, you must also add a constructor with the<br>following signature:<br>public WorldCupGroup(String groupName, Team a, Team b, Team c, Team d)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WorldCupGroup</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Group</span>&#123;<br>    <span class="hljs-keyword">private</span> String groupName;<br>    <span class="hljs-keyword">private</span> Team a;<br>    <span class="hljs-keyword">private</span> Team b;<br>    <span class="hljs-keyword">private</span> Team c;<br>    <span class="hljs-keyword">private</span> Team d;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">WorldCupGroup</span><span class="hljs-params">(String groupName, Team a, Team b, Team c, Team d)</span>&#123;<br>        <span class="hljs-built_in">this</span>.groupName = groupName;<br>        <span class="hljs-built_in">this</span>.a = a;<br>        <span class="hljs-built_in">this</span>.b = b;<br>        <span class="hljs-built_in">this</span>.c = c;<br>        <span class="hljs-built_in">this</span>.d = d;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> groupName;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getTable</span><span class="hljs-params">()</span> &#123;<br>        Team[] teams = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Team</span>[] &#123;a, b, c, d&#125;;<br>        <span class="hljs-type">Team</span> <span class="hljs-variable">winner</span> <span class="hljs-operator">=</span> getWinner();<br>        <span class="hljs-type">Team</span> <span class="hljs-variable">runnerUp</span> <span class="hljs-operator">=</span> getRunnerUp();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">table</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        table += (<span class="hljs-string">&quot;Group &quot;</span> + getName() + <span class="hljs-string">&quot;:\n&quot;</span>);<br>        table += String.format(<span class="hljs-string">&quot;%-20s %3s %3s %3s %3s %3s %3s \n&quot;</span>, <span class="hljs-string">&quot;Team&quot;</span>, <span class="hljs-string">&quot;W&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;L&quot;</span>, <span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;P&quot;</span>);<br>        table += formatTableRow(winner);<br>        table += formatTableRow(runnerUp);<br><br>        <span class="hljs-type">Team</span> <span class="hljs-variable">third</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">for</span> (Team i : teams) &#123;<br>            <span class="hljs-keyword">if</span> (i != winner &amp;&amp; i != runnerUp) &#123;<br>                <span class="hljs-keyword">if</span> (third == <span class="hljs-literal">null</span> || (i.getPoints() &gt; third.getPoints()) || (i.getPoints() == third.getPoints() &amp;&amp; (i.getGoalsFor() - i.getGoalsAgainst()) &gt; (third.getGoalsFor() - third.getGoalsAgainst())) || (i.getPoints() == winner.getPoints() &amp;&amp; i.getGoalsFor() - i.getGoalsAgainst() == winner.getGoalsFor() - winner.getGoalsAgainst() &amp;&amp; i.getName().compareTo(winner.getName()) &lt; <span class="hljs-number">0</span>)) &#123;<br>                    third = i;<br>                    table += formatTableRow(third);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    table += formatTableRow(i);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> table;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">formatTableRow</span><span class="hljs-params">(Team team)</span> &#123;<br>        <span class="hljs-keyword">return</span> String.format(<span class="hljs-string">&quot;%-20s %3d %3d %3d %3d %3d %3d\n&quot;</span>,<br>                team.getName(), team.getWins(), team.getDraws(), team.getLosses(),<br>                team.getGoalsFor(), team.getGoalsAgainst(), team.getPoints());<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Team <span class="hljs-title function_">getWinner</span><span class="hljs-params">()</span> &#123;<br>        Team[] teams = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Team</span>[] &#123;a,b,c,d&#125;;<br>        <span class="hljs-type">Team</span> <span class="hljs-variable">winner</span> <span class="hljs-operator">=</span> a;<br>        <span class="hljs-keyword">for</span> (Team i :teams)&#123;<br>            <span class="hljs-keyword">if</span> (i.getPoints() &gt; winner.getPoints() ||<br>                    (i.getPoints() == winner.getPoints() &amp;&amp; i.getGoalsFor() - i.getGoalsAgainst() &gt; winner.getGoalsFor() - winner.getGoalsAgainst()) ||<br>                    (i.getPoints() == winner.getPoints() &amp;&amp; i.getGoalsFor() - i.getGoalsAgainst() == winner.getGoalsFor() - winner.getGoalsAgainst() &amp;&amp; i.getName().compareTo(winner.getName()) &lt; <span class="hljs-number">0</span>))&#123;<br>                winner = i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> winner;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Team <span class="hljs-title function_">getRunnerUp</span><span class="hljs-params">()</span> &#123;<br>        Team[] teams = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Team</span>[] &#123;a,b,c,d&#125;;<br>        <span class="hljs-type">Team</span> <span class="hljs-variable">winner</span> <span class="hljs-operator">=</span> getWinner();<br>        <span class="hljs-type">Team</span> <span class="hljs-variable">runnerup</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">for</span> (Team i : teams)&#123;<br>            <span class="hljs-keyword">if</span>(i != winner) &#123;<br>                <span class="hljs-keyword">if</span> (runnerup == <span class="hljs-literal">null</span> ||<br>                        (i.getPoints() == runnerup.getPoints() &amp;&amp; i.getGoalsFor() - i.getGoalsAgainst() &gt; runnerup.getGoalsFor() - runnerup.getGoalsAgainst()) ||<br>                        i.getPoints() &gt; runnerup.getPoints())&#123;<br>                    runnerup = i;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> runnerup;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/image-20231214113031322.png" alt="image-20231214113031322"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KnockoutFixture</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Fixture</span>&#123;<br>    <span class="hljs-keyword">private</span> Team teamA;<br>    <span class="hljs-keyword">private</span> Team teamB;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">KnockoutFixture</span><span class="hljs-params">(Team teamA, Team teamB)</span>&#123;<br>        <span class="hljs-built_in">this</span>.teamA = teamA;<br>        <span class="hljs-built_in">this</span>.teamB = teamB;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> teamA.getName()+<span class="hljs-string">&quot; vs &quot;</span>+teamB.getName();<br>        <span class="hljs-keyword">return</span> info;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/image-20231214113124254.png" alt="image-20231214113124254"></p><p><img src="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/image-20231214113141623.png" alt="image-20231214113141623"></p><p><img src="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/image-20231214113202035.png" alt="image-20231214113202035"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Q2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readGroups</span><span class="hljs-params">(String filename, Map&lt;String, Team&gt; teams, Map&lt;String, Group&gt; groups)</span> &#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(filename))) &#123;<br>            String line;<br>            <span class="hljs-keyword">while</span> ((line = reader.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>                String[] data = line.split(<span class="hljs-string">&quot;,&quot;</span>);<br><br>                <span class="hljs-type">String</span> <span class="hljs-variable">groupName</span> <span class="hljs-operator">=</span> data[<span class="hljs-number">0</span>];<br><br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; data.length; i++) &#123;<br><br>                    <span class="hljs-type">String</span> <span class="hljs-variable">teamName</span> <span class="hljs-operator">=</span> data[i];<br>                    <span class="hljs-type">Team</span> <span class="hljs-variable">team</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FootballTeam</span>(teamName);<br>                    teams.put(teamName, team);<br>                &#125;<br><br>                <span class="hljs-type">Group</span> <span class="hljs-variable">group</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WorldCupGroup</span>(groupName, teams.get(data[<span class="hljs-number">1</span>]), teams.get(data[<span class="hljs-number">2</span>]), teams.get(data[<span class="hljs-number">3</span>]), teams.get(data[<span class="hljs-number">4</span>]));<br>                groups.put(groupName, group);<br>            &#125;<br><br><br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e)&#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readGames</span><span class="hljs-params">(String filename, Map&lt;String, Team&gt; teams, List&lt;Game&gt; games)</span>&#123;<br>    <span class="hljs-keyword">try</span> (<span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(filename)))&#123;<br>        String line;<br>        <span class="hljs-keyword">while</span> ((line = reader.readLine()) != <span class="hljs-literal">null</span>)&#123;<br>            String[] data = line.split(<span class="hljs-string">&quot;,&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">teamAName</span> <span class="hljs-operator">=</span> data[<span class="hljs-number">0</span>];<br>            <span class="hljs-type">String</span> <span class="hljs-variable">teamBName</span> <span class="hljs-operator">=</span> data[<span class="hljs-number">2</span>];<br><br>            <span class="hljs-type">Team</span> <span class="hljs-variable">teamA</span> <span class="hljs-operator">=</span> teams.get(teamAName);<br>            <span class="hljs-type">Team</span> <span class="hljs-variable">teamB</span> <span class="hljs-operator">=</span> teams.get(teamBName);<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">scoreA</span> <span class="hljs-operator">=</span> Integer.parseInt(data[<span class="hljs-number">1</span>]);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">scoreB</span> <span class="hljs-operator">=</span> Integer.parseInt(data[<span class="hljs-number">3</span>]);<br><br>            <span class="hljs-type">Game</span> <span class="hljs-variable">game</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FootballGame</span>(teamA,scoreA,teamB,scoreB);<br><br>            teamA.addGame(game);<br>            teamB.addGame(game);<br><br>            games.add(game);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e)&#123;<br>        e.printStackTrace();<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125;<br>&#125;<br><br><br>    <span class="hljs-comment">/*public static void calculateKnockouts(Map&lt;String,Group&gt; groups, List&lt;Fixture&gt; fixtures)&#123;</span><br><span class="hljs-comment">        List&lt;Team&gt; winners = new ArrayList&lt;&gt;();</span><br><span class="hljs-comment">        List&lt;Team&gt; runnerUps = new ArrayList&lt;&gt;();</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        for (Group group : groups.values())&#123;</span><br><span class="hljs-comment">            winners.add(group.getWinner());</span><br><span class="hljs-comment">            runnerUps.add(group.getRunnerUp());</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        for (int i = 0; i &lt; winners.size(); i++) &#123;</span><br><span class="hljs-comment">            Fixture KnockoutFixture = null;</span><br><span class="hljs-comment">            if (i % 2 == 0) &#123;</span><br><span class="hljs-comment">                Team teamA = winners.get(i);</span><br><span class="hljs-comment">                Team teamB = runnerUps.get(i + 1);</span><br><span class="hljs-comment">                KnockoutFixture = new KnockoutFixture(teamA, teamB);</span><br><span class="hljs-comment">            &#125; else &#123;</span><br><span class="hljs-comment">                Team teamA = winners.get(i);</span><br><span class="hljs-comment">                Team teamB = runnerUps.get(i - 1);</span><br><span class="hljs-comment">                KnockoutFixture = new KnockoutFixture(teamA, teamB);</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">            fixtures.add(KnockoutFixture);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;*/</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">calculateKnockouts</span><span class="hljs-params">(Map&lt;String, Group&gt; groups, List&lt;Fixture&gt; fixtures)</span>&#123;<br>        fixtures.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">KnockoutFixture</span>(groups.get(<span class="hljs-string">&quot;A&quot;</span>).getWinner(), groups.get(<span class="hljs-string">&quot;B&quot;</span>).getRunnerUp()));<br>        fixtures.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">KnockoutFixture</span>(groups.get(<span class="hljs-string">&quot;B&quot;</span>).getWinner(), groups.get(<span class="hljs-string">&quot;A&quot;</span>).getRunnerUp()));<br><br>        fixtures.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">KnockoutFixture</span>(groups.get(<span class="hljs-string">&quot;C&quot;</span>).getWinner(), groups.get(<span class="hljs-string">&quot;D&quot;</span>).getRunnerUp()));<br>        fixtures.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">KnockoutFixture</span>(groups.get(<span class="hljs-string">&quot;D&quot;</span>).getWinner(), groups.get(<span class="hljs-string">&quot;C&quot;</span>).getRunnerUp()));<br><br>        fixtures.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">KnockoutFixture</span>(groups.get(<span class="hljs-string">&quot;E&quot;</span>).getWinner(), groups.get(<span class="hljs-string">&quot;F&quot;</span>).getRunnerUp()));<br>        fixtures.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">KnockoutFixture</span>(groups.get(<span class="hljs-string">&quot;F&quot;</span>).getWinner(), groups.get(<span class="hljs-string">&quot;E&quot;</span>).getRunnerUp()));<br><br>        fixtures.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">KnockoutFixture</span>(groups.get(<span class="hljs-string">&quot;G&quot;</span>).getWinner(), groups.get(<span class="hljs-string">&quot;H&quot;</span>).getRunnerUp()));<br>        fixtures.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">KnockoutFixture</span>(groups.get(<span class="hljs-string">&quot;H&quot;</span>).getWinner(), groups.get(<span class="hljs-string">&quot;G&quot;</span>).getRunnerUp()));<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Map&lt;String, Team&gt; teams2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;();<br>        Map&lt;String, Group&gt; groups2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;();<br>        List&lt;Game&gt; games2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        List&lt;Fixture&gt; fixtures2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        Q2.readGroups(<span class="hljs-string">&quot;groups.txt&quot;</span>, teams2, groups2);<br>        Q2.readGames(<span class="hljs-string">&quot;games.txt&quot;</span>, teams2, games2);<br>        <span class="hljs-comment">//System.out.println(&quot;Group num &quot;+ groups2.size());</span><br>        <span class="hljs-comment">//System.out.println(&quot;Team num &quot; + teams2.size());</span><br>        Q2.calculateKnockouts(groups2, fixtures2);<br><br>        <span class="hljs-comment">//System.out.println(groups2.get(&quot;A&quot;).getWinner().getName());</span><br>        <span class="hljs-comment">//System.out.println(groups2.get(&quot;A&quot;).getWinner().getGoalsFor());</span><br>        <span class="hljs-comment">//System.out.println(groups2.get(&quot;A&quot;).getRunnerUp().getName());</span><br>        <span class="hljs-comment">//System.out.println(groups2.get(&quot;B&quot;).getWinner().getName());</span><br>        <span class="hljs-comment">//System.out.println(groups2.get(&quot;C&quot;).getWinner().getName());</span><br>        <span class="hljs-comment">//System.out.println(groups2.get(&quot;D&quot;).getWinner().getName());</span><br>        <span class="hljs-comment">//System.out.println(groups2.get(&quot;A&quot;).getTable());</span><br><br>        <span class="hljs-comment">//System.out.println();</span><br><br><br>        List&lt;String&gt; games1 = fixtures2.stream().map(Fixture::toString).collect(Collectors.toList());<br>        Collections.sort(games1);<br>        <span class="hljs-keyword">for</span> (String s : games1) &#123;<br>            System.out.println(s);<br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Stage2</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>OOPFinalProgrammingExam2021</title>
    <link href="/2023/12/08/Stage2/OOPFinalProgrammingExam2021/"/>
    <url>/2023/12/08/Stage2/OOPFinalProgrammingExam2021/</url>
    
    <content type="html"><![CDATA[<embed src="./2021.Final.COMP2011J.Programming.Exam.students.pdf" width="100%" height="750" type="application/pdf"><p><a href="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/ExamStart2021.zip">源代码下载</a></p>]]></content>
    
    
    <categories>
      
      <category>Stage2</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>一些有用的Notes_关于OOP_开卷考的参考资料</title>
    <link href="/2023/12/07/Stage2/programming%2004%20Text%20Processing/"/>
    <url>/2023/12/07/Stage2/programming%2004%20Text%20Processing/</url>
    
    <content type="html"><![CDATA[<h1 id="programming-04-Text-Processing"><a href="#programming-04-Text-Processing" class="headerlink" title="programming 04 Text Processing"></a>programming 04 Text Processing</h1><p><strong>Q1:</strong></p><p>Write a program to read a number of grades from the user. The user will first enter the number of grades that will be entered, then the grades. At the end, you should print out the average of the grades.</p><p>Notes:</p><ul><li>You must give the user many more attempts when they have entered a value that is not an integer.</li><li>You must give the user many more attempts if they enter an integer value that is not acceptable (outside of the range 0 - 100).</li><li>When calculating the average, you should use a double (if you use float the answer might be slightly different).</li></ul><p>Hint for allowing the user to make multiple attempts:</p><p>To allow the user many attempts to enter the correct type and a value in the correct range, you will need to use two nested loops, the outer loop should check if the text if the value is in the correct range and an inner loop that removes any tokens entered that are not the correct type.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TryAgain</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Scanner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">numGrades</span> <span class="hljs-operator">=</span> in.nextInt();<br>    <span class="hljs-type">double</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numGrades; i++)&#123;<br>        sum += getGrade(in);<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;The average grade was &quot;</span> + (sum/numGrades));<br>  &#125;<br>  <br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getGrade</span><span class="hljs-params">(Scanner s)</span>&#123;<br>      <span class="hljs-type">int</span> <span class="hljs-variable">grade</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">while</span> (grade == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">while</span>(!s.hasNextInt())&#123;<br>            s.next();<br>        &#125;<br>        grade = s.nextInt();<br>        <span class="hljs-keyword">if</span> (grade &lt; <span class="hljs-number">0</span> || grade &gt; <span class="hljs-number">100</span>)&#123;<br>            grade = <span class="hljs-number">0</span>;<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">return</span> grade;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>Q2:</strong></p><p>Write a program to read some student information from the command prompt. This information should be used to create Student objects (based on this <a href="https://csmoodle.ucd.ie/moodle/pluginfile.php/167467/question/questiontext/225416/2/8044514/Student.java">Student </a>class).</p><p>Your program should contain the following operations: (you do not need to define the Student class, but do not forget to import the scanner)</p><ul><li>Define and construct a scanner to read input from the user</li><li>Define and construct an array of Student objects of size 3</li><li>Read the first name of a student from the user and store it in a variable</li><li>Read the family name of a student from the user and store it in a variable</li><li>Read the number of a student from the user and store it in a variable</li><li>Read the age of a student from the user and store it in a variable</li><li>Read the name of the degree that the student is studying and store it in a variable</li><li>Construct a student object based on the values read from the user and store it in the array</li><li>Repeat the process two more times</li><li>In reverse order, print the student number and degree of each student on a single line</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">prog</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>    Student[] students = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>[<span class="hljs-number">3</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; students.length; i++) &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> input.next();<br>      <span class="hljs-type">String</span> <span class="hljs-variable">fn</span> <span class="hljs-operator">=</span> input.next();<br>      <span class="hljs-type">int</span> <span class="hljs-variable">sn</span> <span class="hljs-operator">=</span> input.nextInt();<br>      <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> input.nextInt();<br>      <span class="hljs-type">String</span> <span class="hljs-variable">deg</span> <span class="hljs-operator">=</span> input.nextLine();<br>      students[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(n, fn, sn, a, deg);<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> students.length-<span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>      System.out.println(students[i].getStudentNumber() + <span class="hljs-string">&quot; &quot;</span> + students[i].getDegreeName());<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Programming-05-Encapsulation"><a href="#Programming-05-Encapsulation" class="headerlink" title="Programming 05 Encapsulation"></a>Programming 05 Encapsulation</h1><p>Define a class named Time. This class should represent an instant in time during a day (as a number of hours, minutes and seconds) and provide some utility methods too.</p><p>The class should have the following functionality:</p><h4 id="Constructors"><a href="#Constructors" class="headerlink" title="Constructors"></a>Constructors</h4><ul><li>A constructor that takes three int parameters in the order hours, minutes, seconds</li></ul><h4 id="Constants"><a href="#Constants" class="headerlink" title="Constants"></a>Constants</h4><ul><li>A constant named <code>SECONDS_PER_MINUTE</code>, that has a value of 60</li><li>A constant named <code>MINUTES_PER_HOUR</code>, that has a value of 60</li><li>A constant named <code>HOURS_PER_DAY</code>, that has a value of 24</li></ul><h4 id="Instance-Methods"><a href="#Instance-Methods" class="headerlink" title="Instance Methods"></a>Instance Methods</h4><ul><li>A method named <code>getSeconds</code>, that takes no parameters and returns an int representing the number of seconds since the start of the last minute (0 - 59)</li><li>A method named <code>getMinutes</code>, that takes no parameters and returns an int representing the number of minutes since the start of the last hour (0 - 59)</li><li>A method named <code>getHours</code>, that takes no parameters and returns an int representing the number of hours since the start of the last day (0 - 23)</li><li>A method named <code>timeBetween</code>, that takes another Time object as a parameter and returns an int representing the number of seconds between these two times. The value should always be positive.</li><li>A method named <code>sameTime</code>, that takes another Time object as a parameter and returns a boolean value. The return value should be true if both time objects represent the same time and false if they do not.</li><li>A method named <code>asString</code>, that takes no parameters and returns a string containing the current time in the format hh:mm:ss</li><li>A method named <code>setTime</code>, that takes three int parameters in the order hours, minutes, seconds and returns nothing. This method should set the time to the values provided only if it represents a valid time.</li></ul><h4 id="Class-Methods"><a href="#Class-Methods" class="headerlink" title="Class Methods"></a>Class Methods</h4><ul><li>A class method named <code>isValidTime</code>, that takes three int parameters in the order hours, minutes, seconds and returns a boolean value. The return value should be true if the values represent a valid time and false if they do not.</li></ul><h4 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h4><p>You should base this work on the earlier question in programming problems quiz 02. However, it is expected that you apply the knowledge learned from the lecture about encapsulation to the class.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Time</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MINUTES_PER_HOUR</span> <span class="hljs-operator">=</span> <span class="hljs-number">60</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">SECONDS_PER_MINUTE</span> <span class="hljs-operator">=</span> <span class="hljs-number">60</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">HOURS_PER_DAY</span> <span class="hljs-operator">=</span> <span class="hljs-number">24</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> seconds;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Time</span><span class="hljs-params">(<span class="hljs-type">int</span> h, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> s)</span> &#123;<br>seconds = s + m * SECONDS_PER_MINUTE + h * MINUTES_PER_HOUR * SECONDS_PER_MINUTE;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSeconds</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> seconds % SECONDS_PER_MINUTE;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMinutes</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> (seconds % (MINUTES_PER_HOUR * SECONDS_PER_MINUTE)) / SECONDS_PER_MINUTE;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getHours</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> seconds / (MINUTES_PER_HOUR * SECONDS_PER_MINUTE);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">timeBetween</span><span class="hljs-params">(Time t)</span> &#123;<br><span class="hljs-keyword">return</span> Math.abs(seconds - t.seconds);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">sameTime</span><span class="hljs-params">(Time t)</span> &#123;<br><span class="hljs-keyword">return</span> t.seconds == seconds;<br>&#125;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">asString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> String.format(<span class="hljs-string">&quot;%02d:%02d:%02d&quot;</span>, getHours(), getMinutes(), getSeconds());<br>&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTime</span><span class="hljs-params">(<span class="hljs-type">int</span> h, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> s)</span> &#123;<br>        <span class="hljs-keyword">if</span> (isValidTime(h, m, s)) &#123;<br>            seconds = s + m * SECONDS_PER_MINUTE + h * MINUTES_PER_HOUR * SECONDS_PER_MINUTE;<br>        &#125;<br>    &#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isValidTime</span><span class="hljs-params">(<span class="hljs-type">int</span> h, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> s)</span> &#123;<br>        <span class="hljs-keyword">if</span> (h &lt; <span class="hljs-number">0</span> || h &gt;= HOURS_PER_DAY || m &lt; <span class="hljs-number">0</span> || m &gt;= MINUTES_PER_HOUR || s &lt; <span class="hljs-number">0</span> || s &gt;= SECONDS_PER_MINUTE) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Programming-06-Interfaces"><a href="#Programming-06-Interfaces" class="headerlink" title="Programming 06 Interfaces"></a>Programming 06 Interfaces</h1><p>Your teacher has too many tasks to complete, and needs help with tracking them. Unfortunately, they tasks are all of different types but have some commonalities that can be extracted to the following interface:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">Timeable</span> &#123;<br>    <span class="hljs-function">String <span class="hljs-title">getTaskName</span>()</span>;<br>    <span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">getTaskRating</span>()</span>;<br>    <span class="hljs-function">Duration <span class="hljs-title">getTaskTime</span>()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>The first method returns a string containing a description of the task to be completed. The second method returns a rating indication how much the person desires to complete the task as a number between 1 and 5 (inclusive). The final method returns a <a href="https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html">Duration</a> object detailing the amount of time the task will take to complete.</p><p>Write a class called TaskManager that can be used to track the details of some tasks. The class should have the following methods:</p><ul><li>public void addTask(Timeable t)</li><li>public Timeable getHighestRated()</li><li>public Timeable getLowestRated()</li><li>public Timeable getShortestTask()</li><li>public Timeable getLongestTask()</li><li>public Duration getTotalDuration()</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.time.Duration;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TaskManager</span> &#123;<br>Timeable highestRated;<br>Timeable lowestRated;<br>Timeable shortestTask;<br>Timeable longestTask;<br><span class="hljs-type">Duration</span> <span class="hljs-variable">totalTime</span> <span class="hljs-operator">=</span> Duration.ZERO;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addTask</span><span class="hljs-params">(Timeable c)</span> &#123;<br><span class="hljs-keyword">if</span> (highestRated == <span class="hljs-literal">null</span>) &#123;<br>highestRated = c;<br>lowestRated = c;<br>shortestTask = c;<br>longestTask = c;<br>&#125;<br><span class="hljs-keyword">if</span> (c.getTaskRating() &gt; highestRated.getTaskRating()) &#123;<br>highestRated = c;<br>&#125;<br><span class="hljs-keyword">if</span> (c.getTaskRating() &lt; lowestRated.getTaskRating()) &#123;<br>lowestRated = c;<br>&#125;<br><span class="hljs-keyword">if</span> (c.getTaskTime().toMillis() &lt; shortestTask.getTaskTime().toMillis()) &#123;<br>shortestTask = c;<br>&#125;<br><span class="hljs-keyword">if</span> (c.getTaskTime().toMillis() &gt; longestTask.getTaskTime().toMillis()) &#123;<br>longestTask = c;<br>&#125;<br>totalTime = totalTime.plus(c.getTaskTime());<br>&#125;<br><br><span class="hljs-keyword">public</span> Timeable <span class="hljs-title function_">getHighestRated</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> highestRated;<br>&#125;<br><br><span class="hljs-keyword">public</span> Timeable <span class="hljs-title function_">getLowestRated</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> lowestRated;<br>&#125;<br><br><span class="hljs-keyword">public</span> Timeable <span class="hljs-title function_">getShortestTask</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> shortestTask;<br>&#125;<br><br><span class="hljs-keyword">public</span> Timeable <span class="hljs-title function_">getLongestTask</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> longestTask;<br>&#125;<br><br><span class="hljs-keyword">public</span> Duration <span class="hljs-title function_">getTotalDuration</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> totalTime;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Programming-07-Inheritance-and-Text-Processing"><a href="#Programming-07-Inheritance-and-Text-Processing" class="headerlink" title="Programming 07 Inheritance and Text Processing"></a>Programming 07 Inheritance and Text Processing</h1><p><strong>Question 1 ：雇员问题</strong></p><p>Given the <a href="https://csmoodle.ucd.ie/moodle/pluginfile.php/167467/question/questiontext/230935/1/8081926/Employee.java">Employee</a> and <a href="https://csmoodle.ucd.ie/moodle/pluginfile.php/167467/question/questiontext/230935/1/8081926/PayrollSystem.java">PayrollSystem</a> classes. Complete the following classes:</p><ol><li>A class named SalariedEmployee which inherits from the Employee class</li><li>A class named HourlyPaidEmployee which inherits from the Employee class</li><li>A class named Contractor which inherits from the Employee class</li><li>A public class named Main, which contains a main method</li></ol><h5 id="Numbers"><a href="#Numbers" class="headerlink" title="Numbers"></a>Numbers</h5><p>All numbers in this example are calculated in cents. There are 100 cent in 1 euro. This is because it is always a bad idea to use floating point numbers for money. As such all values should be calculated and returned as integers.</p><h5 id="Employee-Class"><a href="#Employee-Class" class="headerlink" title="Employee Class"></a>Employee Class</h5><p>The Employee class is abstract and contains an abstract method for calculating the weekly payroll cost of an employee. This must be implemented in the subclasses that you define. The Employee class also contains a getTax method, which calculates tax as 10% of the weekly payroll cost of an employee.</p><h5 id="SalariedEmployee"><a href="#SalariedEmployee" class="headerlink" title="SalariedEmployee"></a>SalariedEmployee</h5><p>This class is very similar to an Employee, except it also should be able to remember the salary of the employee and use this to calculate the weekly payroll cost. Note that salaries are stated by the amount of money the person will earn in one year, you will need to calculate how much that will cost per week.</p><h5 id="HourlyPaidEmployee"><a href="#HourlyPaidEmployee" class="headerlink" title="HourlyPaidEmployee"></a>HourlyPaidEmployee</h5><p>This class is very similar to an Employee, except it also should be able to remember the hourly wage of an employee and the number of hours they work every week. These values should be used to calculate the weekly payroll cost for these employees.</p><h5 id="Contractor"><a href="#Contractor" class="headerlink" title="Contractor"></a>Contractor</h5><p>A contractor is a special type of employee who is paid to complete a task, but the company does not have to pay any tax for them.</p><h5 id="Main-Class"><a href="#Main-Class" class="headerlink" title="Main Class"></a>Main Class</h5><p>Write a program that completes the following steps</p><ol><li>Reads each line of user input and creates the appropriate type of employee object</li><li>Add all of the employee objects to an array (there will be a maximum of 100)</li><li>Use the <code>calculateTotalWeeklyPayroll</code> and <code>calculateTotalWeeklyTax</code> methods in the <code>PayrollSystem</code> class to calculate and output those values.</li></ol><h5 id="Input-Text"><a href="#Input-Text" class="headerlink" title="Input Text"></a>Input Text</h5><p>The input from the user will contain the information about a single employee on each line. The line will start with the word “Salary” it the employee is paid a salary, “Hourly” if the employee is paid an hourly rate, and “Contractor” if the employee is a contractor.</p><p>Lines containing information about a salaried employee will contain the following values separated by spaces:</p><ol><li>The employees name (just one word)</li><li>The employees id number (a string starting with the letter P)</li><li>The employees salary as an integer in cents</li></ol><p>Lines containing information about a hourly paid employees will contain the following values separated by spaces:</p><ol><li>The employees name (just one word)</li><li>The employees id number (a string starting with the letter P)</li><li>The employees hourly rate of pay as an integer in cents</li><li>The number of hours that this employee works every week</li></ol><p>Lines containing information about a contractor will contain the following values separated by spaces:</p><ol><li>The contractors name (just one word)</li><li>The contractors id number (a string starting with the letter P)</li><li>The contractors amount that is paid to the contractor every week in cents.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        Employee[] employees = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>[<span class="hljs-number">100</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (scanner.hasNext()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>            <br>            String[] data = line.split(<span class="hljs-string">&quot; &quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> data[<span class="hljs-number">0</span>];<br>            <span class="hljs-keyword">if</span> (type.equals(<span class="hljs-string">&quot;Salary&quot;</span>)) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> data[<span class="hljs-number">1</span>];<br>                <span class="hljs-type">String</span> <span class="hljs-variable">employeeId</span> <span class="hljs-operator">=</span> data[<span class="hljs-number">2</span>];<br>                <span class="hljs-type">int</span> <span class="hljs-variable">salary</span> <span class="hljs-operator">=</span> Integer.parseInt(data[<span class="hljs-number">3</span>]);<br>                employees[count] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SalariedEmployee</span>(name, employeeId, salary);<br>                count++;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type.equals(<span class="hljs-string">&quot;Hourly&quot;</span>)) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> data[<span class="hljs-number">1</span>];<br>                <span class="hljs-type">String</span> <span class="hljs-variable">employeeId</span> <span class="hljs-operator">=</span> data[<span class="hljs-number">2</span>];<br>                <span class="hljs-type">int</span> <span class="hljs-variable">hourlywage</span> <span class="hljs-operator">=</span> Integer.parseInt(data[<span class="hljs-number">3</span>]);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">weeklyhours</span> <span class="hljs-operator">=</span> Integer.parseInt(data[<span class="hljs-number">4</span>]);<br>                employees[count] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HourlyPaidEmployee</span>(name, employeeId, hourlywage, weeklyhours);<br>                count++;<br><br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type.equals(<span class="hljs-string">&quot;Contractor&quot;</span>)) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> data[<span class="hljs-number">1</span>];<br>                <span class="hljs-type">String</span> <span class="hljs-variable">employeeId</span> <span class="hljs-operator">=</span> data[<span class="hljs-number">2</span>];<br>                <span class="hljs-type">int</span> <span class="hljs-variable">payment</span> <span class="hljs-operator">=</span> Integer.parseInt(data[<span class="hljs-number">3</span>]);<br><br>                employees[count] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Contractor</span>(name, employeeId, payment);<br>                count++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">PayrollSystem</span> <span class="hljs-variable">payrollSystem</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PayrollSystem</span>();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">payroll</span> <span class="hljs-operator">=</span> payrollSystem.calculateTotalWeeklyPayroll(employees);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">tax</span> <span class="hljs-operator">=</span> payrollSystem.calculateTotalWeeklyTax(employees);<br>        System.out.println(<span class="hljs-string">&quot;Total weekly payroll: &quot;</span> + payroll);<br>        System.out.println(<span class="hljs-string">&quot;Total weekly tax: &quot;</span> + tax);<br>        <br>        count = <span class="hljs-number">0</span>;<br>        employees = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>[<span class="hljs-number">100</span>];<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SalariedEmployee</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Employee</span> &#123;<br>        <span class="hljs-type">int</span> salary;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">SalariedEmployee</span><span class="hljs-params">(String name, String employeeId, <span class="hljs-type">int</span> salary)</span> &#123;<br>            <span class="hljs-built_in">super</span>(name, employeeId);<br>            <span class="hljs-built_in">this</span>.salary = salary;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getWeeklyPayroll</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> salary / <span class="hljs-number">52</span>;<br>        &#125;<br><br>        <br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HourlyPaidEmployee</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Employee</span> &#123;<br>        <span class="hljs-type">int</span> hourlywage;<br>        <span class="hljs-type">int</span> weeklyhours;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">HourlyPaidEmployee</span><span class="hljs-params">(String name, String employeeId, <span class="hljs-type">int</span> hourlywage, <span class="hljs-type">int</span> weeklyhours)</span> &#123;<br>            <span class="hljs-built_in">super</span>(name, employeeId);<br>            <span class="hljs-built_in">this</span>.hourlywage = hourlywage;<br>            <span class="hljs-built_in">this</span>.weeklyhours = weeklyhours;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getWeeklyPayroll</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> hourlywage * weeklyhours;<br>        &#125;<br><br>       <br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Contractor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Employee</span> &#123;<br>        <span class="hljs-type">int</span> payment;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Contractor</span><span class="hljs-params">(String name, String employeeId, <span class="hljs-type">int</span> payment)</span> &#123;<br>            <span class="hljs-built_in">super</span>(name, employeeId);<br>            <span class="hljs-built_in">this</span>.payment = payment;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getWeeklyPayroll</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> payment;<br>        &#125;<br><br>        <br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getTax</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>Question 2： 日期时间问题</strong></p><p>Given the Time class. Define a class named Instant that inherits from the Time class. The instant class should add the functionality to remember an amount of milliseconds along with a value of hours, minutes and seconds.</p><p>To this class you should add the following methods:</p><ol><li>a toString method which takes no parameters and returns a string containing the representation from the time object followed by milliseconds (this should use the inherited toString method from the Time class)</li><li>a sameInstant method which takes an Instant object as a parameter and returns boolean if both objects represent the same time (this should use the inherited sameTime method from the Time class)</li><li>a milliSecondsBetween method takes an Instant object as a parameter and returns and int value representing the difference between the two instants counted in miliseconds (this should use the inherited timeBetween method from the Time class)</li></ol><p>In addition, you should define a public class named Main. In this class you should define the following static methods:</p><ul><li>A method named readAndTestToString that reads four space separated integers from the user and uses them to create an Instant object. This object should then be printed to the screen.<ul><li>The numbers will be in the order hours minutes seconds milliseconds</li></ul></li><li>A method named readAndTestSameInstant that reads two lines of space separated integers from the user and uses them to create instant objects. A message should be printed to the screen if the two objects represent the same instant. </li><li>A method named readAndTestMilliSecondsBetween that reads two lines of space separated integers from the user and uses them to create instant objects. A message should be printed to the screen showing the number of milliseconds between the two instant objects.</li></ul><p>The Time class has the following public interface.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Time</span><span class="hljs-params">(<span class="hljs-type">int</span> h, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> s)</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSeconds</span><span class="hljs-params">()</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMinutes</span><span class="hljs-params">()</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getHours</span><span class="hljs-params">()</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">timeBetween</span><span class="hljs-params">(Time t)</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">sameTime</span><span class="hljs-params">(Time t)</span> <br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Instant</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Time</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> milliSeconds;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Instant</span><span class="hljs-params">(<span class="hljs-type">int</span> h, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> s, <span class="hljs-type">int</span> ms)</span> &#123;<br>        <span class="hljs-built_in">super</span>(h, m, s);<br>        milliSeconds = ms;<br>        <span class="hljs-keyword">if</span> (milliSeconds &gt; <span class="hljs-number">999</span>) &#123;<br>            milliSeconds = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">milliSecondsBetween</span><span class="hljs-params">(Instant i)</span>&#123;<br>        <span class="hljs-keyword">return</span> Math.abs(i.milliSeconds - milliSeconds) + timeBetween(i)*<span class="hljs-number">1000</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">sameInstant</span><span class="hljs-params">(Instant i)</span> &#123;<br>        <span class="hljs-keyword">return</span> i.milliSeconds == milliSeconds &amp;&amp; <span class="hljs-built_in">super</span>.sameTime(i);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.toString() + String.format(<span class="hljs-string">&quot;.%03d&quot;</span>, milliSeconds);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readAndTestToString</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">Instant</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Instant</span>(s.nextInt(), s.nextInt(), s.nextInt(), s.nextInt());<br>        System.out.println(a);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readAndTestMilliSecondsBetween</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">Instant</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Instant</span>(s.nextInt(), s.nextInt(), s.nextInt(), s.nextInt());<br>        <span class="hljs-type">Instant</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Instant</span>(s.nextInt(), s.nextInt(), s.nextInt(), s.nextInt());<br>        System.out.println(a + <span class="hljs-string">&quot; and &quot;</span> + b + <span class="hljs-string">&quot; are &quot;</span>+a.milliSecondsBetween(b)+<span class="hljs-string">&quot; millisecond apart&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readAndTestSameInstant</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">Instant</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Instant</span>(s.nextInt(), s.nextInt(), s.nextInt(), s.nextInt());<br>        <span class="hljs-type">Instant</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Instant</span>(s.nextInt(), s.nextInt(), s.nextInt(), s.nextInt());<br>        <span class="hljs-keyword">if</span> (a.sameInstant(b))&#123;<br>            System.out.println(a + <span class="hljs-string">&quot; and &quot;</span> + b + <span class="hljs-string">&quot; are the same instant&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(a + <span class="hljs-string">&quot; and &quot;</span> + b + <span class="hljs-string">&quot; are not the same instant&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        readAndTestToString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Programming-08-Files-and-Text-Proc"><a href="#Programming-08-Files-and-Text-Proc" class="headerlink" title="Programming 08 Files and Text Proc."></a>Programming 08 Files and Text Proc.</h1><p>问题描述：</p><p>01 - readTextFile：定义一个叫做<code>readTextFile</code>的方法，接受文件名字符串作为参数，读取文件内容，返回不包含空白行的字符串数组。文件最多包含1000行。</p><p>02 - getTableOfContents：定义一个名为<code>getTableOfContents</code>的静态&#x2F;类方法，接受文件名字符串作为参数。使用前面问题中的<code>readTextFile</code>方法获取文件内容。文件中包含 LaTeX 命令，表示教科书的章节结构。从中提取出章节、节、子节和子子节的名称，并按规定的格式添加标识符，将它们作为列表返回。</p><ul><li>如果是章节名称，在字符串前添加”# “。</li><li>如果是节名称，在字符串前添加”## “。</li><li>如果是子节名称，在字符串前添加”### “。</li><li>如果是子子节名称，在字符串前添加”#### “。</li></ul><p>LaTeX命令的格式如下：<code>\section&#123;节的名称&#125;</code>、<code>\subsection&#123;子节的名称&#125;</code>或<code>\subsubsection&#123;子子节的名称&#125;</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">readTextFile</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String[] readTextFile(String fileName)&#123;<br>        String[] lines = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">1000</span>];<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(fileName)))&#123;<br>            <span class="hljs-comment">// like</span><br>            <span class="hljs-comment">// FileReader fr = new FileReader(name);</span><br>            <span class="hljs-comment">// BufferedReader bf = new BufferedReader(dr);</span><br>            String line;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">lineCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-literal">null</span> &amp;&amp; lineCount &lt; lines.length)&#123;<br>                <span class="hljs-keyword">if</span> (!line.trim().isEmpty()) &#123;<br>                    lines[lineCount++] = line;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;E&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>            System.err.println(<span class="hljs-string">&quot;The file named &quot;</span> + fileName+<span class="hljs-string">&quot; was not found.&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> lines;<br><br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String[] getTableOfContents(String fileName)&#123;<br>        String[] lines = readTextFile(fileName);<br>        String[] contents = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">1000</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">contentscount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">for</span>(String line : lines) &#123;<br>                <span class="hljs-keyword">if</span> (line != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (line.startsWith(<span class="hljs-string">&quot;\\chapter&#123;&quot;</span>)) &#123;<br>                        contents[contentscount++] = <span class="hljs-string">&quot;# &quot;</span> + getCommandContent(line);<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (line.startsWith(<span class="hljs-string">&quot;\\section&#123;&quot;</span>)) &#123;<br>                        contents[contentscount++] = <span class="hljs-string">&quot;## &quot;</span> + getCommandContent(line);<br>                        ;<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (line.startsWith(<span class="hljs-string">&quot;\\subsection&#123;&quot;</span>)) &#123;<br>                        contents[contentscount++] = <span class="hljs-string">&quot;### &quot;</span> + getCommandContent(line);<br>                        ;<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (line.startsWith(<span class="hljs-string">&quot;\\subsubsection&#123;&quot;</span>)) &#123;<br>                        contents[contentscount++] = <span class="hljs-string">&quot;#### &quot;</span> + getCommandContent(line);<br>                        ;<br>                    &#125;<br>                &#125;<br>            &#125;<br><br><br>        &#125; <span class="hljs-keyword">catch</span> (NullPointerException e) &#123;<br>            e.printStackTrace();<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> contents;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getCommandContent</span><span class="hljs-params">(String line)</span> &#123;<br>        <span class="hljs-comment">// Extract the content inside the curly braces of the latex command</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">startIndex</span> <span class="hljs-operator">=</span> line.indexOf(<span class="hljs-string">&#x27;&#123;&#x27;</span>) + <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">endIndex</span> <span class="hljs-operator">=</span> line.lastIndexOf(<span class="hljs-string">&#x27;&#125;&#x27;</span>);<br>        <span class="hljs-keyword">return</span> line.substring(startIndex, endIndex);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        String[] lines = readTextFile(<span class="hljs-string">&quot;chapter1.tex&quot;</span>);<br>        System.out.println(lines[<span class="hljs-number">0</span>]);<br>        System.out.println(lines[<span class="hljs-number">45</span>]);<br>        System.out.println(lines[<span class="hljs-number">80</span>]);<br>        System.out.println(lines[<span class="hljs-number">150</span>]);<br>        System.out.println(lines[<span class="hljs-number">178</span>]);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="Programming-09-Generics-x2F-Collections"><a href="#Programming-09-Generics-x2F-Collections" class="headerlink" title="Programming 09 Generics&#x2F;Collections"></a>Programming 09 Generics&#x2F;Collections</h1><p>Given the Time class, modify it such that it can be sorted using the <code>sort</code> methods from <code>Arrays</code> or <code>Collections</code>. This should be done by implementing the <code>Comparable</code> interface with the correct type parameter.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Time</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;Time&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> seconds;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> minutes;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> hours;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Time</span><span class="hljs-params">(<span class="hljs-type">int</span> h, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> s)</span> &#123;<br>        <span class="hljs-keyword">if</span> (seconds &lt; <span class="hljs-number">0</span> || seconds &gt; <span class="hljs-number">59</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Seconds must be between 0 and 59&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (minutes &lt; <span class="hljs-number">0</span> || minutes &gt; <span class="hljs-number">59</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Minutes must be between 0 and 59&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (hours &lt; <span class="hljs-number">0</span> || hours &gt; <span class="hljs-number">23</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Hours must be between 0 and 23&quot;</span>);<br>        &#125;<br>        seconds = s;<br>        minutes =  m;<br>        hours = h;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSeconds</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> seconds;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMinutes</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> minutes;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getHours</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> hours;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> String.format(<span class="hljs-string">&quot;%02d:%02d:%02d&quot;</span>, getHours(), getMinutes(), getSeconds());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Time o)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.hours &gt; o.hours) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.hours &lt; o.hours) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.minutes &gt; o.minutes) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.minutes &lt; o.minutes) &#123;<br>                <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.seconds &gt; o.seconds) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.seconds &lt; o.seconds) &#123;<br>                    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>Given the <a href="https://csmoodle.ucd.ie/moodle/pluginfile.php/167467/question/questiontext/238980/2/8132046/Time.java">Time</a> class which you may not modify, create a comparator (named TimeComparator) which implements the <code>Comparator</code> interface with the correct type parameter. The result should be that time objects can be sorted using the sort methods from Arrays or Collections. The time values should be sorted into descending order.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TimeComparator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparator</span>&lt;Time&gt; &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Time t1, Time t2)</span> &#123;<br>        <span class="hljs-keyword">if</span> (t1.getHours() &gt; t2.getHours()) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (t1.getHours() &lt; t2.getHours()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (t1.getMinutes() &gt; t2.getMinutes()) &#123;<br>                <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (t1.getMinutes() &lt; t2.getMinutes()) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (t1.getSeconds() &gt; t2.getSeconds()) &#123;<br>                    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (t1.getSeconds() &lt; t2.getSeconds()) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Stage2</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>OOPFinalProgrammingExam2022</title>
    <link href="/2023/12/01/Stage2/OOPFinalProgrammingExam2022/"/>
    <url>/2023/12/01/Stage2/OOPFinalProgrammingExam2022/</url>
    
    <content type="html"><![CDATA[<embed src="./2022.Final.COMP2011J.Programming.Exam.students.pdf" width="100%" height="750" type="application/pdf"><p><a href="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/ExamStarted.zip">下载链接</a></p>]]></content>
    
    
    <categories>
      
      <category>Stage2</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>OS Notes</title>
    <link href="/2023/11/27/Stage2/OS_Notes/"/>
    <url>/2023/11/27/Stage2/OS_Notes/</url>
    
    <content type="html"><![CDATA[<h1 id="Intro-to-OS"><a href="#Intro-to-OS" class="headerlink" title="Intro to OS"></a>Intro to OS</h1><h2 id="计算机系统组成部分"><a href="#计算机系统组成部分" class="headerlink" title="计算机系统组成部分"></a>计算机系统组成部分</h2><ul><li>Hardware (CPU memory)</li><li>Operating System</li><li>Application programs</li><li>Users</li></ul><h2 id="操作系统的作用"><a href="#操作系统的作用" class="headerlink" title="操作系统的作用"></a>操作系统的作用</h2><ul><li>Interface between user and hardware</li><li>Control interaction between user and programs</li><li>provide a controlled and efficient environment for the programs</li><li>mange the whole resource of system</li></ul><h2 id="OS-的两个基本功能"><a href="#OS-的两个基本功能" class="headerlink" title="OS 的两个基本功能"></a>OS 的两个基本功能</h2><ul><li>managing the hardware resources</li><li>extending the hardware functionality</li></ul><h2 id="操作系统组成部分"><a href="#操作系统组成部分" class="headerlink" title="操作系统组成部分"></a>操作系统组成部分</h2><ul><li>Process Manager</li><li>Main-Memory Management</li><li>File Management</li><li>I&#x2F;O System Management</li><li>Secondary-Storage Management</li><li>Networking</li><li>Protection System</li><li>Command-Interpreter System</li></ul><h2 id="操作系统的目标"><a href="#操作系统的目标" class="headerlink" title="操作系统的目标"></a>操作系统的目标</h2><ul><li>Efficient</li><li>Interactive</li><li>Robust</li><li>Secure</li><li>Scalable</li><li>Portable</li></ul><h2 id="OS-组织结构"><a href="#OS-组织结构" class="headerlink" title="OS 组织结构"></a>OS 组织结构</h2><h3 id="Monolithic-structure"><a href="#Monolithic-structure" class="headerlink" title="Monolithic structure"></a>Monolithic structure</h3><p>所有组件都在同一个内核中，他们之间可以直接交互，所有很高效。但是由于他的非结构化，导致不易理解，修改和维护。容易受到攻击。Susceptible to damage from errant or malicious code.</p><h3 id="Layered-Structure"><a href="#Layered-Structure" class="headerlink" title="Layered Structure"></a>Layered Structure</h3><p>组件被分层。 Designing the system as a number of modules  gives the system structure and consistency. 允许调试，修改和再利用。进程的请求需要经过很多层，导致效率低下。</p><h3 id="Microkernel-Structure"><a href="#Microkernel-Structure" class="headerlink" title="Microkernel Structure"></a>Microkernel Structure</h3><ul><li>advantages: more security, stability, modularity, flexibility, portability, debuggability, and maintainability</li><li>disadvantages: lower performance, increased complexity, and limited functionality</li></ul><h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><p>良好的硬件特性可以简化操作系统的设计。</p><h3 id="双元操作模式：Kernel-mode-and-user-mode"><a href="#双元操作模式：Kernel-mode-and-user-mode" class="headerlink" title="双元操作模式：Kernel mode and user mode."></a><strong>双元操作模式</strong>：Kernel mode and user mode.</h3><p><strong>kernel mode</strong>: access to all the CPU instruction set  also called monitor&#x2F;system&#x2F;privileged mode </p><p><strong>user mode</strong>: access restricted to a subset of the  instruction set</p><p>The mode is indicated by a <strong>status bit</strong> in a protected processor register.</p><p><strong>保护指令</strong>阻止用户直接接触I&#x2F;O，内存管理，执行CPU暂停。</p><h3 id="System-call"><a href="#System-call" class="headerlink" title="System call"></a>System call</h3><p>user希望调用特权命令。</p><p><strong>陷阱指令</strong>跳转至内核处理陷阱。Using call parameters to determine which system routine to run.</p><p>Then hardware must implement caller’s parameters verification. Return to user-mode when call finished. </p><h3 id="Exception-hardware-initiated-interrupt"><a href="#Exception-hardware-initiated-interrupt" class="headerlink" title="Exception(hardware-initiated interrupt)"></a>Exception(hardware-initiated interrupt)</h3><p>异常是错误或特定情况自动触发的，不是故意的。</p><p>常见的异常：</p><ul><li>内存超出用户访问空间</li><li>overflow, underflow</li><li>trace traps</li><li>非法使用特权指令</li><li>paging fault</li></ul><p><strong>中断向量</strong>解决OS需求</p><h3 id="Memory-Protection"><a href="#Memory-Protection" class="headerlink" title="Memory Protection"></a>Memory Protection</h3><p>内存保护机制必须被保护</p><p><strong>base and limit registers</strong> is simple scheme.</p><p><em><strong>base ≤ address &lt; base + limit</strong></em></p><h3 id="I-x2F-O-Control"><a href="#I-x2F-O-Control" class="headerlink" title="I&#x2F;O Control"></a>I&#x2F;O Control</h3><p>所有的I&#x2F;O 指令都是特权指令。</p><ul><li>I&#x2F;O start: handled by system calls</li><li>I&#x2F;O completion and I&#x2F;O events: handled by interrupts</li></ul><p><strong>Interrupts</strong> are the basis for asynchronous I&#x2F;O&#x2F;</p><h3 id="CPU-Protection"><a href="#CPU-Protection" class="headerlink" title="CPU Protection"></a>CPU Protection</h3><p>Ensure that OS always maintains control. A user program might get stuck into an infinite loop and never return control to OS.</p><p><strong>Timer</strong>: it generates an interrupt after a fixed or variable amount of execution time.</p><h1 id="进程-Processes"><a href="#进程-Processes" class="headerlink" title="进程(Processes)"></a>进程(Processes)</h1><p>每个进程在自己的地址空间运行。两个不同进程中的相同地址被储存在不同地址的内存位置。</p><h2 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h2><ol><li><strong>程序代码(Text)</strong>: 这是程序的实际可执行代码，也称为文本段。程序代码包含程序的指令集合，它定义了程序的逻辑和执行流程。这部分通常是只读的，因为它存储程序的源代码或二进制可执行文件，并且在程序的执行过程中不会被修改。</li><li>当前活动（Current Activity）：这包括了程序的当前状态，包括<strong>程序计数器（Program Counter）</strong>和<strong>处理器寄存器（Processor Registers）</strong>。程序计数器是一个特殊的寄存器，它存储了当前执行的指令位置，用于跟踪程序的执行进度。处理器寄存器用于存储各种临时数据和控制信息，以支持程序的执行。</li><li><strong>栈（Stack）</strong>：栈是一个用于存储临时数据的数据结构。它通常包含函数调用的返回地址、局部变量、函数参数和其他临时数据。栈的管理是通过栈指针（Stack Pointer）来完成的，它指向栈的当前顶部。</li><li><strong>数据段（Data Section</strong>）：数据段用于存储全局变量和静态变量，这些变量在程序的整个执行期间都可以访问。数据段存储在进程的内存中，允许多个函数或代码模块之间共享数据。</li><li><strong>堆（Heap）</strong>：堆是用于存储在程序运行时动态分配的内存的一部分。堆的大小可以根据程序的需求动态增加或减小。通常，动态分配的内存用于存储数据结构、对象、字符串和其他需要在运行时动态创建和释放的数据。</li></ol><h2 id="进程状态（Process-States）"><a href="#进程状态（Process-States）" class="headerlink" title="进程状态（Process States）"></a>进程状态（Process States）</h2><p>进程状态（Process States）是指一个进程在其执行期间可能处于的不同状态</p><ol><li>新建（New）：当一个进程被创建时，它处于新建状态。在这个阶段，操作系统正在为进程分配资源，设置进程控制块（Process Control Block，PCB），并为进程初始化所需的数据结构。一旦所有准备工作完成，进程就会进入就绪状态等待执行。</li><li>运行（Running）：运行状态表示进程正在执行其指令，使用CPU来执行任务。在任何给定的时间，通常只有一个进程能够处于运行状态，因为只有一个CPU核心可供进程执行。进程可以在运行状态中执行，直到它完成了其任务或者被操作系统暂停。</li><li>等待（Waiting）：等待状态表明进程在等待某些事件或条件发生，以便继续执行。这些事件可以包括等待I&#x2F;O操作完成、等待用户输入、等待信号或等待其他进程的通知。当进程处于等待状态时，它不占用CPU时间，并暂停执行，直到所需事件发生。</li><li>就绪（Ready）：就绪状态表示进程已经准备好执行，但还没有被分配到CPU执行。通常，多个就绪进程等待CPU时间片，等待操作系统的调度器将它们分配给CPU。在多任务操作系统中，就绪状态的进程可能在队列中等待执行。</li><li>终止（Terminated）：终止状态表明进程已经完成了它的任务并退出执行。在这个状态下，操作系统会清理并释放进程占用的资源，包括内存、文件句柄和其他资源。终止状态是进程的最终状态。</li></ol><h2 id="进程控制块（Process-Control-Block，PCB）"><a href="#进程控制块（Process-Control-Block，PCB）" class="headerlink" title="进程控制块（Process Control Block，PCB）"></a>进程控制块（Process Control Block，PCB）</h2><p>进程控制块（Process Control Block，PCB）是操作系统中的一个关键数据结构，用于存储与每个进程相关的信息。</p><ol><li>进程状态（Process State）：PCB 包含了一个字段，用于指示进程的状态，例如运行中（Running）、等待中（Waiting）、就绪（Ready）等。这有助于操作系统跟踪进程的当前状态，以确定是否可以分配CPU时间。</li><li>程序计数器（Program Counter，PC）：PCB 中存储了程序计数器的值，它指示了进程下一条要执行的指令的位置。这允许操作系统在进程切换时恢复执行。</li><li>CPU 寄存器：PCB 中通常包含了所有CPU寄存器的内容，这些寄存器包括通用寄存器、堆栈指针、帧指针等。这有助于保存进程的CPU状态，以便在切换进程时进行恢复。</li><li>CPU 调度信息：PCB 包含了与 CPU 调度相关的信息，例如优先级、调度队列指针等。这些信息有助于操作系统选择下一个要执行的进程。</li><li>进程号（Process Number，PID）：每个进程都有一个唯一的进程号，它在 PCB 中存储，用于标识特定的进程。PID 是操作系统用来管理和识别进程的重要标识。</li><li>内存管理信息：PCB 中可能包括了内存分配和管理相关的信息，包括进程的内存地址空间范围、页表、段表等。这有助于操作系统有效地管理进程的内存需求。</li><li>记账信息（Accounting Information）：PCB 中可能包含有关进程的计算信息，如已使用的CPU时间、自启动以来的经过的时钟时间、时间限制等。</li><li>I&#x2F;O 状态信息：PCB 可能包括有关进程的I&#x2F;O设备分配情况，以及已打开文件的列表等信息。</li></ol><h2 id="进程切换"><a href="#进程切换" class="headerlink" title="进程切换"></a>进程切换</h2><p>进程切换是操作系统中的一个关键概念，它涉及保存和加载进程的状态以便在多任务系统中有效切换不同的进程。</p><ol><li>进程状态保存和加载：当操作系统需要切换到不同的进程时，它会使用进程控制块（PCB）中存储的信息来保存当前正在执行进程的状态，包括程序计数器（PC）、寄存器内容等。然后，操作系统会加载下一个要执行的进程的状态，以继续执行。这个过程称为<strong>上下文切换（Context Switch）</strong>。</li><li>上下文切换的开销：上下文切换过程中，系统不会执行实际的工作，而是花费时间来保存和加载进程状态。这被称为上下文切换的开销，它是系统的一个负担。减少上下文切换的开销对于提高系统性能非常重要。</li><li>快速上下文切换：为了减小上下文切换的开销，操作系统需要设计快速的上下文切换机制。这通常涉及硬件和操作系统内核的优化，以确保尽可能快速地切换进程。快速上下文切换对于实现实时响应和高性能的系统至关重要。</li><li>切换频率的权衡：操作系统需要权衡进程切换的频率。如果切换得太频繁，会增加系统开销，降低性能。如果切换得太少，系统可能会变得不够交互式，不能满足用户需求。因此，操作系统需要根据不同的任务和需求来管理进程切换的频率。</li></ol><h2 id="进程创建（Process-Creation）："><a href="#进程创建（Process-Creation）：" class="headerlink" title="进程创建（Process Creation）："></a>进程创建（Process Creation）：</h2><p>进程的创建是指在计算机系统中启动新进程的过程。进程可以通过以下两种主要事件来创建：</p><ol><li>系统引导（System Boot）：当计算机系统启动时，通常会创建一些初始化进程，这些进程在系统启动时开始运行，为后续操作系统的正常运行提供基础。</li><li>执行进程创建系统调用（Process Creation System Call）：在运行的进程内，可以通过执行进程创建系统调用（例如fork()在Unix&#x2F;Linux系统中）来启动新的进程。这个新的进程是由调用进程创建并拥有自己的地址空间和资源。</li></ol><h2 id="进程终止（Process-Termination）："><a href="#进程终止（Process-Termination）：" class="headerlink" title="进程终止（Process Termination）："></a>进程终止（Process Termination）：</h2><p>进程的终止是指进程执行完毕或在某些条件下被终止的过程。进程可以以以下不同条件终止：</p><ol><li>自愿终止（Voluntary Termination）：这种终止是由进程自身决定的，通常发生在进程完成了其任务或者遇到错误时。例如，进程正常退出时（例如，通过调用exit()函数），或者在出现错误情况下终止时。</li><li>非自愿终止（Involuntary Termination）：这种终止是由外部因素引起的，通常是由其他进程或系统错误引起的。例如，当一个进程发生严重错误（如访问非法内存）时，操作系统可以终止它。另一个例子是另一个进程（例如管理员或父进程）可以终止一个子进程。</li><li>从任何状态终止：自愿终止通常发生在运行状态下，但非自愿终止可以发生在任何进程状态下。一个进程可能在就绪、等待或运行状态下被非自愿终止。</li></ol><h2 id="子进程-Child-Process"><a href="#子进程-Child-Process" class="headerlink" title="子进程( Child Process )"></a>子进程( Child Process )</h2><p>进程可以创建新的子进程，形成一个层次结构的进程关系，通常称为进程树（Process Tree）。在这个关系中，创建新进程的进程被称为父进程，而新创建的进程被称为子进程。进程树的组织方式使得操作系统能够有效地管理和控制进程，同时保持层次结构的完整性。</p><ol><li>父进程的影响：在某些操作系统中，当父进程终止时，它的所有子进程也会被终止。这是一种父子进程之间的强耦合关系。如果子进程需要继续运行，它可能需要被重新分配给另一个父进程。</li><li>孤儿进程（Orphan Process）：当一个父进程终止，但它的子进程仍在运行时，这些子进程被称为孤儿进程。通常，孤儿进程会被重新分配给init进程或其他父进程，以确保它们能够继续运行。</li><li>僵尸进程（Zombie Process）：当一个子进程终止，但其父进程没有正确地回收子进程的资源和状态信息时，子进程可能会成为僵尸进程。僵尸进程仍占用系统资源，但不再执行任何任务。它们应该被父进程正确回收，否则它们可能会在系统中积累。</li><li>回收僵尸进程(reaped) ：操作系统和父进程需要正确地回收僵尸进程，以释放系统资源。如果父进程没有回收僵尸进程，通常是因为操作系统或父进程存在问题。</li></ol><h3 id="在Unix中的例子"><a href="#在Unix中的例子" class="headerlink" title="在Unix中的例子"></a>在Unix中的例子</h3><ol><li>创建子进程：在Unix操作系统中，可以使用<code>fork()</code>系统调用来创建一个新的子进程。这个子进程是父进程的副本，几乎接收父进程的所有内容。</li><li>复制父进程的地址空间和 PCB：在实质上，<code>fork()</code>系统调用会复制父进程的地址空间和进程控制块（PCB）。这包括父进程的代码、数据、堆、栈以及与父进程相关的进程信息。</li><li>子进程拥有新的PID：虽然子进程是父进程的副本，但它必须拥有自己独立的进程标识号（PID）。这是因为每个进程在系统中必须具有唯一的PID。</li><li>PCB的复制：尽管子进程拥有新的PID，但它会继承父进程的PCB的副本。这包括了进程状态、程序计数器（PC）等信息。因此，子进程会从<code>fork()</code>系统调用之后的位置开始执行，从父进程的状态中继承执行。</li><li><strong>返回值：<code>fork()</code>系统调用返回一个整数值。对于父进程，它会返回新创建子进程的PID。对于子进程，返回值为0，用于区分子进程和父进程。</strong></li></ol><h2 id="进程通信-Interprocess-Communication-IPC"><a href="#进程通信-Interprocess-Communication-IPC" class="headerlink" title="进程通信(Interprocess Communication (IPC))"></a>进程通信(Interprocess Communication (IPC))</h2><h3 id="独立进程（Independent-Processes）："><a href="#独立进程（Independent-Processes）：" class="headerlink" title="独立进程（Independent Processes）："></a>独立进程（Independent Processes）：</h3><p>独立进程是指那些在系统中既不会影响其他进程，也不会受其他进程影响的进程。这些进程之间不能共享系统状态或数据，它们在运行时彼此独立，没有交互。例如，位于不同非网络连接计算机上运行的进程就是独立进程的示例。</p><p>特点：</p><ul><li>**决定性行为 (Deterministic behavior)<strong>：独立进程的行为是确定性的，只取决于其输入状态，因此结果是</strong>可复现的 (Reproducible)**。</li><li>可以停止和重新启动：独立进程可以在不引起问题的情况下停止和重新启动。</li></ul><h3 id="合作进程（Cooperative-Processes）："><a href="#合作进程（Cooperative-Processes）：" class="headerlink" title="合作进程（Cooperative Processes）："></a>合作进程（Cooperative Processes）：</h3><p>合作进程是那些在某种程度上共享信息或资源的进程，它们的执行可能会互相影响。这些进程可以共享数据、状态或资源，它们之间有某种形式的交互。例如，共享同一个文件系统的进程就是合作进程的示例。</p><p>特点：</p><ul><li>**非确定性行为(Nondeterministic)**：合作进程的行为通常是非确定性的，因为多种因素可能会影响结果，导致结果难以复现。</li><li>测试和调试困难：由于非确定性行为，测试和调试合作进程通常更加复杂和困难。</li><li>容易出现竞态条件(race conditions)：合作进程容易受到竞态条件的影响，也就是进程的结果可能取决于其他进程事件的顺序或时间。</li></ul><h3 id="多个并发协同活动存在的原因："><a href="#多个并发协同活动存在的原因：" class="headerlink" title="多个并发协同活动存在的原因："></a>多个并发协同活动存在的原因：</h3><p>在操作系统中，有多个并发活动需要同时进行，例如用户任务、系统任务、输入&#x2F;输出操作等。这些活动可能需要共享资源、信息或数据，并且需要协同工作以实现系统的有效运行。</p><h3 id="为什么不应该为每一个并发活动定义一个单独的进程："><a href="#为什么不应该为每一个并发活动定义一个单独的进程：" class="headerlink" title="为什么不应该为每一个并发活动定义一个单独的进程："></a>为什么不应该为每一个并发活动定义一个单独的进程：</h3><p>虽然可以为每一个并发活动定义一个单独的进程，但这样做会带来一些问题和不便。下面是其中一些问题：</p><ol><li><strong>进程效率问题</strong>：创建新的进程是一项开销较大的操作，因为需要分配新的进程结构和资源。如果为每一个并发活动都创建一个新的进程，会导致资源的浪费和系统性能下降。</li><li><strong>进程不直接共享内存</strong>：每个进程都运行在自己独立的地址空间中，不直接共享内存。这意味着如果并发活动需要访问和操作相同的数据，通常需要通过慢速的操作系统通信机制来进行通信，这会导致效率低下。</li></ol><h2 id="在操作系统中的进程"><a href="#在操作系统中的进程" class="headerlink" title="在操作系统中的进程"></a>在操作系统中的进程</h2><p>在操作系统中，每个进程都运行在其自己的独立地址空间中，这是非常重要的特性，被称为进程隔离。这意味着同一个地址在两个不同的进程中会被存储在内存中的两个不同位置，而不会互相干扰。</p><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><h2 id="引入线程的原因"><a href="#引入线程的原因" class="headerlink" title="引入线程的原因"></a>引入线程的原因</h2><p>考虑一个运行文件服务器的进程。偶尔，这个文件服务器进程需要等待硬盘响应。在这段等待时间内，该进程将被阻塞，无法响应新的请求。</p><p>为了加速将来的操作，该进程将在其内存中保持最近文件的缓存。在这种情况下，一个好的想法是同时运行第二个并发文件服务器来工作，而不是等待。</p><p>然而，通过创建两个独立的进程来实现并发并不是一种高效的方法。这是因为它们必须在相同的地址空间中运行，以有效地共享公共缓存。</p><p>解决上述问题的方法是引入线程的概念。线程是进程内的轻量级并发执行单元，它们在同一个进程内运行，并可以有效地共享相同的地址空间和资源。</p><p>在这种情况下，可以在同一个进程内创建多个线程，其中一个线程可以等待硬盘响应，而另一个线程可以继续工作并处理其他请求，例如维护缓存。这使得进程内的多个线程能够并发执行，而不需要为每个线程创建独立的进程。这提高了系统的性能和资源利用率。</p><p>因此，线程的引入允许在同一个进程内创建多个并发执行的实体，提高了处理并发任务的效率和响应能力。线程通常被用于多任务操作系统和应用程序中，以实现更好的并发性和资源共享。</p><h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><p>现代操作系统通常同时支持进程和线程，这被称为多线程操作系统（multi-threaded OS）。</p><ul><li><strong>进程（Process）</strong>：进程定义了一个独立的地址空间，以及一些通用的进程属性，如文件句柄、打开的文件、代码段等。进程是操作系统中的一个独立执行单元，每个进程都有自己的资源和状态，通常是程序的一个实例。</li><li><strong>线程（Thread）</strong>：线程定义了在进程内的单一顺序执行流。线程共享相同的进程地址空间和资源，但每个线程可以独立运行，并具有自己的栈和寄存器状态。线程是进程的一个子部分，多个线程可以在同一个进程内并发执行。</li></ul><p>属于同一进程的线程共享几乎所有与该进程相关的资源：</p><ul><li><ul><li>地址空间（代码和数据）</li><li>全局变量</li><li>权限</li><li>打开的文件</li><li>计时器</li><li>信号</li><li>信号量</li><li>计费信息</li></ul></li><li>然而，线程之间不共享以下内容：<ul><li>寄存器集，特别是程序计数器（PC）、堆栈指针（SP）、中断向量</li><li>堆栈</li><li>状态</li><li>子线程</li></ul></li></ul><h2 id="线程的特点"><a href="#线程的特点" class="headerlink" title="线程的特点"></a>线程的特点</h2><ul><li>线程不能独立存在，它们始终属于一个进程，一个进程至少包含一个线程。</li><li>线程的创建相对便宜，因为不需要分配新的进程控制块（PCB）或创建新的地址空间。</li><li>线程可以通过进程的全局变量或共享内存以及简单的原语有效地相互通信。这增加了并发性，即使在单处理器系统中也很有用。</li><li>线程可以静态或动态创建，而且如果一个线程需要操作系统提供的服务（系统调用），它会代表所属的进程执行相应的操作。</li></ul><h2 id="线程的实现方式"><a href="#线程的实现方式" class="headerlink" title="线程的实现方式"></a>线程的实现方式</h2><h3 id="用户空间线程（many-to-one模型）："><a href="#用户空间线程（many-to-one模型）：" class="headerlink" title="用户空间线程（many-to-one模型）："></a>用户空间线程（many-to-one模型）：</h3><p>在用户空间线程模型中，线程管理和调度完全在用户级别进行，而不涉及操作系统内核。在这种模型中，多个用户级线程共享同一个内核线程，也就是说，多个用户级线程运行在一个进程内，但它们只有一个内核线程来执行。</p><ul><li>在用户空间线程模型中，操作系统内核调度的是进程，而不知道线程的存在。</li><li>每个进程维护一个线程表（thread table），进程自己决定在其运行时运行哪个线程。</li></ul><p>优点：</p><ul><li>单线程的操作系统可以模拟多线程。</li><li>线程调度由运行时库（run-time library）控制，没有系统调用的开销。</li><li>可移植性：可以实现独立于操作系统的用户空间线程库。</li></ul><p>缺点：</p><ul><li>如果一个用户级线程阻塞（例如，等待I&#x2F;O），则整个进程都会阻塞，因为内核线程没有被释放。</li><li>不能充分利用多核处理器的并行性，因为内核线程数量有限。</li></ul><h3 id="内核空间线程（内核线程，one-to-one模型）："><a href="#内核空间线程（内核线程，one-to-one模型）：" class="headerlink" title="内核空间线程（内核线程，one-to-one模型）："></a>内核空间线程（内核线程，one-to-one模型）：</h3><p>在内核空间线程模型中，每个用户级线程都有一个对应的内核线程。这意味着每个用户级线程都由内核管理和调度，因此更为独立。</p><ul><li>在内核空间线程模型中，操作系统内核调度的是线程，线程是最小的调度单位。</li><li>操作系统维护系统范围的线程表，类似于进程表。</li></ul><p>优点：</p><ul><li>可以更好地管理线程，各线程之间独立。</li><li>提供更好的互动性。</li></ul><p>缺点：</p><ul><li>线程的创建和切换开销较大，因为需要内核的干预。</li><li>管理多个内核线程可能会导致更复杂的调度和资源管理。</li></ul><h3 id="混合模型（many-to-many模型）："><a href="#混合模型（many-to-many模型）：" class="headerlink" title="混合模型（many-to-many模型）："></a>混合模型（many-to-many模型）：</h3><p>混合模型结合了用户空间线程和内核空间线程的优点。在这种模型中，多个用户级线程可以映射到多个内核线程，以实现更好的并发性和性能。这种模型允许用户级线程在不阻塞整个进程的情况下等待I&#x2F;O等操作。</p><h1 id="进程同步（Process-Synchronization）"><a href="#进程同步（Process-Synchronization）" class="headerlink" title="进程同步（Process Synchronization）"></a>进程同步（Process Synchronization）</h1><h2 id="并发执行"><a href="#并发执行" class="headerlink" title="并发执行"></a>并发执行</h2><p>并发执行表示两个或更多进程或线程同时执行，它们可以共享资源并相互影响彼此的执行。</p><h2 id="原子操作"><a href="#原子操作" class="headerlink" title="原子操作"></a>原子操作</h2><p>它们在执行过程中不会被其他操作中断或分割为多个步骤。这确保了在执行原子操作时，操作的开始和结束都是不可分割的，不会发生在中间的中断或干扰。原子操作通常用于确保数据的一致性和避免竞争条件。</p><h2 id="互斥与临界区"><a href="#互斥与临界区" class="headerlink" title="互斥与临界区"></a>互斥与临界区</h2><p>“Milk Problem” 是一个经典的示例，用来说明并发编程中的竞争条件和进程同步的概念。在这个问题中，有两个合租者共享一台冰箱，并希望冰箱中最多只有一瓶牛奶。</p><p>以下是这个问题的解释：</p><ol><li><strong>临界区（Critical Section）</strong>：在这个问题中，临界区是一组操作，包括检查冰箱、去购物、将牛奶放入冰箱等。这些操作都涉及到共享资源（冰箱）的访问和修改。</li><li><strong>互斥（Mutual Exclusion）</strong>：为了解决这个问题，只能允许一个合租者（Flatmate A 或 Flatmate B）在任何时刻执行临界区的操作。这就是互斥的含义，它确保只有一个合租者可以操作冰箱，以防止多个合租者同时将牛奶放入冰箱，导致问题出现。</li></ol><p> 重要概念</p><ul><li><strong>同步（Synchronization）</strong>：确保不同进程（或线程）之间进行适当的合作，依赖于原子操作，以避免竞争条件和数据不一致。</li><li><strong>互斥（Mutual Exclusion，ME）</strong>：确保在任何时刻只有一个进程可以持有或修改共享资源。互斥实现了操作的原子性。</li><li><strong>临界区（Critical Section，CS）</strong>：程序中的代码部分，其中对共享资源进行操作。互斥在临界区中的应用，要求对临界区的访问进行进程的串行化，以确保操作的原子性和正确性。</li></ul><h3 id="锁定"><a href="#锁定" class="headerlink" title="锁定"></a>锁定</h3><p>在并发编程中，实现临界区内的互斥性——锁定是一种方式，用于防止其他进程或线程在关键资源上执行某些操作，从而确保在任何给定时间只有一个进程或线程可以进入关键区域。</p><p>下面是关于锁定的规则：</p><ol><li><strong>进入临界区前必须锁定</strong>：在进入临界区之前，进程或线程必须先获取锁。只有当锁可用时，才能进入临界区。</li><li><strong>离开临界区时必须解锁</strong>：在完成对临界区的操作后，进程或线程必须释放锁，以便其他进程或线程可以获得它并进入临界区。</li><li><strong>尝试进入已锁定的临界区时必须等待</strong>：如果临界区已被其他进程或线程锁定，那么尝试进入该区域的进程或线程必须等待，直到锁被释放为止。</li></ol><h3 id="真正解决临界区问题的要求"><a href="#真正解决临界区问题的要求" class="headerlink" title="真正解决临界区问题的要求"></a>真正解决临界区问题的要求</h3><ol><li><strong>互斥性（Mutual Exclusion）</strong>：在任何给定时刻，至多只能有一个进程在临界区内执行。这确保了临界区的互斥性，防止多个进程同时访问或修改共享资源，从而避免竞争条件。</li><li><strong>有界等待（Bounded Waiting）</strong>：没有进程会无限期地等待进入临界区。这意味着如果一个进程尝试进入它的临界区，它最终会成功，而不会被无限期地推迟。这有助于防止死锁和饥饿（starvation）的情况。</li><li><strong>进展性（Progress）</strong>：一个在临界区外执行的进程不能阻止另一个进程进入它的临界区。如果多个进程同时尝试进入临界区，那么必须有机制来确保其中一个进程最终能够进入，而不是无限期地等待。此外，进程不能永远停留在临界区内，必须能够进入和离开。</li></ol><h3 id="互斥机制的理想特点"><a href="#互斥机制的理想特点" class="headerlink" title="互斥机制的理想特点"></a>互斥机制的理想特点</h3><ol><li><strong>简单（Simple）</strong>：互斥性机制应该是简单的，易于理解和使用。它们的使用不应该过于复杂，而是通过直接标记（例如，加锁和解锁）临界区来使用。</li><li><strong>高效（Efficient）</strong>：互斥性机制应该是高效的，不会占用过多的系统资源。这意味着它们不应该使用忙等待（busy-waiting）来浪费CPU资源，而且进入和离开临界区的开销应该尽可能小，以确保性能。</li><li><strong>可扩展（Scalable）</strong>：互斥性机制应该能够扩展到多个线程或进程共享临界区的情况。它们不应受到线程数量的限制，而应该能够适应不同规模的并发。</li></ol><h3 id="三种基本的互斥机制"><a href="#三种基本的互斥机制" class="headerlink" title="三种基本的互斥机制"></a>三种基本的互斥机制</h3><ol><li><strong>信号量（Semaphores）</strong>：信号量是一种低级机制，用于管理资源的访问。虽然它们可以实现互斥性，但它们相对难以使用，需要更复杂的编程。</li><li><strong>监视器（Monitors）</strong>：监视器是一种更高级的机制，通常需要高级编程语言支持。它们提供了更高层次的抽象，使并发编程更容易，同时实现了互斥性。</li><li><strong>消息传递（Messages）</strong>：消息传递是一种不依赖共享内存的互斥性机制。它使用进程间通信（IPC）消息而不是共享内存来实现同步。</li></ol><h4 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h4><p>信号量通常是一个受保护的整数变量，与一个等待进程队列相关联。它支持两种原子操作：P（等待）和V（释放）。</p><ul><li><strong>信号量变量 S</strong>：信号量是一个整数变量，它具有初始值，该值表示可以同时进入临界区的进程数量。</li><li>**等待操作 P(S)**：P操作用于尝试减少信号量S的值。如果S的值大于零，那么它将减少S的值，允许进程进入临界区。如果S的值为零，那么该进程将被阻塞，并加入等待队列。</li><li>**释放操作 V(S)**：V操作用于增加信号量S的值。如果有等待的进程，它将允许其中一个进程继续执行（从等待队列中取出一个），否则它将增加S的值。</li></ul><p>实例</p><p>生产者&#x2F;消费者问题（Producer&#x2F;Consumer Problem）是一种常见的同步问题，通常用于描述多个进程或线程之间如何协同工作以生产和消耗资源。这个问题通常包括两种类型的进程：</p><ol><li><strong>生产者（Producer）</strong>：生产者进程负责创建资源的实例。它生成资源并将其放入一个共享的缓冲区（或队列）中。</li><li><strong>消费者（Consumer）</strong>：消费者进程负责使用资源的实例。它从共享的缓冲区中取出资源并执行相应的操作。</li></ol><p>约束</p><ol><li><strong>消费者必须等待生产者</strong>：如果缓冲区为空，消费者必须等待，直到生产者将资源放入缓冲区。</li><li><strong>生产者必须等待消费者</strong>：如果缓冲区已满，生产者必须等待，直到消费者从缓冲区中取出资源。</li></ol><p>cppCopy code</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 声明信号量 </span><br><span class="hljs-type">int</span> N = buffer_size; <br><span class="hljs-function">semaphore <span class="hljs-title">S</span><span class="hljs-params">(<span class="hljs-number">1</span>, <span class="hljs-literal">NULL</span>)</span></span>; <span class="hljs-comment">// 用于保护对缓冲区的访问 </span><br><span class="hljs-function">semaphore <span class="hljs-title">full_s</span><span class="hljs-params">(<span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>)</span></span>; <span class="hljs-comment">// 用于跟踪已填充的缓冲区槽位 </span><br><span class="hljs-function">semaphore <span class="hljs-title">empty_s</span><span class="hljs-params">(N, <span class="hljs-literal">NULL</span>)</span></span>; <span class="hljs-comment">// 用于跟踪空缓冲区槽位 </span><br><br><span class="hljs-comment">// 生产者代码 </span><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;    <br>    msg = <span class="hljs-built_in">produce</span>();    <br>    <span class="hljs-built_in">P</span>(empty_s); <span class="hljs-comment">// 等待空槽位    </span><br>    <span class="hljs-built_in">P</span>(S); <span class="hljs-comment">// 进入临界区    </span><br>    <span class="hljs-built_in">put_msg</span>(msg);    <br>    <span class="hljs-built_in">V</span>(S); <span class="hljs-comment">// 离开临界区    </span><br>    <span class="hljs-built_in">V</span>(full_s); <span class="hljs-comment">// 增加已填充的槽位计数 &#125; </span><br>    <br>    <span class="hljs-comment">// 消费者代码 </span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;    <br>        <span class="hljs-built_in">P</span>(full_s); <span class="hljs-comment">// 等待已填充的槽位  </span><br>        <span class="hljs-built_in">P</span>(S);<span class="hljs-comment">// 进入临界区    </span><br>        msg = <span class="hljs-built_in">get_msg</span>();    <br>        <span class="hljs-built_in">V</span>(S); <span class="hljs-comment">// 离开临界区    </span><br>        <span class="hljs-built_in">V</span>(empty_s); <span class="hljs-comment">// 增加空槽位计数</span><br>        <span class="hljs-built_in">consume_msg</span>(msg); <br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="监视器"><a href="#监视器" class="headerlink" title="监视器"></a>监视器</h4><p>监视器包括变量、过程（方法）以及条件变量。它们通常在一种特殊的结构内组织，用于管理并发访问共享资源。</p><p><strong>监视器规则</strong>：</p><ul><li>只允许一个进程在监视器内部活动，这确保了互斥访问共享资源。</li><li>互斥访问内部数据是由编译器来保证的，这意味着程序员不必显式编写互斥锁来保护监视器内部的数据。</li></ul><p><strong>调用监视器过程</strong>：</p><ul><li>进程可以随时调用监视器内的过程来访问共享资源。当一个进程调用监视器过程时，它将进入监视器并获取互斥访问权限。</li></ul><p><strong>不能直接访问内部数据</strong>：</p><ul><li>进程不能直接访问监视器内部的数据（如 <code>i</code>），而必须使用监视器内部的过程来访问或修改这些数据。这样可以确保数据的一致性和互斥性。</li></ul><p>在监视器（Monitors）中，互斥性（Mutual Exclusion）通常是通过内部条件变量（Condition Variables）来实现的。条件变量是一种用于在多个进程或线程之间进行等待和通知的机制。下面是关于监视器中的条件变量以及与之关联的等待（Wait）和通知（Signal）操作的解释：</p><ol><li><strong>等待（Wait）操作：</strong> 等待操作是在监视器内部的条件变量上执行的。它通常在监视器发现某个进程无法继续执行时被调用。等待操作会导致调用它的进程被阻塞，并等待在条件变量上。这个操作的目的是将进程暂时挂起，以便其他进程可以获得进入监视器的权限。一旦进程调用等待操作，它就会被阻塞，直到其他进程发出通知（Signal）操作来唤醒它。</li><li><strong>通知（Signal）操作：</strong> 通知操作用于唤醒等待在条件变量上的一个或多个进程。通知操作会让一个被等待的进程继续执行。值得注意的是，一旦调用通知操作，执行通知操作的进程必须立即退出监视器，以确保互斥性。这是因为通知操作的目的是唤醒等待的进程，而不是让执行通知的进程继续在监视器内执行，以避免竞争条件。</li></ol><p>生产者和消费者问题</p><p>生产者负责将消息放入缓冲区，而消费者负责从缓冲区中移除消息。</p><p>这个监视器需要两个条件和一些内部数据来跟踪缓冲区的状态：</p><ol><li><code>count</code>：一个整数变量，用于跟踪当前缓冲区中的消息数量。</li><li><code>full_s</code> 和 <code>empty_s</code>：两个条件变量，用于通知生产者和消费者关于缓冲区状态的信息。<code>full_s</code> 用于指示缓冲区已满，<code>empty_s</code> 用于指示缓冲区为空。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp">monitor pr_co&#123;<br>    <span class="hljs-type">int</span> count;<br>    condition full_s,empty_s;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">put</span><span class="hljs-params">(msg)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(count == N)<br>            <span class="hljs-built_in">wait</span>(empty_s);<br>        <span class="hljs-built_in">put_msg</span>(msg);<br>        count++;<br>        <span class="hljs-keyword">if</span>(count == <span class="hljs-number">1</span>)<br>            <span class="hljs-built_in">signal</span>(full_s);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Monitor for Producer&#x2F;Consumer 中的操作：</strong></p><ol><li><code>put(msg)</code>：这是生产者使用的操作，用于将消息放入缓冲区。<ul><li>如果 <code>count</code> 等于缓冲区的最大容量 <code>N</code>，表示缓冲区已满，生产者需要等待。此时，它会调用 <code>wait(empty_s)</code>，暂停并等待直到 <code>empty_s</code> 条件被信号（即缓冲区不再为空）。</li><li>一旦缓冲区有足够的空间，生产者将消息放入缓冲区，然后增加 <code>count</code> 计数。</li><li>如果 <code>count</code> 从0变成1（表示之前是空的），则会发出 <code>signal(full_s)</code>，通知任何等待在 <code>full_s</code> 条件上的消费者。</li></ul></li><li><code>get()</code>：这是消费者使用的操作，用于从缓冲区中取出消息。<ul><li>如果 <code>count</code> 等于0，表示缓冲区为空，消费者需要等待。此时，它会调用 <code>wait(full_s)</code>，暂停并等待直到 <code>full_s</code> 条件被信号（即缓冲区不再满）。</li><li>一旦缓冲区中有消息，消费者从中取出消息，然后减少 <code>count</code> 计数。</li><li>如果 <code>count</code> 从N减少到N-1（表示之前是满的），则会发出 <code>signal(empty_s)</code>，通知任何等待在 <code>empty_s</code> 条件上的生产者。</li></ul></li></ol><p><strong>生产者代码：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">cppCopy codeProducer</span><br><span class="hljs-function"><span class="hljs-title">while</span><span class="hljs-params">(<span class="hljs-literal">true</span>)</span> </span>&#123;<br>    msg = <span class="hljs-built_in">produce</span>();  <span class="hljs-comment">// 生成消息</span><br>    pr_co.<span class="hljs-built_in">put</span>(msg);   <span class="hljs-comment">// 将消息放入缓冲区</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在这段代码中，生产者不断循环生成消息，然后调用 <code>pr_co.put(msg)</code> 将消息放入缓冲区。</p><p><strong>消费者代码：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">cppCopy codeConsumer</span><br><span class="hljs-function"><span class="hljs-title">while</span><span class="hljs-params">(<span class="hljs-literal">true</span>)</span> </span>&#123;<br>    msg = pr_co.<span class="hljs-built_in">get</span>();     <span class="hljs-comment">// 从缓冲区中取出消息</span><br>    <span class="hljs-built_in">consume_msg</span>(msg);      <span class="hljs-comment">// 处理消息</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在这段代码中，消费者也不断循环，调用 <code>pr_co.get()</code> 从缓冲区中取出消息，然后对消息进行处理（通过 <code>consume_msg(msg)</code> 函数）。</p><h4 id="消息系统"><a href="#消息系统" class="headerlink" title="消息系统"></a>消息系统</h4><p>组成要素：<br>消息（message): 在两个及以上进程或线程间交换信息</p><p>邮箱 （mailbox）：在消息发送和接受之间储存消息的地方</p><p>消息系统的基本操作：</p><ul><li><p>send(mailbox, message): 把消息放入邮箱</p></li><li><p>receive(mailbox, message): 从邮箱中删除邮件</p></li><li><p>create(mailbox)</p></li><li><p>delete(mailbox)</p></li></ul><p>消息系统的寻址方式：</p><p>消息系统的寻址方式是通过进程ID（PID）来标识源和目标进程。PID是一个唯一的标识符，用于标识正在运行的进程。当一个进程向另一个进程发送消息时，它将消息标记为源进程的PID，并将目标进程的PID作为消息的目标。这样，目标进程就可以通过其PID识别消息的来源，并采取适当的措施。如果有多个目标，或者目标未指定，则可以使用其他标识符来标识目标进程。</p><p>消息格式</p><ul><li>固定长度：减少处理和储存的开销</li><li>可变长度：更适合消息系统</li></ul><p>阻塞与非阻塞</p><p>阻塞发送：进程发送信息后，它会一直阻塞，直到消息被接受</p><p>非阻塞发送：在消息发送后，发送方继续工作，无需等待</p><p>阻塞接受：进程执行接受时，它会被阻塞，直到接收到信息。</p><p>非阻塞接受：进程执行接受，无需等待接受到消息。</p><p><strong>最常见的组合是：非阻塞发送和阻塞接受</strong></p><p>消息执行互斥：</p><p>当进程接收到消息时，它可以进入临界区。</p><p>当进程离开临界区时，他必须向邮箱发送新消息。</p><h1 id="死锁-Deadlock-与饥饿-Starvation"><a href="#死锁-Deadlock-与饥饿-Starvation" class="headerlink" title="死锁( Deadlock) 与饥饿(Starvation)"></a>死锁( Deadlock) 与饥饿(Starvation)</h1><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>在死锁状态下，每个进程都在等待其他进程释放它们所需的资源，但没有一个进程愿意放弃自己已经获取的资源，因此所有进程都无法继续执行。</p><ul><li>互斥条件：资源只能被一个进程占用。</li><li>请求与保持条件：进程可以请求额外的资源，同时保持已经分配的资源。</li><li>不可剥夺条件：资源只能在进程自愿释放时才能够被回收。</li><li>循环等待条件：多个进程之间形成一个等待资源的循环链。</li></ul><h2 id="饥饿"><a href="#饥饿" class="headerlink" title="饥饿"></a>饥饿</h2><p>一个进程由于某种调度策略而无法获得所需的资源，即使资源周期性地可用。这意味着进程被不公平地排除在资源分配之外，无法继续执行。饥饿通常发生在以下情况：</p><ul><li>优先级倾斜：低优先级进程一直在等待，但高优先级进程总是优先获得资源。</li><li>锁定竞争：多个进程竞争相同的资源，但某些进程可能因竞争激烈而无法获得资源。</li></ul><h2 id="资源-resources"><a href="#资源-resources" class="headerlink" title="资源(resources)"></a>资源(resources)</h2><h3 id="可重用资源-Reusable-resources"><a href="#可重用资源-Reusable-resources" class="headerlink" title="可重用资源(Reusable resources)"></a>可重用资源(Reusable resources)</h3><p>可重用资源（Reusable resources）是那些可以同时被一个进程占用，而且在使用后不会被消耗的资源。这意味着多个进程可以依次使用相同的可重用资源，而资源在使用后并不会减少或损坏，因此可以被其他进程再次使用。以下是关于可重用资源的一些重要特点：</p><ul><li>Resources used by only process at a time, and not depleted by that use.</li><li>After use, they are released for reuse by other process.</li><li>Example: Processors, Main memory, devices, semaphores</li></ul><ol><li>可同时使用：多个进程可以同时请求并使用可重用资源，而这些资源不会发生冲突。</li><li>不会被耗尽：使用可重用资源不会导致资源的数量减少，它们仍然可以在未来被其他进程使用。</li><li>释放后可以再次使用：当一个进程使用完可重用资源后，它会释放这些资源，以供其他进程使用。</li><li>例子：可重用资源的示例包括处理器（CPU）、主存和辅助存储设备、各种外部设备，以及数据结构如数据库和信号量。</li></ol><h3 id="可消耗资源-Consumable-Resources"><a href="#可消耗资源-Consumable-Resources" class="headerlink" title="可消耗资源(Consumable Resources)"></a>可消耗资源(Consumable Resources)</h3><p>可消耗资源是由一个进程生成或产生的，然后传递给其他进程，最终由接收资源的进程消耗或销毁。这些资源通常用于进程之间的通信或协作。</p><ul><li>Resources created by one process and destroyed by another</li><li>Infinite number of instances</li><li>No need to release</li><li>Example: signals, interrupts, message</li></ul><ol><li>有无限数量的实例：可消耗资源通常可以有无限多的实例。这意味着可以不断地创建和消耗这些资源，而不会耗尽它们。</li><li>无需显式释放：与可重用资源不同，可消耗资源通常无需显式释放。一旦资源被使用并消耗，它们可以自动被系统回收或销毁。</li><li>示例：可消耗资源的示例包括信号（Signals）、中断（Interrupts）、消息（Messages）等。这些资源用于进程之间的通信和协作，例如，一个进程可以向另一个进程发送信号或消息，以通知它发生了某些事件或需要执行某些操作。</li></ol><p><strong>可重用资源导致死锁的示例</strong></p><p>在这个示例中，有200MB的内存可供使用，并且有两个进程，P1和P2，它们都请求分配一些内存。</p><ol><li>初始请求：P1和P2都请求了一些内存，它们的请求都被满足（Request 80MB和Request 70MB）。此时，200MB的内存中还有剩余。</li><li>同时第二次请求：问题出现在第二次请求，当P1和P2同时请求额外的内存（Request 60MB和Request 80MB）。由于它们同时请求内存，它们都会尝试占用未释放的初始请求内存。</li><li>初始内存请求未释放：由于初始内存请求并没有被释放，内存资源不足以满足这两个同时进行的第二次请求。每个进程都需要等待对方释放内存，以便满足自己的第二次请求。</li><li>结果是死锁：在这种情况下，由于两个进程都无法获得所需的内存，它们都被阻塞，等待对方释放内存，这导致了死锁。没有进程愿意主动释放内存，因为它们都在等待对方的释放。</li></ol><p><strong>可消耗资源(以message为例)导致死锁</strong></p><ol><li>进程依赖：P1需要接收P2发送的消息（N），而P2需要接收P1发送的消息（M）才能继续执行。这创建了一种相互依赖关系，其中每个进程等待另一个进程发送消息以满足它的接收操作。</li><li>同时操作：问题出现在当P1和P2同时尝试执行<code>receive</code>操作时，这两个操作都是阻塞的，因为它们等待对方发送消息。</li><li>结果是死锁：由于P1和P2都无法继续执行，它们被阻塞在<code>receive</code>操作上，等待对方发送消息。这导致了死锁，因为没有一个进程愿意主动发送消息，因为它们都在等待对方的消息。</li></ol><p>Philosophers”（用餐哲学家）问题。问题的背景是，有5位哲学家围坐在一张圆桌旁，每位哲学家要么在思考，要么在用餐。在桌子上有5碗面条和5个叉子，每位哲学家需要同时拿到他们面前的两个叉子才能用餐。然而，只有一个哲学家可以同时使用一个叉子。</p><p>为了解决这个问题，文本提供了一个解决方案，使用信号量来控制资源的分配和哲学家的行为。下面是一些关键点的解释：</p><ol><li>信号量解决方案：为了控制资源的访问，每个叉子都有一个信号量，初始值为1，表示叉子是否被占用。另外，还有一个名为<code>table</code>的信号量，其初始值为4，表示最多允许4位哲学家同时坐在桌子旁。</li><li>哲学家的行为：每位哲学家都是一个进程，它们以循环的方式执行以下行为：<ul><li>思考：哲学家思考一段时间。</li><li>尝试获取左边的叉子（<code>P(fork[i])</code>）。</li><li>尝试获取右边的叉子（<code>P(fork[(i+1) mod 5])</code>）。</li><li>吃面条：如果成功获得了两个叉子，那么哲学家可以用餐。</li><li>释放叉子：用餐后，哲学家释放叉子（<code>V(fork[(i+1) mod 5])</code>和<code>V(fork[i])</code>）。</li><li>释放桌子：哲学家用餐完毕后，释放桌子（<code>V(table)</code>），以便其他哲学家可以用餐。</li></ul></li><li>死锁和饥饿问题：文本提到，最初的解决方案可能会导致死锁，因为所有哲学家在同一时刻都尝试获取左边的叉子。为了解决死锁，可以添加机制，使哲学家在获取左边的叉子时，如果右边的叉子已经被占用，则释放左边的叉子并等待一段时间后再尝试。这样，死锁问题得到解决。</li><li>饥饿问题：即使死锁问题得到解决，仍然存在饥饿问题，因为如果所有哲学家在同一时刻都开始执行算法，它们可能会陷入无限循环。为了解决饥饿问题，可以引入随机等待时间，以确保哲学家们在不同时间尝试获取叉子，从而减少竞争。</li></ol><p>提到了一些可能的解决方案，以应对死锁和饥饿问题，这些问题通常出现在”Dining Philosophers”问题中。这些解决方案包括：</p><ol><li>限制哲学家的数量：一种简单的解决方案是限制在桌子旁的哲学家数量，以降低资源争夺的概率。例如，可以只允许最多四位哲学家同时坐在桌子旁，这样至少有一位哲学家能够吃饭，而不会导致死锁。</li><li>不对称解决方案：在不对称解决方案中，哲学家的行为被设定为不同，以减少资源竞争。例如，偶数编号的哲学家可以首先尝试获取左边的叉子，而奇数编号的哲学家可以首先尝试获取右边的叉子。这样可以减少争用，但仍需要适当的资源分配。</li><li>使用计数信号量：另一种解决方案是为每位哲学家提供一个计数信号量，用于跟踪可用的叉子数量。这需要小心的初始化，以确保适当的资源分配，以避免死锁和饥饿。</li><li>形式化建模：最终，为了更好地处理这个问题的复杂性，可以采用形式化建模方法，例如Petri网、模型检测等，来分析和验证不同解决方案的正确性。这可以帮助确保哲学家问题的解决方案是可靠和健壮的。</li></ol><h2 id="资源分配图（Resource-Allocation-Graph，RAG）"><a href="#资源分配图（Resource-Allocation-Graph，RAG）" class="headerlink" title="资源分配图（Resource-Allocation Graph，RAG）"></a>资源分配图（Resource-Allocation Graph，RAG）</h2><p>资源分配图（Resource-Allocation Graph，RAG）是一种用于更形式化地描述死锁的方法，通常用于分析和识别系统中的死锁情况。RAG是一个有向图，它用于表示资源分配和进程等待的情况</p><ol><li>图的组成：<ul><li>顶点（节点）集：资源分配图包括一组顶点，每个顶点通常代表一个进程或一个资源。</li><li>边（连接顶点的线）集：边表示资源分配和等待的关系。</li></ul></li><li>顶点表示：<ul><li>顶点可以代表两种不同的实体：<ul><li>进程：每个进程由一个顶点表示，表示该进程正在运行或等待资源。</li><li>资源：每个资源也由一个顶点表示，表示该资源当前是否被分配给某个进程。</li></ul></li></ul></li><li>边表示：<ul><li>边表示资源的分配和等待关系。<ul><li>分配边：当一个资源被分配给一个进程时，从资源的顶点到进程的顶点绘制一条边。</li><li>等待边：当一个进程等待获取一个资源时，从进程的顶点到资源的顶点绘制一条边。</li></ul></li></ul></li><li>图的状态：<ul><li>资源分配图完全描述了系统的状态，包括哪些资源被分配给哪些进程，以及哪些进程正在等待哪些资源。</li></ul></li><li>检测死锁：<ul><li>通过分析资源分配图，可以检测潜在的死锁情况。如果图中存在环（循环等待），那么系统可能处于死锁状态。</li></ul></li></ol><h1 id="进程调度"><a href="#进程调度" class="headerlink" title="进程调度"></a>进程调度</h1><ul><li>进程调度是指在一个多任务操作系统中，当一个进程完成执行或者由于等待I&#x2F;O操作而暂停时，操作系统需要决定接下来应该执行哪个进程。</li><li>这是一个复杂的决策，因为通常系统中会有多个进程等待执行，而CPU数量有限。因此，需要一个组件来负责这一决策，这个组件被称为调度程序（Scheduler）。</li><li>调度程序基于一定的调度算法来做出决策。这些算法定义了在什么情况下应该选择哪个进程来运行，以及每个进程运行的时间片。</li><li>有许多不同的调度算法可供选择，每个算法都有其自己的优点和局限性，因此选择适当的调度算法对于系统性能非常重要。</li></ul><h2 id="突发周期"><a href="#突发周期" class="headerlink" title="突发周期"></a>突发周期</h2><ol><li><p>CPU Burst（CPU突发）：</p><p>A period of CPU execution with no I&#x2F;O</p><ul><li>CPU Burst是进程在执行过程中的一段时间，期间CPU被用于计算和执行指令，而没有进行输入&#x2F;输出操作（I&#x2F;O）。</li><li>在CPU Burst期间，进程正在执行计算任务，进行数学运算，或执行其他需要CPU计算资源的操作。</li></ul></li><li><p>I&#x2F;O Burst（I&#x2F;O突发）：</p><p>Wait for I&#x2F;O signal</p><ul><li>I&#x2F;O Burst是进程在等待I&#x2F;O操作完成时的状态。在这个状态中，进程暂停CPU的使用，等待某种I&#x2F;O操作的信号或完成。</li><li>通常，在I&#x2F;O Burst期间，进程会暂停执行，并将CPU资源释放给其他进程，以便系统可以更高效地利用CPU。</li></ul></li></ol><p>Burst cycles的交替发生通常是进程执行的一部分，进程在CPU Burst和I&#x2F;O Burst之间切换，以完成不同的计算和I&#x2F;O任务。这种交替可以确保系统中的多个进程都能得到处理，提高系统的并发性和资源利用率。</p><p>In multiprogramming, mix the CPU and I&#x2F;O brust of different process to increase utilisation. When one process is waiting we execute another process.</p><h2 id="调度器类型"><a href="#调度器类型" class="headerlink" title="调度器类型"></a>调度器类型</h2><ol><li><p>长期调度器（Long-Term Scheduler）：</p><p>A program becomes a process once selected by long-term scheduler, and it is added to the ready queue. Long controls the degree of mutiprogramming.</p><ul><li>长期调度器控制了被允许竞争系统资源的进程池。它决定将哪些程序（通常是从外部提交的）变成进程，并将它们添加到就绪队列（ready queue）中，以便它们能够参与CPU资源的竞争。</li><li>长期调度器控制多道程序设计的程度，即决定系统中同时运行的进程数量。增加进程数量会导致每个进程能够分配到的CPU时间较少，但也提高了系统的并发性。</li></ul></li><li><p>中期调度器（Medium-Term Scheduler）：</p><p>Select what processes are kept in memory, actively competing for CPU acquisition.</p><ul><li>中期调度器负责选择哪些进程将保留在内存中，以积极竞争获取CPU资源。中期调度器充当了一个缓冲区，可以暂停和恢复进程，以调整系统的负载。</li><li>中期调度器的作用是确保系统中的内存资源得到有效利用，并根据需要将进程从内存中移除，以便为新进程腾出空间。</li></ul></li><li><p>短期调度器（Short-Term Scheduler）：</p><p>Select what process is assigned to CPU</p><p>Only selects from processes in the ready queue.</p><ul><li>短期调度器负责从就绪队列中选择下一个应该分配给CPU的进程。它只能从已准备好竞争CPU资源的进程中进行选择。</li><li>短期调度器的作用是在内存中已准备好执行的进程中，选择一个来运行，以实现多任务并行执行。</li></ul></li></ol><p>这些不同的调度器在操作系统中起着不同的作用，长期调度器控制多道程序设计的程度，中期调度器管理内存中的进程，而短期调度器负责选择下一个要运行的进程，以确保系统的高效性和响应性。</p><h2 id="调度队列"><a href="#调度队列" class="headerlink" title="调度队列"></a>调度队列</h2><ol><li><p>就绪队列（Ready Queue）：</p><p>Queue of all processes that are eligible to be scheduled.</p><ul><li>就绪队列包含了所有具备条件被调度执行的进程。这些进程已经准备好运行，只需要分配CPU资源就可以立即开始执行。通常，短期调度器（Short-Term Scheduler）从就绪队列中选择下一个要执行的进程。</li></ul></li><li><p>就绪-暂停队列（Ready-Suspended Queue）：</p><p>Queue of all processes that are ready to be execute but have been excluded by the medium.</p><ul><li>就绪-暂停队列包含了那些已准备好执行但由于一些原因被中期调度器（Medium-Term Scheduler）排除在外的进程。这些进程可能暂时不在内存中，或者由于某些原因被暂停。它们可以在稍后重新加入就绪队列。</li></ul></li><li><p>阻塞队列（Blocked Queue）：</p><p>Queue of all processes that are waiting for an event before going to ready queue.</p><ul><li>阻塞队列包含了那些正在等待某个事件发生的进程，然后才能继续执行。这些事件可能包括I&#x2F;O操作完成、信号接收等。进程在等待事件发生时被移动到阻塞队列。</li></ul></li><li><p>阻塞-暂停队列（Blocked-Suspended Queue）：</p><p>Queue of all processes that are waiting for an event and have been excluded by the medium.</p><ul><li>阻塞-暂停队列包含了那些正在等待事件发生的进程，但由于一些原因被中期调度器排除在外。这些进程可能暂时不在内存中，或者由于其他原因被暂停。它们可以在稍后重新加入阻塞队列。</li></ul></li></ol><p>这些调度队列在多任务操作系统中用于有效地管理和组织进程的执行。不同类型的队列允许操作系统将进程分类，以便根据各种条件和需求来做出决策。例如，短期调度器从就绪队列中选择进程以执行，中期调度器可能会在就绪-暂停队列和阻塞-暂停队列之间移动进程以优化系统负载，同时在阻塞队列中等待事件的进程则在事件发生后重新移动到就绪队列。</p><h2 id="分派程序（Dispatcher）"><a href="#分派程序（Dispatcher）" class="headerlink" title="分派程序（Dispatcher）"></a>分派程序（Dispatcher）</h2><ul><li>分派程序是一个操作系统组件，它的任务是在短期调度器选择下一个要执行的进程后，负责执行上下文切换，将CPU控制权分派给新的进程。</li><li>分派程序必须尽可能快，因为它在每次进程切换时都会被调用。分派程序的性能直接影响系统的响应时间和效率。</li></ul><p>分派程序的功能：</p><ul><li>切换上下文(Switch context)：分派程序将正在运行的进程的上下文保存到进程控制块（Process Control Block，PCB）中，然后将将要运行的进程的PCB内容加载到内存中，以准备执行。</li><li>存储相关数据：分派程序需要保存和恢复与进程执行相关的所有必要数据，以确保进程能够在下次运行时继续其执行。</li><li>跳转到程序的正确位置( Jump to the right location in the program to  restart it, switching to user&#x2F; kernel mode if required.：分派程序必须确保控制权移交给新进程后，它从程序的正确位置开始执行。这可能涉及到切换用户模式和内核模式，具体取决于操作系统的设计和保护机制。</li></ul><p>分派延迟（Dispatch Latency）：</p><ul><li>分派延迟是指在短期调度器（Short-Term Scheduler）选择下一个要执行的进程后，需要经过一系列步骤才能将控制权分派给该进程的时间延迟。</li><li>分派延迟包括以下步骤：<ul><li>获取新进程执行所需的资源。Gets the resources needed to execute the new process<ul><li>如果正在运行的进程只应在运行时拥有某些资源，需要将这些资源从运行中的进程中剥夺（资源抢占)。Preemption of running process resources.</li></ul></li><li>分派程序（Dispatcher）执行切换上下文的操作，以将CPU控制权移交给新选定的进程。</li></ul></li></ul><h2 id="调度策略"><a href="#调度策略" class="headerlink" title="调度策略"></a>调度策略</h2><p>非抢占式调度（Non-preemptive Scheduling）：</p><ul><li>非抢占式调度是一种调度策略，其中调度决策只在进程自愿释放CPU控制权时才会发生。也就是说，进程只在主动让出CPU时，才会进行调度切换。</li><li>这种调度策略可能导致以下特点和影响：<ul><li>短时间的进程可能会经历长时间的延迟，因为长时间运行的进程不会被强制停止。</li><li>从进程提交到完成的时间可能会变得难以预测，因为没有预定的时间片用于强制切换进程。</li><li>错误或恶意进程可能会阻塞系统，因为它们不会自愿释放CPU。</li></ul></li></ul><p>抢占式调度（Preemptive Scheduling）：</p><ul><li><p>抢占式调度是一种调度策略，其中进程可以被强制从正在运行的CPU中移除，以分配给另一个进程。这可以发生在预定的时间片结束、高优先级进程到来、或发生某些特定事件时。</p></li><li><p>这种调度策略带来了以下特点和影响：</p><ul><li>恶意或错误的进程可以被强制从CPU中移除，以确保它们不会无限期地占用CPU资源。(Malicous or errant processes can be removed from the CPU)</li><li>改善了响应时间，特别适用于交互式系统和时间共享系统，因为可以及时地响应用户的输入。(Improved response times are possible)</li><li>对于软实时系统而言，抢占式调度是必要的，因为它可以确保紧急任务及时完成。然而，对于硬实时系统，通常不使用抢占，因为它们需要更加确定的响应时间保证。</li></ul></li></ul><p>抢占式调度允许操作系统更好地管理CPU资源，及时响应紧急情况，但也需要更多的调度开销。非抢占式调度在某些情况下可以更简单，但可能导致不可预测的系统行为。</p><h3 id="调度目标"><a href="#调度目标" class="headerlink" title="调度目标"></a>调度目标</h3><ul><li>最大化处理器利用率（Maximise processor utilisation）。</li><li>最大化吞吐量（Maximise throughput），即单位时间内完成的进程数量。</li><li>最小化就绪队列中的等待时间（Minimise waiting time in the ready queue）。</li><li>最小化响应时间（Minimise response time），即首次获得CPU的等待时间。</li><li>最小化周转时间（Minimise turnaround time），包括等待时间和执行时间。</li><li>满足进程的截止日期（Complete processes by given deadlines）。</li></ul><p>不同的调度目标通常无法同时实现，因此操作系统调度算法通常专注于目标的子集，以平衡性能需求。</p><p>无论采用何种调度策略，都应具备以下特点：</p><ul><li>政策执行（Policy enforcement）：确保系统的调度策略得以执行。</li><li>公平性和平衡性（Fairness and Balance）：确保没有进程被饿死（starved），并且相似的进程受到相同的对待。No process is starved. Similar processes are treated the same.</li><li>可预测性（Predictability）：在相似负载下，相同进程应在大致相同的时间内运行。</li><li>可扩展性（Scalability）：在重负载下能够实现优雅的性能降级。</li></ul><p>为了实现调度目标，调度程序还应考虑进程的行为。进程行为通常根据其CPU突发模式进行分类。</p><p>常见的进程分类包括：</p><ul><li>CPU密集型（CPU-bound）：通常会占用大部分CPU时间。</li><li>I&#x2F;O密集型（I&#x2F;O-bound）：通常会频繁生成I&#x2F;O请求并释放处理器。</li></ul><p>大多数进程现在倾向于是I&#x2F;O密集型，因为CPU技术进步较快，而磁盘技术进展相对较慢。</p><p><strong>典型进程（Typical Processes）</strong>：</p><ul><li>进程通常根据其活动性进行分类，包括批处理进程（Batch Process）和交互式进程（Interactive Process）。</li><li>批处理进程通常是CPU密集型，不需要用户输入，而交互式进程通常是I&#x2F;O密集型，需要频繁的用户输入。</li></ul><p>对于批处理系统，吞吐量（throughput）和周转时间（turnaround time）是重要的。</p><p>对于交互式系统，响应时间（response time）是关键。</p><h2 id="调度算法"><a href="#调度算法" class="headerlink" title="调度算法"></a>调度算法</h2><h3 id="FCFS"><a href="#FCFS" class="headerlink" title="FCFS"></a>FCFS</h3><p>Implements FIFO</p><p>FCFS is good for CPU-bound processes</p><p>But the waiting time is bad if long processes come first.</p><p><img src="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/image-20231219175551971.png" alt="image-20231219175551971"></p><h3 id="Shortest-Job-First"><a href="#Shortest-Job-First" class="headerlink" title="Shortest Job First"></a>Shortest Job First</h3><p>Always schedule the process with the shortest upcoming burst time next.</p><p>2 version:</p><ul><li>Non-preemptive - Shortest Job First</li><li>Preemptive - Shortest Time Remaining Firest</li></ul><p>If all processes arrive at the same time, Non- preemptive is better.</p><p><strong>Exponential Average</strong></p><p>t<del>n</del> be the measured length of the n-th CPU burst.</p><p><img src="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/image-20231219190231734.png" alt="image-20231219190231734"></p><p>If a &#x3D; 0, then recent times have no effect.</p><p>If a &#x3D; 1, only the most recent CPU burst is considered.</p><p><strong>Usually a is 0.5</strong></p><h3 id="Round-Robin"><a href="#Round-Robin" class="headerlink" title="Round Robin"></a>Round Robin</h3><p>Processes are dispatched FIFO but only given a limited amount of CPU time. (Called a time slice)</p><p>RR performance heavily depends on the time slice size.</p><h3 id="Priority-Scheduling"><a href="#Priority-Scheduling" class="headerlink" title="Priority Scheduling"></a>Priority Scheduling</h3><p>We schedule the most important processes first.</p><p>Small numbers mean high priority.</p><p><strong>Starvation</strong></p><p>Low priority proesses might never execute, we need to increase priority as time progresses(ageing)</p><h3 id="Multilevel-Queue-Scheduling"><a href="#Multilevel-Queue-Scheduling" class="headerlink" title="Multilevel Queue Scheduling"></a>Multilevel Queue Scheduling</h3><h3 id="Lottery-Scheduling"><a href="#Lottery-Scheduling" class="headerlink" title="Lottery Scheduling"></a>Lottery Scheduling</h3><p>Lottery scheduling is an adaptive scheduling approach to address the fairness problem.</p><ul><li>Each process owns some tickets</li><li>On each time slice, a ticket is randomly picked.</li></ul><h2 id="Scheduling-in-Real-Time-Systems"><a href="#Scheduling-in-Real-Time-Systems" class="headerlink" title="Scheduling in Real-Time Systems"></a>Scheduling in Real-Time Systems</h2><p>Must meet the needs of processes that must produce correct output by a deadline.</p><p>SJF is optimal for the average waiting time, but it does not guarantee a fixed waiting time for any process.</p><h3 id="Soft-Real-Time-Scheduling"><a href="#Soft-Real-Time-Scheduling" class="headerlink" title="Soft Real-Time Scheduling"></a>Soft Real-Time Scheduling</h3><p>Missing an deadline occasionally is acceptable. </p><p>Priority scheduling required. Small dispatch latency required.</p><h3 id="Hard-Real-Time-Scheduling"><a href="#Hard-Real-Time-Scheduling" class="headerlink" title="Hard Real-Time Scheduling"></a>Hard Real-Time Scheduling</h3><p>Absolute deadline that always have to be met.(air traffic control)</p><h1 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h1><h2 id="储存单元-MU"><a href="#储存单元-MU" class="headerlink" title="储存单元 (MU)"></a>储存单元 (MU)</h2><ul><li>存储单元是指可以表示为大型数据字或字节数组的存储设备，每个数据都有其独特的物理地址。</li><li>存储单元的示例包括随机存取存储器（RAM）、闪存和磁盘存储。</li><li>需要注意的是，存储单元本身并不负责生成它所使用的地址。</li></ul><p><strong>多道程序设计操作系统中存储的作用：</strong></p><p>Memory is central to the multiprogramming OS, since a process must be in memory to execute.</p><ul><li>在多道程序设计中，多个进程同时加载到内存中，操作系统必须管理它们的执行。</li><li>为了执行进程，它必须存在于内存中。存储单元存储了进程运行所需的程序指令和数据。</li></ul><p><strong>指令执行循环：</strong></p><ol><li><strong>加载指令：</strong> CPU通过从内存加载程序指令来启动指令执行循环。加载的指令的地址由程序计数器（PC）寄存器的内容决定，该寄存器跟踪下一条要执行的指令。</li><li><strong>解码指令(decoded)：</strong> 一旦加载，CPU对指令进行解码。解码涉及解释指令并确定其需要执行的操作。</li><li><strong>内存操作：</strong> 指令的执行可能涉及从内存中额外加载或存储数据。这反映了程序执行的动态性，其中在进程过程中经常需要从内存获取数据，并将其存回内存。</li><li><strong>进程终止(terminate)：</strong> 最终，正在执行的进程将终止。当这发生时，它在内存中占用的空间被声明为空闲，允许操作系统加载和执行其他进程。</li></ol><h2 id="地址绑定"><a href="#地址绑定" class="headerlink" title="地址绑定"></a>地址绑定</h2><ul><li>一个程序通常以二进制可执行文件的形式存储在磁盘(disk)上。</li><li>为了执行该程序，它必须被加载，即被引入到内存中，放置在进程地址空间的代码段中。</li><li>在具有虚拟内存的系统中，进程（或其部分）在执行期间可以在内存和磁盘之间移动（交换）。</li></ul><p><strong>大多数系统允许用户进程在内存单元的任何空闲位置驻留：</strong></p><ul><li>因此，进程的第一个物理地址不一定是0。</li><li>由于这个原因，需要一种地址绑定机制(address binding mechanism)，使程序中使用的地址与正确的物理地址相关联。</li></ul><p>在这个背景下，地址绑定的目的是确保程序中使用的地址能够正确地映射到物理内存中的位置。因为程序可能在执行过程中从磁盘加载到内存，地址绑定机制必须能够动态地调整这些地址，以便它们正确地指向正在执行的程序的位置。这有助于确保程序在执行过程中能够正确地访问其代码和数据。</p><p><strong>地址绑定时机</strong></p><p><strong>1. 编译时（较早的系统）:</strong></p><ul><li>如果进程的内存位置在编译时是已知的，编译器可以生成程序可执行文件中的绝对代码(absoulute code)_。在这种情况下，程序中的地址引用也是物理地址。</li><li>但是，如果进程位置发生变化，就需要重新编译程序（使用新地址）。</li></ul><p><strong>2. 载入时（较早的系统）:</strong></p><ul><li>如果在编译时内存位置是未知的，编译器将符号地址绑定到可重定位地址（即偏移量）。</li><li>物理地址在载入时绑定。</li><li>如果进程位置发生变化，无需重新编译程序，但如果位置发生变化，则必须重新加载程序。</li></ul><p><strong>3. 执行时（现代通用操作系统）:</strong></p><ul><li>如果在执行期间进程可以移动到另一个内存区域，那么绑定必须在运行时进行（动态绑定）。</li><li>需要特殊的硬件来将进程地址转换为物理地址，这就是内存管理单元（MMU）的作用。</li></ul><p><em>Example</em></p><p>使用了”Base and limit registers”（基址寄存器和限制寄存器）来管理进程的地址空间.</p><h2 id="基址寄存器和限制寄存器"><a href="#基址寄存器和限制寄存器" class="headerlink" title="基址寄存器和限制寄存器:"></a><strong>基址寄存器和限制寄存器:</strong></h2><ul><li><strong>基址寄存器（Base Register）：</strong> 它存储了一个进程可以访问的最小物理地址。也就是说，当一个进程要访问内存时，其地址将与基址相加，从而得到实际的物理地址。</li><li><strong>限制寄存器（Limit Register）：</strong> 它存储了进程地址空间的大小。通过这个限制，系统可以确保进程只能访问其地址空间内的有效范围。</li></ul><p><strong>地址翻译过程:</strong></p><ul><li>当运行中的进程生成一个内存地址 m 时，该地址通过基址寄存器进行翻译，即最终的物理地址为 m + 基址。</li><li>这个地址翻译是由内存管理单元（MMU）执行的硬件操作，它能够实时地将进程生成的逻辑地址翻译为实际的物理地址。</li><li>如果 m 大于等于限制寄存器中的限制值（即超出了进程的地址空间），则会触发地址错误陷阱。</li></ul><p><strong>特权指令和内核模式:</strong></p><ul><li>基址寄存器和限制寄存器的设置只能通过特权指令完成，而这些指令通常只能在内核模式下执行。</li><li>内核模式是操作系统运行的高特权级别，可以执行一些对系统关键部分进行管理的操作。</li></ul><p><strong>逻辑地址与物理地址空间:</strong></p><ul><li><p><strong>逻辑地址（Logical Address）:</strong> 由CPU处理，通常对应于进程的地址空间中的位置。</p></li><li><p>例如，一个32位处理器处理32位长的地址，进程的地址空间范围通常在0到2^32 - 1之间。</p></li><li><p><strong>在编译时和载入时地址绑定中的逻辑和物理地址:</strong></p><ul><li>在编译时和载入时地址绑定时，逻辑地址和物理地址是相同的。</li></ul></li><li><p><strong>在运行时地址绑定（现代系统）中的逻辑和物理地址:</strong></p><ul><li>在运行时地址绑定时，逻辑地址和物理地址不同。</li></ul></li></ul><p><strong>使用基址和限制寄存器的系统示例:</strong></p><ul><li>在使用基址和限制寄存器的系统中，逻辑地址通过基址寄存器进行转换，最终得到物理地址。</li></ul><p><strong>举例说明:</strong></p><ul><li>假设基址寄存器的值是B，逻辑地址为L，那么物理地址就是 B + L。</li><li>如果逻辑地址超出了限制寄存器指定的范围，就可能会触发错误</li></ul><h2 id="内存管理-MM-的重要性"><a href="#内存管理-MM-的重要性" class="headerlink" title="内存管理(MM)的重要性:"></a><strong>内存管理(MM)的重要性:</strong></h2><ul><li>内存管理在计算机系统中是至关重要的。</li><li>理想情况下，我们希望拥有无限大且速度极快的非易失性内存。(infinitely large and infinitely fast non-volatile memory)</li><li>然而，在实际的计算机中，通常存在内存层次结构(memory hierarchy).</li></ul><p><strong>内存层次结构:</strong></p><ul><li><strong>主存储器（Primary Memory）:</strong> 相对较小但速度较快的易失性内存，如RAM（随机存取存储器）和缓存，也称为主存储器。</li><li><strong>辅助存储器（Secondary Memory）:</strong> 大量但速度较慢的非易失性内存，如硬盘和闪存。</li><li><strong>第三级存储器（在一些特殊系统中）:</strong> 存储在计算机外部，但仍然可访问，例如百度云盘。</li></ul><p><strong>内存管理的角色:</strong></p><ul><li><p>内存管理器:</p><p> 操作系统的组件，负责以下任务：</p><ol><li>跟踪哪些内存部分正在使用，哪些未被使用. Keep track of which parts of memory are in use and which parts are not.</li><li>在进程需要时分配内存，当进程完成时释放内存。Allocates memory to processes when they need it and deallocate it when they are done.</li><li>在主存储器无法容纳所有进程时，在主存储器和磁盘之间进行交换管理。Manages swapping between main memory and disk when the main memory cannot hold all processes.</li></ol></li></ul><p><strong>内存管理系统:</strong></p><ul><li>内存管理系统可以分为两类：<ul><li><strong>单道程序设计（Monoprogramming）:</strong> 一次只能执行一个程序。</li><li><strong>多道程序设计（Multiprogramming）:</strong> 允许多个程序同时在内存中执行。</li></ul></li></ul><h3 id="单道程序设计（Monoprogramming）"><a href="#单道程序设计（Monoprogramming）" class="headerlink" title="单道程序设计（Monoprogramming）"></a><em>单道程序设计（Monoprogramming）</em></h3><p><strong>特点:</strong></p><ul><li><strong>非常简单:</strong> 一次只有一个用户进程在内存中（包括操作系统进程时可能为两个）。</li><li><strong>内存管理仍然存在:</strong> 即使只有一个进程，内存管理仍然需要决定进程的数据将存储在何处。</li><li><strong>缺乏保护:</strong> 单道程序设计通常缺乏对内存的保护机制，即进程不能访问其他进程的内存空间。</li><li><strong>缺乏绑定和交换:</strong> 通常没有编译时或载入时的地址绑定，也没有进程之间的交换。</li></ul><p><strong>单道程序设计中的内存组织示例:</strong> 在单道程序设计中，内存的组织相对简单，因为只有一个用户进程在执行。以下是一些可能的内存组织示例：</p><ol><li><strong>顺序存储:</strong> 用户程序的指令和数据按顺序存放在内存中。</li><li><strong>分区存储:</strong> 将内存划分为不同的区域，例如代码区、数据区等，以便存储用户程序的不同部分。</li><li><strong>堆栈结构:</strong> 使用堆栈来管理函数调用和局部变量，使得程序的执行具有明显的结构。</li></ol><h3 id="多道程序设计（Multiprogramming）"><a href="#多道程序设计（Multiprogramming）" class="headerlink" title="多道程序设计（Multiprogramming）:"></a><em><strong>多道程序设计（Multiprogramming）:</strong></em></h3><p><strong>特点：</strong></p><ul><li><p>旨在同时为多个用户提供交互式服务。Provide interactive services to seveal users simultaneously.</p><ul><li>允许一次在内存中运行多个进程。</li><li>提供保护、运行时绑定和交换（使用分页&#x2F;分段等技术，稍后会详细说明）。protection, run-time binding and swapping</li></ul></li><li><p>目标是尽可能使处理器一直繁忙。</p><ul><li>Execute and not execute according to process state(I&#x2F;O or not).</li></ul></li><li><p>Muiltiprogramming increases CPU utilisation.</p></li></ul><p><strong>多道程序设计和性能:</strong></p><ul><li>当有n个进程在内存中时，其多道程序设计的程度为n。</li><li>假设任何进程花费其时间的一部分p等待I&#x2F;O操作完成（0 &lt; p &lt; 1）。</li><li>所有n个进程都被阻塞等待I&#x2F;O的概率为p^n。</li></ul><p><strong>CPU利用率的计算:</strong></p><ul><li>CPU利用率 &#x3D; 1 - p^n^，即1减去所有n个进程都等待I&#x2F;O的概率。</li></ul><p><strong>多道程序设计 Performance:</strong></p><ul><li>多道程序设计提高了CPU的利用率，因为在一个进程等待I&#x2F;O的时候，其他进程仍然可以在CPU上执行。</li><li>通过保持处理器忙碌，系统可以更有效地利用计算资源。</li></ul><p><strong>性能与交互式服务:</strong></p><ul><li>多道程序设计的目标之一是为多用户提供交互式服务，确保系统对多个用户的响应是及时的。</li><li>通过在等待I&#x2F;O操作的进程之间切换执行不执行I&#x2F;O的进程，系统可以更快地响应用户的请求。</li></ul><p><strong>案例：多道程序设计与性能:</strong> 尽管前述模型较为简化（它假设进程是独立的，I&#x2F;O阻塞的概率相同等），但它使我们能够进行具体的性能预测。</p><p><strong>假设：</strong></p><ul><li>考虑一台计算机，有1 GB内存，其中操作系统占用200 MB，留出空间可以运行四个占用200 MB的进程。</li><li>假设I&#x2F;O等待时间为80%。</li></ul><p><strong>性能预测:</strong></p><ol><li>如果我们忽略操作系统执行开销，我们将实现略低于60%的CPU利用率。</li><li>如果我们再添加1 GB内存，我们可以运行另外五个进程；此时我们现在可以实现约86%的CPU利用率（性能提高了26%）。</li><li>但是，如果我们再添加1 GB内存（总共14个进程和1个操作系统），CPU利用率仅会增加到约96%（性能提高了仅为10%）。</li></ol><p>这个案例说明了添加内存对系统性能的影响，并显示了性能提升可能会随着系统资源的增加而减缓。在实际系统中，性能受到许多因素的影响，包括硬件能力、操作系统的优化、应用程序的特性等。</p><h2 id="内存组织"><a href="#内存组织" class="headerlink" title="内存组织"></a>内存组织</h2><ol><li><strong>连续分配（Contiguous Allocation）:</strong><ul><li><strong>固定分区（Fixed Partitions）:</strong> 将物理内存静态划分为若干分区，分区大小不一定相等。</li><li><strong>可变分区（Variable Partitions）:</strong> 动态划分内存，根据进程需求动态分配。</li></ul></li><li><strong>非连续分配（Non-contiguous Allocation）:</strong><ul><li><strong>固定块（Paging）:</strong> 将内存划分为相等大小的块，可以在内存中分散，不一定是相邻的。</li><li><strong>可变块（Segmentation）:</strong> 将内存划分为可变大小的块，每个块内的地址仍然是连续的，但不同块之间的地址可以是非连续的。</li></ul></li></ol><p><strong>固定分区:</strong></p><ul><li><strong>单输入队列:</strong> 如果一个分区变为空闲，将其分配给下一个适合的等待队列中的进程。</li><li><strong>多输入队列:</strong> 新的进程放置在可以容纳它的最小分区的队列中。</li><li><strong>多输入队列 of 不同大小:</strong> 队列中的进程必须等待，直到其分区可用。</li></ul><p><strong>固定分区的优缺点:</strong></p><ul><li><strong>优势:</strong> 在批处理系统上实现简单且有效。Simple implementation and effective on batch system.</li><li>劣势:<ul><li>内部碎片化问题：由于分区大小固定，某个进程未使用的空间将会丢失。Internal fragmentation problem.</li><li>多输入队列可能导致性能大幅下降，因为大分区可能为空，但小分区可能队列已满。Loss of performance.</li><li>不考虑动态行为。Does not account for dynamic behaviour.</li></ul></li></ul><p><strong>可变分区:</strong></p><ul><li>优势: 可变分区允许更大的适应性。adaptability<ul><li>系统保留一个指示内存空闲部分的表。</li><li>进程的大小得到考虑，如果有足够的可用连续空间，则被分配。</li><li>分区的数量、位置和大小根据系统中运行的进程动态变化。</li></ul></li><li>缺点:<ul><li>外部碎片化问题：完成的进程可能会留下许多内存间隙。External fragmentation problem</li><li>对于新进程可能没有足够的自由连续内存，尽管碎片总量很大。这个问题可以通过压缩(compaction)来解决。</li></ul></li></ul><h3 id="分页技术-Paging"><a href="#分页技术-Paging" class="headerlink" title="分页技术 (Paging):"></a><strong>分页技术 (Paging):</strong></h3><p><strong>基本策略:</strong></p><ul><li>物理内存被划分为小而相等的固定大小块（称为帧）。</li><li>逻辑内存（即进程的地址空间）也被划分为与帧相同大小的块（称为页）。</li><li>为了执行一个进程，它的页从磁盘加载到可用的内存帧中，依赖于一个页表。</li></ul><p><strong>加载程序:</strong></p><ul><li>如果有足够的空闲帧，程序可以加载。</li><li>也可以只加载执行所需的几页（虚拟内存）。</li></ul><p><strong>分页技术的特点:</strong></p><ul><li><p>碎片化 (Fragmentation):</p><ul><li>内部碎片：仅为进程的最后一页的一小部分。</li><li>外部碎片：没有（不需要压缩）。</li></ul></li><li><p>每个逻辑地址（即CPU或进程地址）被分为两部分：</p><ul><li>页号和页内偏移。</li></ul></li><li><p>页的大小通常是2^n^（例如，512字节-16 MB）；如果逻辑地址空间的大小是2^m^，则：</p><ul><li>m - n位给出页号。</li><li>n位给出页内偏移。</li></ul></li><li><p>使用处理器硬件将逻辑地址转换为物理地址。</p><p><strong>分页硬件:</strong></p><p><strong>小型页表:</strong></p><ul><li>如果页表较小（例如，256个条目），可以使用专用寄存器来实现。 dedicated register</li></ul><p><strong>分页硬件优化:</strong></p><ul><li><p>页表通常很大，保存在主内存中，但这对于使用寄存器来说速度较慢。</p></li><li><p>为了提高性能，使用</p><p>转换查找缓冲器（TLB）</p><p>：</p><ul><li>TLB是一个关联高速内存，将一个键（标签）与一个值关联。</li><li>当提供一个键时，它会同时与所有键进行比较。</li><li>需要替换策）。</li><li>TLB的大小通常在64到1024个值之间。</li></ul></li></ul><p><strong>TLB的性能分析:</strong></p><ul><li>使用带有TLB的分页系统的性能分析可以通过<strong>命中比率</strong>完成，即页面号在TLB中找到的时间比例。</li><li>有效内存访问时间（Te）的计算公式：<ul><li>T<del>e</del> &#x3D; p × (T<del>t</del> + T<del>a</del>) + (1 − p) × (T<del>t</del> + 2T<del>a</del>)</li><li>p：命中概率（例如，如果命中比率为80%，则p &#x3D; 0.8）</li><li>T<del>t</del>：TLB访问时间</li><li>T<del>a</del>：内存访问时间</li></ul></li><li>TLB成本较高。</li></ul></li></ul><p><strong>总结:</strong> 分页技术通过将物理内存和逻辑内存划分为等大小的块来提供一种有效的内存管理方法。这可以减小内存碎片化，使程序更容易加载和运行。逻辑地址的划分和转换通过硬件支持，从而使得分页技术能够以较低的开销实现。</p><h3 id="分段技术（Segmentation"><a href="#分段技术（Segmentation" class="headerlink" title="分段技术（Segmentation)"></a>分段技术（Segmentation)</h3><p><strong>基本策略:</strong></p><ul><li>逻辑内存被划分为若干段，每个段的长度可能不同。</li><li>现在，逻辑地址由段号和段内偏移组成。</li><li>逻辑地址和物理地址之间有更复杂的关系。</li></ul><p><strong>分段技术特点:</strong></p><ul><li>与分页不同，分段是对程序员可见的。<ul><li>程序员通常将程序和数据分配给不同的段：主程序、堆栈、子程序、数据等。</li><li>程序员必须注意最大段限制。</li></ul></li><li>分段表中的条目包括段的基地址和限制寄存器。</li><li>将保护与段相关联。</li></ul><p><strong>分段技术的碎片化:</strong></p><ul><li><strong>内部碎片:</strong> 无。</li><li><strong>外部碎片:</strong> 没有解决，但比可变分区轻微，因为进程被分成的片段更小。</li></ul><p><strong>分段硬件:</strong></p><ul><li>逻辑地址翻译到物理地址需要硬件支持。</li><li>段表存储在内存中，包括每个段的基地址和限制寄存器。</li><li>段表通过段号进行索引，以查找对应的基地址和限制。</li></ul><p><strong>分页分段:</strong></p><p><strong>解决分段中的外部碎片问题:</strong></p><ul><li>一种解决方案是将分页与分段结合（例如，Intel 80x86 CPU）。</li></ul><p><strong>分页分段的优势:</strong></p><ul><li>减少外部碎片。Reduces external fragmentation</li><li>可用多个地址空间，指令可以具有较小的地址字段（不同段可以具有不同的地址空间大小）。</li><li>使用虚拟内存时（进程的一部分可以交换到磁盘上）：<ul><li>区分访问冲突和页面错误（页面不在内存中）。</li><li>可以逐步进行交换。</li></ul></li></ul><p><strong>分页分段的劣势:</strong></p><ul><li>更为复杂。</li><li>每个段需要一个页面表。A page table is needed per segment.</li></ul><p>外部碎片指的是分配给进程的内存空间中存在的、但由于空间分布不连续而不能被有效利用的未使用的小块内存。简而言之，外部碎片是内存中一些零散而无法合并的未使用空间。</p><p>在分配内存时，如果系统将可用内存分成多个不相邻的块，即使总内存足够，但由于这些块之间的隔离，可能导致一些小的、无法利用的空闲空间。这就是外部碎片的概念。</p><p>外部碎片可以导致系统难以找到足够大的内存块以满足某个进程的内存需求，即使系统的总体可用内存足够。</p><p><strong>总结:</strong> 分段技术将逻辑内存划分为不同长度的段，对程序员可见。每个段都有自己的基地址和限制，与保护相关。虽然分段技术在内部没有碎片，但在外部可能存在碎片，这需要由程序员来管理。分段技术对于特定类型的应用程序和编程模型可能更为适用。</p><h1 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h1><p><strong>概述:</strong></p><ul><li>虚拟内存是由系统硬件和软件支持的一种假象，即一个进程具有一个庞大且线性的可用内存空间（比主内存单元大得多）。</li><li>使用虚拟内存，主内存可以被视为磁盘的高速缓存(cache)。</li><li>在虚拟内存的上下文中，逻辑地址也被称为虚拟地址。</li></ul><p><strong>实际程序和虚拟内存:</strong></p><ul><li><p>实际程序通常可以分为两部分：</p><ol><li><p>经常需要的部分。</p></li><li><p>很少或从不需要的部分：</p><ul><li><p>处理异常错误条件的代码。</p></li><li><p>处理很少使用的选项和功能的代码。</p></li><li><p>分配超过严格需求的内存的代码（数组、表等）。</p></li></ul></li></ol></li><li><p>程序内的内存引用往往是聚集的（引用局部性原理）。Memory references within a program tend to be clustered.</p></li></ul><h2 id="虚拟内存的优势"><a href="#虚拟内存的优势" class="headerlink" title="虚拟内存的优势:"></a><strong>虚拟内存的优势:</strong></h2><ul><li>VM通过将进程的一部分放置在主内存中，一部分放置在磁盘上，以实现更大的地址空间，从而提供了一种吸引人的方案。</li><li>VM的核心是延迟加载。</li></ul><p><strong>1. 超越物理内存限制:</strong> (Programs are not limited by the physical memory space )</p><ul><li>程序不受物理内存空间的限制。</li><li>可以根据虚拟地址空间的允许范围，使程序变得更大：</li><li>Save funding</li></ul><p><strong>2. 更好的多道程序设计(Better multiprogramming):</strong></p><ul><li>可以同时执行更多进程。</li><li>进程可能处于ready状态（CPU利用率: 1 - p^n^）。</li></ul><p><strong>3. 减少I&#x2F;O需求:</strong></p><ul><li>加载程序或交换程序时需要的I&#x2F;O更少。</li><li>increse CPU utilisation and throughput。</li></ul><h2 id="虚拟内存的特点"><a href="#虚拟内存的特点" class="headerlink" title="虚拟内存的特点:"></a><strong>虚拟内存的特点:</strong></h2><ul><li>VM is Implemented by demand paging.<ul><li>Only a few pages are bring into main memory.</li></ul></li></ul><p><strong>虚拟内存的支持:</strong></p><ul><li><p>VM  system supported in hardware</p><ul><li>Paging mechanism.(generate page faults)</li></ul></li><li><p>In software</p><ul><li>Page swapping management.</li></ul></li><li><p>在硬件中支持虚拟内存的系统使用<strong>分页机制</strong>，当引用磁盘中的页面时生成页错误。</p></li><li><p>在软件中，需要进行<strong>页面交换管理</strong>，由操作系统的算法支持。</p></li></ul><h2 id="带有按需分页的页表"><a href="#带有按需分页的页表" class="headerlink" title="带有按需分页的页表:"></a><strong>带有按需分页的页表:</strong></h2><p><strong>对页表条目的添加:</strong></p><ul><li><p>存在位（Present Bit）:</p><p> 如果页面在主内存中，将该位设置为1。</p><ul><li>当引用不在主内存中的页面时，会生成中断（页错误）。</li></ul></li><li><p>修改位（Modified Bit）:</p><p> 如果页面在上次加载到主内存后已更改，将该位设置为1。</p><ul><li>如果页面未更改，则在交换出去时无需写入磁盘。</li></ul></li><li><p>控制位:</p><ul><li><strong>读&#x2F;写页面（Read&#x2F;Write Page）:</strong> 可以由两个或多个进程共享的只读页面。</li><li><strong>内核&#x2F;用户页面（Kernel&#x2F;User Page）:</strong> 内核页面可以被强制一直保存在内存中。</li></ul></li></ul><p><strong>按需分页的页表工作方式:</strong></p><ul><li>如果页面在内存中，页表中相应的条目包含<strong>帧号</strong>。</li><li>如果页面在磁盘中，页表中相应的条目包含<strong>磁盘中的地址或指向表的索引</strong></li></ul><h2 id="缺页中断处理"><a href="#缺页中断处理" class="headerlink" title="缺页中断处理"></a>缺页中断处理</h2><p>3 major steps:</p><p><strong>1. 服务缺页中断(service the page-fault interrput):</strong></p><ul><li>陷入到操作系统（trap to the OS）。</li><li>保存寄存器和进程状态(save registers and process state)。</li><li>检查页面引用是否合法，并确定其在磁盘上的位置。</li></ul><p><strong>2. 读入缺失的页面 (read in the missing page):</strong></p><ul><li>从磁盘读入缺失的页面到一个空闲帧（free frame）。</li><li>由于这是一个I&#x2F;O操作（较慢），另一个准备好的进程被分派到CPU。</li><li>最终，来自磁盘的中断被发出（I&#x2F;O完成）。</li></ul><p><strong>3. 重新启动进程:</strong></p><p>页面加载完成后，进程可以被重新启动：</p><ul><li>来自磁盘的中断表示页面已在内存中。</li><li>这时，进程可以切换到准备就绪状态。</li><li>最终，进程再次被调度，从中断处恢复执行。</li></ul><h2 id="缺页和性能"><a href="#缺页和性能" class="headerlink" title="缺页和性能:"></a><strong>缺页和性能:</strong></h2><p><strong>将缺页保持在最低限度:</strong></p><ul><li>缺页中断会对系统性能产生重大影响</li><li>有效内存访问时间（T<del>e</del>）的计算方式为：<ul><li>T<del>e</del> &#x3D; p x T<del>f</del> + (1 - p) x T<del>a</del></li><li>其中：<ul><li>T<del>f</del>: 缺页中断时间（处理缺页中断的时间）</li><li>T<del>a</del>: 内存访问时间</li><li>p: 页面错误的概率</li></ul></li></ul></li></ul><p><strong>性能影响:</strong></p><ul><li>缺页中断时间（Tf）通常比内存访问时间（Ta）高出数个数量级（例如，10毫秒与100纳秒）。</li><li>因此，即使缺页的概率很低，也可能显著提高有效内存访问时间（Te）。</li></ul><h3 id="磁盘抖动-thrashing-和多道程序设计"><a href="#磁盘抖动-thrashing-和多道程序设计" class="headerlink" title="磁盘抖动(thrashing)和多道程序设计"></a>磁盘抖动(thrashing)和多道程序设计</h3><p><strong>磁盘抖动的问题:</strong></p><ul><li><strong>磁盘抖动（Thrashing）</strong> 是指系统花费大量时间在页面置换上而不是执行实际工作，导致系统性能急剧下降。</li><li>磁盘抖动通常发生在系统试图维护过多进程时，导致它们的页面频繁地在内存和磁盘之间交换。</li></ul><p><strong>为避免磁盘抖动，需要采取负载控制措施(load control):</strong></p><p>示例:</p><ul><li>只执行其驻留集足够大的进程。</li><li>调整有效多道程序设计的程度，使缺页中断间隔的平均时间等于目标值（根据需要暂停进程）。</li></ul><p><strong>负载控制的目的:</strong></p><ul><li>避免系统陷入磁盘抖动状态，提高系统性能。</li><li>通过智能地选择执行的进程，以及动态调整多道程序设计的程度，系统可以更有效地利用资源，避免频繁的页面置换。</li></ul><h2 id="虚拟内存中的内存管理"><a href="#虚拟内存中的内存管理" class="headerlink" title="虚拟内存中的内存管理"></a>虚拟内存中的内存管理</h2><p>在具有虚拟内存的系统中，操作系统主要处理两个内存管理问题：</p><p><strong>1. 替换策略 (Replacement Policy):</strong></p><ul><li>当发生页面错误并且没有空闲帧可将页面换入时，操作系统必须选择一个帧进行替换（交换到磁盘上），以便将新页面带入。</li><li>页面替换策略通常受到一些限制：<ul><li>操作系统内核和控制结构的大部分通常存储在锁定的帧上（不能替换）。</li></ul></li></ul><p><strong>2. 驻留集管理 (Resident Set Management):</strong></p><ul><li>动态或静态为每个活动进程选择帧的数量。</li><li>允许的替换类型的选择，例如：<ul><li>限制为导致页面错误的进程的页面。</li><li>包括主存储器中的任何帧。</li></ul></li></ul><h4 id="替换策略"><a href="#替换策略" class="headerlink" title="替换策略"></a>替换策略</h4><p><strong>良好的替换策略应利用引用局部性原则:</strong></p><ul><li>引用局部性是指程序在一段时间内更有可能引用最近访问的页面。</li><li>如果内存引用是随机的而不是局部化的，我们将无法有效地确定工作集。</li></ul><p><strong>替换算法:</strong></p><ol><li>Optimal (最佳):<ul><li>替换最长时间内不会被引用的页面。(Replaces the page that will not be referenced for the longest period of time)</li><li>具有最小数量的页面错误，但不可能实现（需要未来事件的信息）。</li><li>用作衡量其他算法的标准。</li></ul></li></ol><p><strong>Optimal算法的例子:</strong></p><ul><li>Optimal算法会在每次页面错误时替换最长时间内不会被引用的页面。</li></ul><p><img src="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/image-20231123220230748.png" alt="image-20231123220230748"></p><ol start="2"><li>LRU(least recently used)<ul><li>替换长时间没被使用的页面</li><li>根据**(locality)**，未来一段时间这个页也不会被使用</li><li>较难实现，由于Time costing</li></ul></li></ol><p><img src="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/image-20231123220827489.png" alt="image-20231123220827489"></p><ol start="3"><li>FIFO<ul><li>使用指针，以循环的方式替换页面</li><li>很久以前获得的页面可能不再使用</li><li>较易实现，但替换效果不好</li></ul></li></ol><p><img src="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/image-20231123221558256.png" alt="image-20231123221558256"></p><p>指针所指的页面被替换，同时指针移动。</p><p>若无替换页面则指针不移动。</p><ol start="4"><li><p>Clock policy</p><ul><li>FIFO的变体</li></ul><h3 id="算法原理："><a href="#算法原理：" class="headerlink" title="算法原理："></a>算法原理：</h3><ol><li><strong>初始化：</strong> 每个页面帧都有一个使用位，初始化为0。此外，有一个指向页面帧的指针，通常初始化为0。</li><li><strong>页面引用：</strong> 当一个页面被引用或者首次加载到内存时，该页面的使用位被设置为1，表示它已经被访问过。</li><li><strong>页面置换：</strong> 当需要进行页面置换时，操作系统开始遍历页面帧。</li><li><strong>遍历过程：</strong> 遍历是一个循环过程，类似于时钟的指针在表盘上的移动。指针顺时针地遍历所有页面帧。</li><li><strong>选择页面帧：</strong> 对于每个页面帧，检查其使用位。如果使用位为1，表示该页面最近被访问过，将其使用位设置为0，并移动指针到下一个页面帧。如果使用位为0，表示该页面较长时间没有被访问，选择该页面进行置换。</li><li><strong>更新使用位：</strong> 在遍历的过程中，使用位为1的页面会在检查后被设置为0，以模拟它们的访问。</li><li><strong>置换页面：</strong> 一旦选择了要置换的页面，操作系统将新页面加载到该页面帧中，并将其使用位设置为1。</li><li><strong>继续遍历：</strong> 遍历继续，直到找到要置换的页面为止。</li></ol></li></ol><p><img src="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/image-20231123224117942.png" alt="image-20231123224117942"></p><h4 id="页面大小的选择"><a href="#页面大小的选择" class="headerlink" title="页面大小的选择"></a><strong>页面大小的选择</strong></h4><p>小页面的优势：</p><ul><li>Memory is better</li><li>improve locality</li></ul><p>大页面的优势：</p><ul><li>I&#x2F;O transfer time is small</li></ul><h4 id="页表的结构"><a href="#页表的结构" class="headerlink" title="页表的结构"></a><strong>页表的结构</strong></h4><p>存在的问题: 页表占用大部分内存</p><ul><li>2^m-n^ entries be required for m-bit long virtual address with n page offset bits.</li><li>Ex: with <em>m &#x3D;32</em> and 4 KB page size -&gt; 2^20^</li></ul><p>Solution:</p><ul><li>hierarchical paging (分层页)</li><li>inverted page table(倒页表)</li></ul><h5 id="分层页"><a href="#分层页" class="headerlink" title="分层页"></a>分层页</h5><p>Drawback: the time to convert a virtual address into a physical one is longer</p><h5 id="倒页表"><a href="#倒页表" class="headerlink" title="倒页表"></a>倒页表</h5><h1 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h1><p>文件管理是操作系统中的一个关键方面，涉及对计算机上存储的数据进行组织和控制。当一个进程需要存储超出其即时运行时间的信息时，它利用文件管理系统来存储和检索数据。</p><h2 id="进程在地址空间中储存信息面临的问题："><a href="#进程在地址空间中储存信息面临的问题：" class="headerlink" title="进程在地址空间中储存信息面临的问题："></a>进程在地址空间中储存信息面临的问题：</h2><ol><li>易失性(Volatility)</li></ol><ul><li>当一个进程终止时，其地址空间中存储的所有数据通常都会丢失。这是因为地址空间被释放，其中存储的任何信息都不再可访问。</li></ul><ol start="2"><li><p>信息共享</p><p><strong>进程</strong>通常需要与其他进程共享信息，特别是当它们的生命周期不重叠时。</p><p><strong>文件管理系统</strong>提供了持久存储的机制，允许数据被写入文件并被其他进程读取，即使它们在不同的时间执行。</p></li><li><p>有限的储存大小</p><p><strong>进程</strong>地址空间有限，将大量数据存储在地址空间内可能并不实际。</p><p><strong>文件系统</strong>通过提供一个持久且较大的存储空间</p></li></ol><h2 id="解决：创建文件储存进程的信息"><a href="#解决：创建文件储存进程的信息" class="headerlink" title="解决：创建文件储存进程的信息"></a>解决：创建文件储存进程的信息</h2><ol><li><strong>创建文件：</strong></li></ol><ul><li>为了存储信息，可以为每个进程创建一个文件。文件是一种被命名的数据集合，通常保存在持久性的二级存储设备上，比如硬盘、CD&#x2F;DVD、固态硬盘、磁带等。</li></ul><ol start="2"><li>文件基本操作</li></ol><ul><li>文件可以被看作是一个单元，可以执行各种基本操作，如打开（open）、关闭（close）、创建（create）、销毁（destroy）、复制（copy）、重命名（rename）、列出（list）等。这些操作使得系统能够有效地管理文件，进程可以根据需要对文件进行操作。</li></ul><ol start="3"><li>文件的单个数据操作</li></ol><ul><li>除了对整个文件的基本操作外，文件内的个别数据项也可以被操作。这包括读取（read）、写入（write）、更新（update）、插入（insert）、删除（delete）等操作。这些操作允许进程以单元的方式操作文件内的数据，从而满足不同的信息存储和检索需求。</li></ul><h2 id="数据层次结构-Data-Hierarchy"><a href="#数据层次结构-Data-Hierarchy" class="headerlink" title="数据层次结构(Data Hierarchy)"></a>数据层次结构(Data Hierarchy)</h2><ol><li><strong>最低层级：位 (Bits)</strong><ul><li>位是信息的最基本单元，表示数据的最小单元，可以是0或1。</li></ul></li><li><strong>中等层级：固定长度的位模式</strong><ul><li><strong>字节（Byte）：</strong> 通常由8个位组成，是计算机中常见的存储单元。</li><li><strong>字（Word）：</strong> 字的长度取决于计算机体系结构，可以是8、16、32或64位。</li><li><strong>字符（Character）：</strong> 将字节、字或字组映射到语义符号（如ASCII码、Unicode等）的表示方式。</li><li><strong>字段（Field）：</strong> 字符的组合，通常表示一个特定的数据项。</li><li><strong>记录（Record）：</strong> 一组字段的集合，表示一个完整的数据项。</li><li><strong>文件（File）：</strong> 一组相关记录的集合，通常代表某种数据的完整集合。</li></ul></li><li><strong>最高层级：文件系统或数据库</strong><ul><li><strong>文件系统：</strong> 用于组织和管理文件的系统，提供了文件和目录的层次结构，允许用户和程序访问和操作数据。</li><li><strong>数据库：</strong> 一组相互关联的数据表，通过数据表之间的关系来组织和存储数据，提供了更高级别的数据管理和检索功能。</li></ul></li></ol><h3 id="Volume"><a href="#Volume" class="headerlink" title="Volume"></a>Volume</h3><ul><li><p>卷是一个包含文件系统的单元，这个单元通常是一个辅助储存系统。硬盘驱动器，SSD.</p></li><li><p><strong>物理卷：</strong> 实际的硬件存储设备，如硬盘驱动器。物理卷是数据存储的物理实体。</p></li><li><p><strong>逻辑卷：</strong> 是在物理卷上创建的文件系统或数据集的逻辑表示。逻辑卷通过文件系统的管理，将物理存储划分成可管理的单元，使用户和应用程序能够方便地访问和使用存储。</p></li></ul><h3 id="Files"><a href="#Files" class="headerlink" title="Files"></a>Files</h3><p>文件是存储在计算机系统中的一组数据，可以包含文本、图像、程序代码等。</p><p>Record &amp; Block 是数据的基本单元。记录可以包含各种类型的信息例如，在数据库中，记录可以是一个数据表中的一行。</p><ul><li><strong>物理记录：</strong> 是最小的可以从或写入硬件存储设备的信息单元。这是硬件层面的定义，表示实际的存储单位。</li><li><strong>逻辑记录：</strong> 是在软件层面上定义的数据单元，通常包含一定数量的物理记录。逻辑记录是按照应用程序的需要进行定义的，使得处理数据更加方便和高效。</li><li>Block: Record 通常被组织成 Block. 文件系统通常以块为单位来读取和写入数据，这有助于提高效率，减少对存储设备的访问次数。</li></ul><h4 id="Example-in-Unix-amp-Windows"><a href="#Example-in-Unix-amp-Windows" class="headerlink" title="Example in Unix &amp; Windows"></a>Example in Unix &amp; Windows</h4><ul><li>Unix 和 Windows 文件实际上是字节的序列，在物理上分组成块。</li><li>字节被视为逻辑记录，而块则是物理记录。</li></ul><h4 id="文件特性"><a href="#文件特性" class="headerlink" title="文件特性"></a>文件特性</h4><p><strong>位置</strong></p><p>文件储存在物理储存设备或文件系统的逻辑结构中。</p><ul><li><strong>物理位置：</strong> 文件实际存储在硬盘、固态硬盘等物理存储设备上。</li><li><strong>逻辑结构：</strong> 文件系统提供了一个逻辑结构，用户和应用程序通过这个结构访问文件，而不必关心文件在物理设备上的确切位置。</li></ul><p><strong>大小与类型</strong></p><p><strong>可访问性</strong></p><ul><li><p>文件的可访问性涉及对数据施加的访问限制。</p></li><li><p><strong>Owner Information（所有者信息）：</strong> 文件通常有一个所有者，该所有者是创建或拥有文件的用户。这有助于确定文件的控制和权限。</p></li><li><p>Read &#x2F; Write &#x2F; Execute Status（读&#x2F;写&#x2F;执行状态）：</p><p> 文件系统通过这些状态来确定用户或进程对文件的访问权限。</p><ul><li><strong>读取（Read）：</strong> 用户或进程有权读取文件的内容。</li><li><strong>写入（Write）：</strong> 用户或进程有权修改文件的内容。</li><li><strong>执行（Execute）：</strong> 仅适用于可执行文件，允许用户或进程执行文件中的程序。</li></ul></li></ul><p><strong>设备独立性</strong></p><p><strong>恢复或备份功能</strong></p><p><strong>可选的加密功能</strong></p><h4 id="目录-Directories"><a href="#目录-Directories" class="headerlink" title="目录(Directories)"></a>目录(Directories)</h4><p>为了组织和快速定位文件，文件系统使用目录：</p><ol><li><p><strong>目录的定义：</strong></p><ul><li>目录是特殊的文件，其中包含其他文件的名称和位置信息。</li></ul></li><li><p><strong>目录项（Directory Entries）:</strong></p><ul><li>目录中的每个文件都由目录项表示，目录项包含诸如文件名、位置（物理块地址或在文件系统中的逻辑位置）、大小和类型、访问、修改和创建时间等信息字段。</li></ul></li><li><p><strong>目录结构：</strong></p><ul><li><p>单层目录（Single-level or Flat File System）:</p><ul><li>这是最简单的文件系统组织形式，所有文件都存储在一个目录中。</li><li>不存在两个文件可以具有相同的名称。</li><li>文件系统必须对目录内容执行线性搜索，以定位每个文件，这可能导致性能不佳。</li></ul></li><li><p>分层目录(Hierarchical FS):</p><ul><li><p>根目录(Root Directory) 作为文件结构的起点，位于储存设备上。</p></li><li><p>嵌套结构</p><p>目录可以包含文件和其他目录，形成嵌套的结构。这意味着目录可以包含子目录，而子目录本身也可以包含文件或更多的子目录，从而形成一个层次结构。</p></li></ul></li><li><p>父目录和子目录</p></li></ul></li></ol><h4 id="绝对路径与相对路径"><a href="#绝对路径与相对路径" class="headerlink" title="绝对路径与相对路径"></a>绝对路径与相对路径</h4><p>在同一目录下不能有两个文件具有相同的名称。</p><p><strong>绝对路径：</strong></p><ul><li>绝对路径是文件名包括从根目录开始的完整路径。这样的路径提供了文件在整个文件系统中的确切位置。</li><li>在Unix系统中，例如：<code>/etc/modules/file.txt</code> 是一个绝对路径，其中 <code>/</code> 表示根目录。</li><li>在Windows系统中，例如：<code>C:\users\admin\file.txt</code> 是一个绝对路径，其中 <code>C:\</code> 是根目录。</li></ul><p><strong>绝对路径：</strong></p><ul><li>绝对路径是文件名包括从根目录开始的完整路径。这样的路径提供了文件在整个文件系统中的确切位置。</li><li>在Unix系统中，例如：<code>/etc/modules/file.txt</code> 是一个绝对路径，其中 <code>/</code> 表示根目录。</li><li>在Windows系统中，例如：<code>C:\users\admin\file.txt</code> 是一个绝对路径，其中 <code>C:\</code> 是根目录。</li></ul><h4 id="链接-Link"><a href="#链接-Link" class="headerlink" title="链接(Link)"></a>链接(Link)</h4><ol><li><strong>链接的作用：</strong><ul><li>链接允许在文件系统中建立引用，指向其他目录或文件，促进了数据共享和访问。</li></ul></li><li><strong>链接的类型：</strong><ul><li><strong>软链接（Soft Link）：</strong> 也称为符号链接，包含文件的路径名，即逻辑名称。软链接创建一个指向目标文件或目录的符号链接，允许在文件系统中创建一个别名，而不是实际的副本。</li><li><strong>硬链接（Hard Link）：</strong> 包含文件在存储设备上的物理位置，通常是一个块号。硬链接创建一个指向文件数据块的额外链接，多个链接指向同一份实际数据。</li></ul></li><li><strong>链接与目录结构：</strong><ul><li>链接使我们能够将分层结构转化为：<ul><li><strong>非循环结构（Acyclical Structures）：</strong> 允许目录具有两个不同的父目录。</li><li><strong>循环结构（Cyclical Structures）：</strong> 允许目录形成环，即一个目录可能是另一个目录的父目录，同时也可能是该目录的子目录。</li></ul></li></ul></li><li><strong>链接中包含的内容：</strong><ul><li><strong>软链接：</strong> 包含文件的逻辑路径名。</li><li><strong>硬链接：</strong> 包含文件在存储设备上的物理位置，通常是块号。</li></ul></li></ol><h3 id="元数据-Metadata"><a href="#元数据-Metadata" class="headerlink" title="元数据(Metadata)"></a>元数据(Metadata)</h3><p>元数据是指文件系统本身的信息，它使得文件系统能够正常运作并保护其完整性。与用户数据不同，元数据是关于数据的数据</p><ol><li><strong>文件和目录的元数据：</strong><ul><li>文件名</li><li>文件大小</li><li>文件类型</li><li>文件创建时间、最后访问时间、最后修改时间</li><li>文件权限和所有者信息</li><li>文件所在的物理块地址或逻辑位置</li></ul></li><li><strong>文件系统的元数据：</strong><ul><li>文件系统的结构信息，如目录的组织方式，目录和文件的关系等。</li><li>存储空间的管理信息，包括空闲块和已分配块的跟踪。</li></ul></li></ol><h3 id="超级块-Superblock"><a href="#超级块-Superblock" class="headerlink" title="超级块(Superblock)"></a>超级块(Superblock)</h3><p>文件系统创建超级块来存储关键的元数据.</p><p>超级块通常包含以下信息：</p><ol><li><strong>文件系统类型的唯一标识符：</strong><ul><li>用于确定文件系统的类型，例如EXT4、NTFS等。</li></ul></li><li><strong>根目录的位置：</strong><ul><li>指示文件系统中根目录的位置，从而使系统能够准确地开始检索文件和目录。</li></ul></li><li><strong>文件系统中块的数量：</strong><ul><li>描述整个文件系统的大小，以块为单位。</li></ul></li><li><strong>辅助设备上可用空闲块的位置：</strong><ul><li>记录在文件系统中哪些块是可用的，以便在需要时分配给新文件或扩展现有文件。</li></ul></li><li><strong>健全性检查状态、上次修改时间等：</strong><ul><li>用于确保超级块的完整性和文件系统的一致性。这包括上次修改超级块的时间戳以及其他状态信息。</li></ul></li></ol><h1 id="保护与安全"><a href="#保护与安全" class="headerlink" title="保护与安全"></a>保护与安全</h1><h2 id="保护"><a href="#保护" class="headerlink" title="保护"></a>保护</h2><p>Protection involves controlling the access of programs,processes, or users to the resources defined by a computer system. These resources include filed, memory segments(内存段), CPU.</p><ul><li>保护是实现计算机系统安全性的必要条件</li></ul><p><strong>保护目标</strong></p><ul><li><p><strong>Preventing Mischievous&#x2F;Intentional Violation of Access</strong></p><p>区分资源的授权使用与非授权使用</p></li><li><p><strong>Ensuring Consistency with OS Policies (Reliability)</strong></p><p>子系统之间接口的错误检测。子系统是操作系统中执行特定功能的组件。通过检测接口上的错误，系统可以防止问题从一个子系统传播到另一个子系统。</p></li></ul><h3 id="计算机系统中保护的形式化模型"><a href="#计算机系统中保护的形式化模型" class="headerlink" title="计算机系统中保护的形式化模型"></a><strong>计算机系统中保护的形式化模型</strong></h3><ol><li><p>对象(Objects):</p><ul><li><p>对象是需要访问控制的实体</p><p>hardware: CPU, memory segments, printers.<br>software: files, semaphores.</p></li></ul></li><li><p>主体(Subjects):</p><p>主体是访问对象的实体，可以是进程（processes）、用户等。主体是系统中的活动实体，它们需要执行操作并访问对象。</p></li><li><p>规则(Rules):</p><p>规则定义了主体如何访问对象的方式。例如，对于<strong>CPU</strong>，规则可以涉及执行指令；对于<strong>内存</strong>，规则可能包括读取或写入；而对于<strong>文件</strong>，规则可能包括读取、写入或执行等操作。</p></li></ol><h3 id="保护的原则"><a href="#保护的原则" class="headerlink" title="保护的原则"></a>保护的原则</h3><p><strong>仅允许进程访问经过授权的资源：</strong></p><ul><li>这个原则确保一个进程只能访问它被明确授权的资源。</li></ul><p><strong>仅允许进程访问其当前任务所需的资源：需要知道原则（或最小特权原则）：</strong></p><ul><li>这个原则表明一个进程只能访问它当前任务所需的资源，以限制由于故障进程导致的潜在损害。</li></ul><h3 id="保护域-Domain-of-Protection"><a href="#保护域-Domain-of-Protection" class="headerlink" title="保护域(Domain of Protection)"></a>保护域(Domain of Protection)</h3><p>保护域指定了一个进程可以访问的资源。在计算机系统中，这是一种用于限定进程访问权限的概念。</p><p><code>&lt;object-name, right-set&gt;</code><br>其中:</p><ul><li><code>object-name</code> 表示资源的名称，例如文件名或其他系统对象的标识。</li><li><code>right-set</code> 是一组权限或操作集合，表示了进程对这个资源所具有的操作权限。这可以包括读、写、执行等操作。</li></ul><p>例如，形式化定义可以表示为 <code>D = &lt;file F, &#123;read, write&#125;&gt;</code>，这表示保护域 <code>D</code> 中的任何进程都可以对文件 <code>F</code> 进行读取和写入的操作。</p><h3 id="OS-保护"><a href="#OS-保护" class="headerlink" title="OS 保护"></a>OS 保护</h3><p>OS保护指的是执行管理系统资源使用规则的机制。这些规则由管理员、用户等设定，用于指导系统中各个组件对资源的使用。</p><p>一般性的机制更为可取，因为不同地方或不同时期的规则可能会发生变化。这意味着系统设计时应尽量采用通用的、不易受到特定规则变动影响的保护机制。</p><h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><p><strong>恶意安全威胁：</strong></p><ul><li>未经授权读取数据、信息窃取，或者流量分析（属于被动威胁(passive threats)，影响数据的保密性）。</li><li>未经授权破坏、篡改或伪造数据（属于主动威胁(active threats)，影响数据的完整性或真实性）。</li><li>阻止系统的合法使用（属于主动威胁，影响系统的可用性）。</li></ul><p><strong>意外安全威胁:</strong></p><ul><li>人为错误，例如误删除文件或配置错误。</li><li>硬件或软件错误，例如操作系统故障或应用程序错误。</li><li>自然灾害，例如火灾、水灾等不可预测的自然事件。</li></ul><h3 id="攻击分类"><a href="#攻击分类" class="headerlink" title="攻击分类"></a><strong>攻击分类</strong></h3><ul><li><p>强制系统调用(伪造攻击 fabrication attack)</p><ul><li>尝试非法的系统调用，或者使用非法参数进行合法系统调用.</li></ul></li><li><p>Examining memory information(机密性攻击 confidentiality attack) </p><ul><li>一些系统在分配内存之前未清除相应空间，这可能导致机密信息泄漏。攻击者可能通过检查未清除的内存信息来获取敏感数据</li></ul></li><li><p>Denial of service(availability attack)</p><ul><li>拒绝服务攻击旨在通过合法但是不断闲置的指令过载计算机，使其无法执行有用的任务。这种攻击旨在削弱系统的可用性，使其难以提供正常服务。</li></ul></li></ul><h3 id="用户认证"><a href="#用户认证" class="headerlink" title="用户认证"></a>用户认证</h3><ul><li>User authentication is the first line of security</li><li>如果没有通过认证进入系统，许多攻击不可能发生</li></ul><p>认证方式</p><ul><li>user knowledge (user identifier and password); most common</li><li>user possession (key or smart card)</li><li>user attributes (biometrics)</li></ul><p><strong>密码</strong></p><ol><li><p><strong>密码作为能力（密钥）：</strong></p><ul><li>将密码视为一种能力或密钥。在计算机安全术语中，密码通常是用于验证用户身份的机制，相当于一种访问权限。</li></ul></li><li><p><strong>密码的潜在脆弱性：</strong></p><ul><li>密码可能面临以下潜在脆弱性：<ul><li><strong>被猜测：</strong> 攻击者可能通过尝试不同的密码组合来猜测用户的密码。</li><li><strong>被暴露或嗅探：</strong> 密码在传输或存储过程中可能被暴露或被嗅探到，导致泄露。</li><li><strong>非法传输：</strong> 攻击者可能通过非法手段传输密码，例如中间人攻击（Man-in-the-Middle）。</li></ul></li></ul></li><li><p><strong>安全的密码应该：</strong></p><ul><li><p>强大：</p><p> 强密码具有足够的复杂性，使得通过暴力破解攻击变得更加困难。强密码的特征包括：</p><ul><li>长度足够，以避免暴力破解攻击。</li><li>不常见或明显，即不与自然语言相关，以避免攻击者使用字典攻击。</li></ul></li><li><p><strong>定期更改：</strong> 定期更改密码可以降低密码被非法使用或拦截的可能性</p></li></ul></li></ol><p>*<em>密码强度</em></p><ol><li><strong>长度：</strong><ul><li>密码长度对密码强度有显著影响。具体而言，对于长度为 n 字节的密码，可能的不同密码组合数为 2^(8n)。</li><li>因此，增加密码长度会显著提高密码的强度，因为攻击者需要尝试更多的可能组合。</li></ul></li><li><strong>频率：</strong><ul><li>密码的强度还受到其在使用中的频率影响。如果密码很少被使用，攻击者在尝试猜测时会面临更大的不确定性，这使密码更为强大。</li></ul></li><li><strong>熵：</strong><ul><li>熵是对密码强度的一种严格的度量。它衡量了密码中包含的信息的不确定性。</li><li>如果密码中包含常见词语，攻击者可以使用字典攻击，只需检查几千个常见密码，而不必尝试所有可能的组合。</li></ul></li></ol><p><strong>密码保护措施</strong></p><ol><li><strong>限制登录次数&#x2F;频率：</strong><ul><li>通过限制用户登录的次数或频率，系统可以减少暴力破解攻击的风险。例如，可以实施登录失败的计数和锁定机制，以防止攻击者通过尝试多个密码来猜测正确的密码。</li></ul></li><li><strong>对密码文件进行访问控制：</strong><ul><li>限制对存储密码的文件的访问是一种基本的安全措施。然而，如果入侵者通过某种漏洞访问密码文件，这种措施就不足以提供完整的保护。</li></ul></li><li><strong>加密密码文件：</strong><ul><li>通过对密码文件进行加密，即存储加密后的密码散列（例如使用哈希函数 f(p)），可以增加密码的安全性。即使攻击者能够访问密码文件，也很难还原出原始密码。</li><li>但是，如果使用公共的哈希函数，攻击者仍然可能使用加密字典攻击来破解密码。</li></ul></li><li><strong>使用盐值（Salting）：</strong><ul><li>为了防止加密字典攻击，可以引入盐值，即在原始密码前添加一些随机字符，再进行加密。这使得相同密码在加密后的形式也是不同的，即使密码相同，由于盐值的不同，最终的哈希值也不同。</li><li>盐值的使用有效地增加了攻击者进行搜索的空间，提高了破解密码的难度。</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>Stage2</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Find next bigger/smaller number</title>
    <link href="/2023/06/17/Stage1/findNextbiggest/"/>
    <url>/2023/06/17/Stage1/findNextbiggest/</url>
    
    <content type="html"><![CDATA[<h1 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h1><p>给定一个数，组成数字可任意排列组合，找出比这个数大一点或小一点的数。例如：给定231。大一点的数是312，小一点的数是132</p><h1 id="原题重现"><a href="#原题重现" class="headerlink" title="原题重现"></a>原题重现</h1><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs tex">Suppose we have a 10 digit number 2139548760 stored in a list like this<br>[ 2, 1, 3, 9, 5, 4, 8, 7, 6, 0 ]<br><br>we can rearrange the digits to get the next highest number using those digits. This would give us<br>this<br>[ 2, 1, 3, 9, 5, 6, 0, 4, 7, 8 ]<br><br>We could also rearrange the digits to get the next lowest number using those digits. This would<br>give us this<br>[ 2, 1, 3, 9, 5, 4, 8, 7, 0, 6 ]<br><br>Write a program that reads in a 10 digit number and store the digits in a list.<br><br>Then the program asks the user to choose whether they want the next highest number or the next<br>lowest number.<br><br>The user chooses which one they want and the program rearranges the list to produce what they<br>want.<br><br>Finally the program prints out the 10 digit number that the user wanted.<br></code></pre></td></tr></table></figure><p>#实现思路：（待补充）</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">swap</span>(<span class="hljs-params">lst, index1, index2</span>):<br>                               <span class="hljs-comment"># function to swap elements at given indices in a list</span><br>    temp = lst[index1]<br>    lst[index1] = lst[index2]<br>    lst[index2] = temp<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">selection_sort</span>(<span class="hljs-params">given_list, length, start_index</span>):<br>                               <span class="hljs-comment"># function to perform selection sort on a sublist of given_list starting from start_index</span><br>    i = start_index<br>    <span class="hljs-keyword">while</span> i != length:<br>        j = i<br>        min_index = i<br>        <span class="hljs-keyword">while</span> j != length :<br>            <span class="hljs-keyword">if</span> given_list[j] &lt; given_list[min_index]:<br>                min_index = j<br>            j = j + <span class="hljs-number">1</span><br>        swap(given_list, i, min_index)<br>        i = i + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> given_list<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_list</span>(<span class="hljs-params">n</span>):<br>                                  <span class="hljs-comment"># function to convert an integer into a list of its digits</span><br>    i = <span class="hljs-number">9</span><br>    lst=[<span class="hljs-number">0</span>] * <span class="hljs-number">10</span><br>    <span class="hljs-keyword">while</span> i != -<span class="hljs-number">1</span>:<br>        lst[i] = <span class="hljs-built_in">int</span>(n % <span class="hljs-number">10</span>)<br>        n = n // <span class="hljs-number">10</span><br>        i = i - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> lst<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">highest_digits</span>(<span class="hljs-params">lst</span>):<br>                                     <span class="hljs-comment"># function to find the next highest number</span><br>    i = <span class="hljs-number">9</span><br>    <span class="hljs-keyword">while</span> i != <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> (lst[i-<span class="hljs-number">1</span>]) &gt;= (lst[i]):<br>        i  = i - <span class="hljs-number">1</span><br>                                     <span class="hljs-comment"># i is the index of the digit that begin to sort</span><br>    <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">else</span>:<br>        start = i - <span class="hljs-number">1</span><br>        j = <span class="hljs-number">9</span><br>        <span class="hljs-keyword">while</span> j &gt; i <span class="hljs-keyword">and</span> lst[j] &lt;= lst[i-<span class="hljs-number">1</span>]:<br>            j = j - <span class="hljs-number">1</span><br>                                <span class="hljs-comment"># j is the index of the digit that will replace the digit at index i-1</span><br>        swap(lst, start, j)<br>       <span class="hljs-comment"># performing selection sort on the sublist starting from index i to get the next highest number</span><br>        selection_sort(lst, <span class="hljs-number">10</span>, i)<br>        <span class="hljs-keyword">return</span> lst<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lowest_digits</span>(<span class="hljs-params">lst</span>):<br>                                                 <span class="hljs-comment"># function to find the next lowest number</span><br>    i = <span class="hljs-number">9</span><br>    <span class="hljs-keyword">while</span> i != <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> lst[i-<span class="hljs-number">1</span>] &lt;= lst[i]:<br>        i  = i - <span class="hljs-number">1</span><br>                                                 <span class="hljs-comment"># i is the index of the digit that begin to sort</span><br>    <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>    start = i - <span class="hljs-number">1</span><br>    j = <span class="hljs-number">9</span><br>    <span class="hljs-keyword">while</span> j &gt; i <span class="hljs-keyword">and</span> lst[j] &gt;= lst[i - <span class="hljs-number">1</span>]:<br>        j = j - <span class="hljs-number">1</span><br>                                                <span class="hljs-comment"># j is the index of the digit that will replace the digit at index i-1</span><br>    swap(lst, start, j)<br>                        <span class="hljs-comment"># performing selection sort on the sublist starting from index i to get the next lowest number</span><br>    selection_sort(lst, <span class="hljs-number">10</span>, i)<br>    <span class="hljs-keyword">return</span> lst<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_input_digit</span>():<br>    n = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Please input a 10 digit number (not need space):&quot;</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(n) != <span class="hljs-number">10</span>:<br>        n = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Invalid input, please input a 10 digit number:&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(n)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_input_key</span>():<br>    key = <span class="hljs-built_in">input</span>(<br>        <span class="hljs-string">&quot;Choose whether they want the next highest number or the next lowest number. &quot;</span><br>        <span class="hljs-string">&quot;IF highest then input h IF lowest then input l:&quot;</span>)<br>    <span class="hljs-keyword">while</span> key <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;L&#x27;</span>]:<br>        key = <span class="hljs-built_in">input</span>(<br>            <span class="hljs-string">&quot;Invalid input. Choose whether you want the next highest number or the next lowest number. &quot;</span><br>            <span class="hljs-string">&quot;If highest then input h, if lowest then input l:&quot;</span>)<br>    <span class="hljs-keyword">return</span> key<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_result</span>(<span class="hljs-params">next_num</span>):<br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i != <span class="hljs-number">10</span>:<br>        <span class="hljs-built_in">print</span>(next_num[i], end=<span class="hljs-string">&quot;&quot;</span>)<br>        i = i + <span class="hljs-number">1</span><br><br><br><span class="hljs-comment"># main program</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_next_number</span>():<br>    n = get_input_digit()<br>    key = get_input_key()<br>    lst = get_list(n)<br>    <span class="hljs-keyword">if</span> key == <span class="hljs-string">&quot;h&quot;</span> <span class="hljs-keyword">or</span> key == <span class="hljs-string">&quot;H&quot;</span>:<br>                                          <span class="hljs-comment"># finding the next highest number</span><br>        next_num = highest_digits(lst)<br>        <span class="hljs-keyword">if</span> next_num <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;There is no higher number.&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            print_result(next_num)<br>    <span class="hljs-keyword">elif</span> key == <span class="hljs-string">&quot;l&quot;</span> <span class="hljs-keyword">or</span> key == <span class="hljs-string">&quot;L&quot;</span>:<br>                                           <span class="hljs-comment"># finding the next lowest number</span><br>        next_num = lowest_digits(lst)<br>        <span class="hljs-keyword">if</span> next_num <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;There is no lower numver.&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            print_result(next_num)<br>find_next_number()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Stage1</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>First_Ass_Calendar</title>
    <link href="/2023/05/05/Stage1/calendar/"/>
    <url>/2023/05/05/Stage1/calendar/</url>
    
    <content type="html"><![CDATA[<p>给定年月，输出该月的竖版日历</p><p>Example 3, 2023</p><p>M 6 13 20 27</p><p>T 7 14 21 28</p><p>W 1 8 15 22 29</p><p>T 2 9 16 23 30</p><p>F 3 10 17 24 31</p><p>S 4 11 18 25 </p><p>S 5 12 19 26</p><h2 id="思路重现"><a href="#思路重现" class="headerlink" title="思路重现"></a>思路重现</h2><p>python的输出逻辑是横板输出，所以在打印竖版日历，就是计算某天是星期几。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">weekly_calendar</span>(<span class="hljs-params">w, m, y</span>):<br>    title = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">if</span> w == <span class="hljs-number">1</span>:<br>        title = <span class="hljs-string">&quot;M&quot;</span><br>    <span class="hljs-keyword">elif</span> w == <span class="hljs-number">2</span>:<br>        title = <span class="hljs-string">&quot;T&quot;</span><br>    <span class="hljs-keyword">elif</span> w == <span class="hljs-number">3</span>:<br>        title = <span class="hljs-string">&quot;W&quot;</span><br>    <span class="hljs-keyword">elif</span> w == <span class="hljs-number">4</span>:<br>        title = <span class="hljs-string">&quot;T&quot;</span><br>    <span class="hljs-keyword">elif</span> w == <span class="hljs-number">5</span>:<br>        title = <span class="hljs-string">&quot;F&quot;</span><br>    <span class="hljs-keyword">elif</span> w == <span class="hljs-number">6</span>:<br>        title = <span class="hljs-string">&quot;S&quot;</span><br>    <span class="hljs-keyword">elif</span> w == <span class="hljs-number">7</span>:<br>        title = <span class="hljs-string">&quot;S&quot;</span><br>    j = <span class="hljs-number">1</span><br>    first_day = get_weekday_of_date(<span class="hljs-number">1</span>, m, y)<br>    <span class="hljs-keyword">if</span> first_day &gt; w:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;title&#125;</span>&quot;</span>, end=<span class="hljs-string">&quot;    &quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;title&#125;</span>&quot;</span>, end=<span class="hljs-string">&quot; &quot;</span>)<br><br>    <span class="hljs-keyword">while</span> j &lt; get_maximum_days_in_month(m, y)+<span class="hljs-number">1</span>:<br><br>        <span class="hljs-keyword">if</span> get_weekday_of_date(j, m, y) == w:<br>            <span class="hljs-keyword">if</span> j &lt; <span class="hljs-number">10</span>:<br>                <span class="hljs-built_in">print</span>(j, end=<span class="hljs-string">&quot;  &quot;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(j, end=<span class="hljs-string">&quot; &quot;</span>)<br>        j = j+<span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_maximum_days_in_month</span>(<span class="hljs-params">m, y</span>):<br>    <span class="hljs-keyword">if</span> m == <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> m == <span class="hljs-number">3</span> <span class="hljs-keyword">or</span> m == <span class="hljs-number">5</span> <span class="hljs-keyword">or</span> m == <span class="hljs-number">7</span> <span class="hljs-keyword">or</span> m == <span class="hljs-number">8</span> <span class="hljs-keyword">or</span> m == <span class="hljs-number">10</span> <span class="hljs-keyword">or</span> m == <span class="hljs-number">12</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">31</span><br>    <span class="hljs-keyword">elif</span> m == <span class="hljs-number">4</span> <span class="hljs-keyword">or</span> m == <span class="hljs-number">6</span> <span class="hljs-keyword">or</span> m == <span class="hljs-number">9</span> <span class="hljs-keyword">or</span> m == <span class="hljs-number">11</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">30</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">if</span> is_leap(y):<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">29</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">28</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_weekday_of_date</span>(<span class="hljs-params">d, m, y</span>):     <span class="hljs-comment"># 计算某天是星期几</span><br>    count_day = get_total_days_in_years(y) + get_total_days_in_months(m, y) + get_day_of_month(d)<br>    <span class="hljs-keyword">return</span> (count_day % <span class="hljs-number">7</span>) + <span class="hljs-number">1</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_leap</span>(<span class="hljs-params">y</span>):<br>    <span class="hljs-keyword">if</span> y % <span class="hljs-number">4</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">if</span> y % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">if</span> y % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_total_days_in_years</span>(<span class="hljs-params">y</span>):<br>    i = <span class="hljs-number">1900</span><br>    count1 = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i != y:<br>        <span class="hljs-keyword">if</span> is_leap(i):<br>            count1 += <span class="hljs-number">366</span><br><br>        <span class="hljs-keyword">else</span>:<br>            count1 += <span class="hljs-number">365</span><br><br>        i = i + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> count1<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_total_days_in_months</span>(<span class="hljs-params">m, y</span>):<br>    i = <span class="hljs-number">1</span><br>    count2 = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i != m:<br>        count2 += get_maximum_days_in_month(i, y)<br>        i = i +<span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> count2<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_day_of_month</span>(<span class="hljs-params">d</span>):<br>    <span class="hljs-keyword">return</span> d-<span class="hljs-number">1</span><br><br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_vertical_calendar</span>():<br>    y = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Please choose the year:&quot;</span>))<br>    m = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Please choose the month:&quot;</span>))<br>    i = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> i != <span class="hljs-number">8</span>:<br>        weekly_calendar(i, m, y)<br>        i = i + <span class="hljs-number">1</span><br><br><br>generate_vertical_calendar()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Stage1</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Sorting  a list</title>
    <link href="/2023/05/05/Stage1/list/"/>
    <url>/2023/05/05/Stage1/list/</url>
    
    <content type="html"><![CDATA[<h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><h2 id="动图解析"><a href="#动图解析" class="headerlink" title="动图解析"></a>动图解析</h2><p><img src="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/selectionSort.gif"></p><h2 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h2><p>首先在未排序序列中找到最小元素，存放到排序序列的起始位置。</p><p>再从剩余未排序元素中继续寻找最小元素，然后放到已排序序列的末尾。</p><p>重复第二步，直到所有元素均排序完毕</p><h2 id="代码实现-By-Lecture"><a href="#代码实现-By-Lecture" class="headerlink" title="代码实现(By Lecture)"></a>代码实现(By Lecture)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">selection_sort</span>(<span class="hljs-params">given_list, length</span>):<br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i != length:<br>        j = i<br>        min_index = i<br>        <span class="hljs-keyword">while</span> j != length :<br>            <span class="hljs-keyword">if</span> given_list[j] &lt; given_list[min_index]:<br>                min_index = j<br>            j = j +<span class="hljs-number">1</span><br>        swap(given_list, i, min_index)<br>        i = i + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> given_list<br></code></pre></td></tr></table></figure><h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><h2 id="动图解析-1"><a href="#动图解析-1" class="headerlink" title="动图解析"></a>动图解析</h2><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/insertionSort.gif" alt="InsertionSort"></p><h2 id="算法步骤-1"><a href="#算法步骤-1" class="headerlink" title="算法步骤"></a>算法步骤</h2><p>将元素分为 <strong>已排序</strong> 和 <strong>未排序</strong> 两组</p><p>扫描未排序数组，将其插入已排序数组的正确位置</p><h2 id="代码实现（By-lecture"><a href="#代码实现（By-lecture" class="headerlink" title="代码实现（By lecture)"></a>代码实现（By lecture)</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">insertion_sort</span>(<span class="hljs-params">given_list, length</span>):<br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i != length:<br>        j = i<br>        <span class="hljs-keyword">while</span> j != <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> given_list[j-<span class="hljs-number">1</span>] &gt; given_list[j]:<br>            swap(given_list, j, j-<span class="hljs-number">1</span>)<br>            j = j - <span class="hljs-number">1</span><br>        i = i + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> given_list<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Stage1</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Tutorial_14th_Apr</title>
    <link href="/2023/04/14/Stage1/tutorial-14th-Apr/"/>
    <url>/2023/04/14/Stage1/tutorial-14th-Apr/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [ <span class="hljs-number">1</span>,<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">19</span>, <span class="hljs-number">27</span>, <span class="hljs-number">30</span>, <span class="hljs-number">34</span>, <span class="hljs-number">200</span> ]<br>list2 = [ <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">13</span>, <span class="hljs-number">19</span>, <span class="hljs-number">22</span>, <span class="hljs-number">31</span>, <span class="hljs-number">34</span>, <span class="hljs-number">92</span>, <span class="hljs-number">201</span>, <span class="hljs-number">300</span> ]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sort</span>(<span class="hljs-params">array</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(array) &lt; <span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">return</span> array  <span class="hljs-comment">#基线条件</span><br>    <span class="hljs-keyword">else</span>:<br>        standard = array[<span class="hljs-number">0</span>]  <span class="hljs-comment">#默认选择第一个为基准值</span><br>        i = <span class="hljs-number">1</span><br>        less = []<br>        big = []<br>        <span class="hljs-keyword">while</span> i != <span class="hljs-number">20</span>:<br>            <span class="hljs-keyword">if</span> array[i] &lt;= standard:<br>                less.append(array[i])<br>            <span class="hljs-keyword">else</span>:<br>                big.append(array[i])<br>            i = i+<span class="hljs-number">1</span><br><br><br>        <span class="hljs-keyword">return</span> sort(less) + [standard] + sort(big)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sort_new_array</span>(<span class="hljs-params">a, b</span>):<br>    list_new = list1 + list2<br>    sort(list_new)<br>    <span class="hljs-keyword">return</span> list_new<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_odd</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">if</span> x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">split_odd_even</span>(<span class="hljs-params">array</span>):<br>    odd_list = []<br>    even_list = []<br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i != <span class="hljs-number">20</span>:<br>        <span class="hljs-keyword">if</span> is_odd(array[i]):<br>            odd_list.append(array[i])<br>        <span class="hljs-keyword">else</span>:<br>            even_list.append(array[i])<br>        i = i+<span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> odd_list, even_list<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">count_same_number</span>(<span class="hljs-params">list1, list2</span>):<br>    i = <span class="hljs-number">0</span><br>    count = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i != <span class="hljs-number">10</span>:<br>        j = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> j != <span class="hljs-number">10</span>:<br>            <span class="hljs-keyword">if</span> list1[i] == list2[j]:<br>                count = count + <span class="hljs-number">1</span><br>                <span class="hljs-keyword">break</span><br>            j = j + <span class="hljs-number">1</span><br>        i = i+<span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> count<br><span class="hljs-built_in">print</span>(count_same_number(list1, list2))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">shift_list1</span>(<span class="hljs-params">f, n</span>):<br>    i = <span class="hljs-number">0</span><br>    new_list = [<span class="hljs-number">0</span>] * <span class="hljs-built_in">len</span>(f)<br>    <span class="hljs-keyword">while</span> i != <span class="hljs-built_in">len</span>(f)-<span class="hljs-number">1</span>:<br>        new_list[(i+n) % <span class="hljs-built_in">len</span>(f)] = f[i]<br>        i = i + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> new_list<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_ascending</span>(<span class="hljs-params">array</span>):<br>    i = <span class="hljs-number">0</span><br>    flag = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(array)-<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">if</span> array[i] &lt;= array[i+<span class="hljs-number">1</span>]:<br>            i = i+<span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            flag = <span class="hljs-literal">False</span><br>            i = <span class="hljs-built_in">len</span>(array)-<span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">return</span> flag<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_ascending_after_roted</span>(<span class="hljs-params">array</span>):<br>    n = <span class="hljs-number">0</span><br>    flag = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">while</span> n != <span class="hljs-number">30</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> flag :<br>        <span class="hljs-keyword">if</span> is_ascending(shift_list1(array,n)):<br>            flag = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            n = n+<span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> flag<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Count and Sum Digits</title>
    <link href="/2023/03/01/Stage1/Count%20and%20Sum%20Digits/"/>
    <url>/2023/03/01/Stage1/Count%20and%20Sum%20Digits/</url>
    
    <content type="html"><![CDATA[<h1 id="Count-Digits"><a href="#Count-Digits" class="headerlink" title="Count Digits"></a>Count Digits</h1><h2 id="NO-1"><a href="#NO-1" class="headerlink" title="NO.1"></a>NO.1</h2><p>This is a transfer int to str. This is not a math solution</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">count_digits1</span>(<span class="hljs-params">x</span>):<br>    x=<span class="hljs-built_in">str</span>(x)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(x)<br></code></pre></td></tr></table></figure><h2 id="NO-2"><a href="#NO-2" class="headerlink" title="NO.2"></a>NO.2</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">count_digits2</span>(<span class="hljs-params">x</span>):<br>    count = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> x != <span class="hljs-number">0</span>:<br>        x = x // <span class="hljs-number">10</span><br>        count = count +<span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> count<br></code></pre></td></tr></table></figure><h2 id="NO-3"><a href="#NO-3" class="headerlink" title="NO.3"></a>NO.3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">count_digits3</span>(<span class="hljs-params">n</span>):   <span class="hljs-comment">#Recursion</span><br><span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">10</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> (<span class="hljs-number">1</span> + count_digits3(n //<span class="hljs-number">10</span>))<br></code></pre></td></tr></table></figure><p>This is about Recursion. </p><h1 id="Sum-Digits"><a href="#Sum-Digits" class="headerlink" title="Sum Digits"></a>Sum Digits</h1><h2 id="NO-1-1"><a href="#NO-1-1" class="headerlink" title="NO.1"></a>NO.1</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">sum_digit1</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">10</span>:<br>        <span class="hljs-keyword">return</span> n<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> (n%<span class="hljs-number">10</span> + sum_digit1(n//<span class="hljs-number">10</span>))<br></code></pre></td></tr></table></figure><h2 id="NO-2-1"><a href="#NO-2-1" class="headerlink" title="NO.2"></a>NO.2</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pyt">def sum_digit2(n):<br>    sum=1<br>    while n != 0:<br>        sum = sum * (n%10)<br>        n = n // 10<br>    return sum<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Stage1</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Perfect Number &amp; Prime Number</title>
    <link href="/2023/02/28/Stage1/Perfect%20Number%20&amp;%20Prime%20Number/"/>
    <url>/2023/02/28/Stage1/Perfect%20Number%20&amp;%20Prime%20Number/</url>
    
    <content type="html"><![CDATA[<h1 id="Prime-number"><a href="#Prime-number" class="headerlink" title="Prime number"></a>Prime number</h1><p>It is a basic problem for CS students. The part aim  to give more intersiting solution.</p><h2 id="NO-1"><a href="#NO-1" class="headerlink" title="NO.1"></a>NO.1</h2><p>According to Henry, he asks us to not print such as ‘for’,  ‘break’,’continue’. Something only python could be used. </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_prime</span>(<span class="hljs-params">x</span>):<br>  <span class="hljs-keyword">if</span> x &lt;= <span class="hljs-number">1</span>:<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>  <span class="hljs-keyword">elif</span> x == <span class="hljs-number">2</span>:<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>  <span class="hljs-keyword">elif</span> x % <span class="hljs-number">2</span> ==<span class="hljs-number">0</span>:<br>      <span class="hljs-keyword">return</span>  <span class="hljs-literal">False</span><br>  <span class="hljs-keyword">else</span>:<br>      i =<span class="hljs-number">3</span><br>      <span class="hljs-keyword">while</span> i * i &lt;= x:<br>          <span class="hljs-keyword">if</span> x % i == <span class="hljs-number">0</span>:<br>              <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>          i = i + <span class="hljs-number">2</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>This is a code only use ‘if’ and ‘while’. Maybe i need to change ‘Ture’ or ‘False’ to ‘1’ and ‘0’.</p><p>About the prime, as we as all kown, 1 is not a prime as the prime defination. All even number except 2 is not prime, because they could be int division by 2. So i only to search odd number. </p><p>Let x divise i ,i always be an even, if there no x % i&#x3D;0</p><p>so, x must be a prime.</p><p>For the condition of while. i only need to while to sqrt{x}. Those factors always show in double. Such as 28&#x3D;4*7 it has a factor smaller than sqrt{x}, at the same the another is greater than sqrt{x}. So i only to identify a aspect between smaller and greater.</p><h1 id="Perfect-number"><a href="#Perfect-number" class="headerlink" title="Perfect number"></a>Perfect number</h1><h2 id="NO-1-1"><a href="#NO-1-1" class="headerlink" title="NO.1"></a>NO.1</h2><p>Perfect number is a positive integer whose sum of its proper divisiors is equal to one.</p><p>Example 1+2+3&#x3D;6. The 6 is a perfect number.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_perfect</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-built_in">sum</span> = <span class="hljs-number">1</span><br>    i = <span class="hljs-number">2</span><br>    <span class="hljs-keyword">while</span> i &lt; x:<br>        <span class="hljs-keyword">if</span> x % i == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">sum</span> = <span class="hljs-built_in">sum</span> + i<br>        i = i + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">sum</span> == x:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>未完待续</p>]]></content>
    
    
    <categories>
      
      <category>Stage1</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>BFS</title>
    <link href="/2023/02/07/BFS/"/>
    <url>/2023/02/07/BFS/</url>
    
    <content type="html"><![CDATA[<h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><p><img src="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/%E5%9B%BE" alt="图源网络"></p><p>图由节点和边构成。在计科中，一个图就是一些顶点的集合。</p><blockquote><p>图G是一个有序二元组(V,E)，其中V称为顶集(Vertices Set)，E称为边集(Edges set)，E与V不相交。它们亦可写成V(G)和E(G)。其中，顶集的元素被称为顶点(Vertex)，边集的元素被称为边(edge)。</p></blockquote><h1 id="广度优先搜索（BFS）"><a href="#广度优先搜索（BFS）" class="headerlink" title="广度优先搜索（BFS）"></a>广度优先搜索（BFS）</h1><p>一种用于图的查找算法</p><p>通常用于解决：</p><ol><li>从A出发，有前往B的路径吗</li><li>从A出发，前往B的哪条路径最短</li></ol><h2 id="运行时间"><a href="#运行时间" class="headerlink" title="运行时间"></a>运行时间</h2><p>O(V+E)    </p><p>V为顶点数   E为边数</p><h2 id="是否存在路径的问题"><a href="#是否存在路径的问题" class="headerlink" title="是否存在路径的问题"></a>是否存在路径的问题</h2><p>假设需要寻找能解决编程问腿的大佬一名，首先在自己的朋友圈中查找。<img src="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/0e07f6a37e6405e5b887ebc90692d33.jpg" alt="我的朋友圈"></p><p>依次检查，他们三个是否会编程：</p><ul><li><input disabled type="checkbox"> Chuck</li><li><input disabled type="checkbox"> Andy</li><li><input disabled type="checkbox"> Bobbie</li></ul><p>假设他们都不会编程，那就要检查他们的朋友，是否有精通编程的。<img src="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/63f9ec0fd3f22351fb5d681c3b90ae9.jpg" alt="朋友的朋友圈"></p><p>检查名单中的人时，如果他不会编程，就将他的朋友加入名单，等待检查。</p><ul><li><input checked disabled type="checkbox"> Chuck                                                                             若Chuck 会编程，任务完成                                                 </li><li><input disabled type="checkbox"> Andy                                                                                若Chuck不会，将Chuck的所有朋友加入清单</li><li><input disabled type="checkbox"> Bobbie</li></ul><p>————————————————————</p><ul><li><input disabled type="checkbox"> Andy</li><li><input disabled type="checkbox"> Bobbie</li><li><input disabled type="checkbox"> sean</li><li><input disabled type="checkbox"> Zhang</li></ul><p>重复过程，直到找出会编程的人。类似于上述算法搜遍我的人际网，直到找出会编程的人。即广度优先搜索算法。</p><h2 id="最短路径问题"><a href="#最短路径问题" class="headerlink" title="最短路径问题"></a>最短路径问题</h2><p>寻找离我关系最近的朋友。先寻找我的朋友，在寻找我朋友的朋友。广度优先搜索正是这样的过程。</p><p>正因如此，广度优先搜索不仅查找从A到B的路径，也是在寻找最短路径。</p><p>我们始终按添加顺序的检查清单上的人，这样才能实现广度优先搜索。实现这样目的的数据结构——队列</p><h2 id="实现图"><a href="#实现图" class="headerlink" title="实现图"></a>实现图</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#先用散列表来实现图-字典</span><br>graph = &#123;&#125;<br>graph[<span class="hljs-string">&quot;me&quot;</span>] = [<span class="hljs-string">&quot;Ahuck&quot;</span>, <span class="hljs-string">&quot;Andy&quot;</span>, <span class="hljs-string">&quot;Bobbie&quot;</span>]<br>graph[<span class="hljs-string">&quot;Chuck&quot;</span>] = [<span class="hljs-string">&quot;sean&quot;</span>, <span class="hljs-string">&quot;Zhang&quot;</span>]<br>graph[<span class="hljs-string">&quot;Andy&quot;</span>] = [<span class="hljs-string">&quot;sean&quot;</span>, <span class="hljs-string">&quot;David&quot;</span>]<br>graph[<span class="hljs-string">&quot;Bobbie&quot;</span>] = [<span class="hljs-string">&quot;Alex&quot;</span>]<br><span class="hljs-comment">#以上就可以表示上面画的关系网了</span><br></code></pre></td></tr></table></figure><h2 id="实现算法"><a href="#实现算法" class="headerlink" title="实现算法"></a>实现算法</h2><p><img src="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/7b760fd6267b24e4f66daed12fe608d.jpg" alt="算法实现"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque <span class="hljs-comment">#python中使用deque创建队列</span><br>search_list = deque()<br>search_list += graph[<span class="hljs-string">&quot;me&quot;</span>]   <span class="hljs-comment">#将我的朋友加入队列</span><br>searched = []<span class="hljs-comment">#已经被查过的人</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">he_is_programmer</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;检查他会不会编程&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">while</span> search_list:<span class="hljs-comment">#只要队列不空</span><br>    examined = search_list.popleft()<span class="hljs-comment">#取出队列的第一个人</span><br>    <span class="hljs-keyword">if</span> examined <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> searched:<br>        <span class="hljs-keyword">if</span> he_is_programmer(examined):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;he is programmer&quot;</span>)   <span class="hljs-comment">#会编程</span><br>        <span class="hljs-keyword">return</span> true<br>    <span class="hljs-keyword">else</span>:<br>        search_list += graph[examined]<span class="hljs-comment">#不会编程</span><br>            seaeched.append(examined)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>   <span class="hljs-comment">#执行至此，没有人会编程</span><br></code></pre></td></tr></table></figure><p>算法将一直运行，直到：</p><ul><li><input disabled type="checkbox"> 找到一位会编程的</li><li><input disabled type="checkbox"> 队列为空</li></ul><h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><blockquote><p>队列是一种特殊的<a href="https://baike.baidu.com/item/%E7%BA%BF%E6%80%A7%E8%A1%A8?fromModule=lemma_inlink">线性表</a>，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。队列中没有元素时，称为空队列。</p><p>队列的数据元素又称为队列元素。在队列中插入一个队列元素称为入队，从队列中删除一个队列元素称为出队。因为队列只允许在一端插入，在另一端删除，所以只有最早进入队列的元素才能最先从队列中删除，故队列又称为先进先出（FIFO—first in first out）<a href="https://baike.baidu.com/item/%E7%BA%BF%E6%80%A7%E8%A1%A8?fromModule=lemma_inlink">线性表</a>。 [1] </p></blockquote><p>公交车排队一样，排在前面的先上车。</p><p>在查找过程中，先加入的人先出队接受检查。</p><p>队列是先进先出（FIFO）</p><p>栈是后进后先出(LIFO)</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>pic_text</title>
    <link href="/2023/01/19/pic-text/"/>
    <url>/2023/01/19/pic-text/</url>
    
    <content type="html"><![CDATA[<p>更新了头像<br><img src="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/%E5%A4%B4%E5%83%8F.png" alt="tup"></p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>helloPage</title>
    <link href="/2023/01/18/helloPage/"/>
    <url>/2023/01/18/helloPage/</url>
    
    <content type="html"><![CDATA[<h2 id="test"><a href="#test" class="headerlink" title="test"></a>test</h2><p>dasdasdasd</p><p>eeeee</p><p>dasdsadasd</p>]]></content>
    
    
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>about</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>Mrle</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<p>#👋 Hi, 我是刘乐</p><p>欢迎来到 <strong>mrlepro</strong> —— 我的学习笔记与技术分享空间。</p><ul><li>🧠 关注方向：推荐系统、GNN、NLP、系统架构</li><li>💻 技术栈：Java &#x2F; Spring Boot &#x2F; Vue &#x2F; Python &#x2F; PyTorch &#x2F; LaTeX</li><li>🏃‍♂️ 爱好：马拉松、越野跑、骑行</li></ul><h1 id="🛠-关于这个博客"><a href="#🛠-关于这个博客" class="headerlink" title="🛠 关于这个博客"></a>🛠 关于这个博客</h1><p>mrlepro 就在 2023 年 1 月 18 日诞生了。<br>这是我记录、整理、反思与表达的地方。</p><p>这个博客是使用 Hexo + GitHub Pages + 阿里云 搭建的。<br>在<a href="https://blog.krahsu.top/">CharlesHsu</a> 和 <a href="https://blog.wiung.com/">WJUP</a> 的帮助下，它顺利上线。访问速度可能还不够理想，我也会持续优化和投入维护。如果你喜欢这里，也欢迎支持我 🧡。</p><hr><h1 id="✨-留言-amp-联系我"><a href="#✨-留言-amp-联系我" class="headerlink" title="✨ 留言 &amp; 联系我"></a>✨ 留言 &amp; 联系我</h1><p>如果你有想法想聊、问题想问，欢迎在评论区留言，或通过邮箱联系我。</p>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>Mrle</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<h1 id="👋-Hi-我是刘乐"><a href="#👋-Hi-我是刘乐" class="headerlink" title="👋 Hi, 我是刘乐"></a>👋 Hi, 我是刘乐</h1><p>欢迎来到 <strong>mrlepro</strong> —— 生活、学习被记录在此。</p><ul><li>🧠 关注方向：推荐系统</li><li>💻 技术栈：Java &#x2F; Spring Boot </li><li>🏃‍♂️ 爱好：马拉松、越野跑、骑行</li></ul><h1 id="🛠-关于这个博客"><a href="#🛠-关于这个博客" class="headerlink" title="🛠 关于这个博客"></a>🛠 关于这个博客</h1><p>mrlepro 在 2023 年 1 月 18 日诞生。  </p><p>这个博客是使用 Hexo + GitHub Pages + 阿里云 搭建的。  </p><hr><h1 id="最近在做的事情"><a href="#最近在做的事情" class="headerlink" title="最近在做的事情"></a>最近在做的事情</h1><ul><li>CapInfo实习</li><li>Leetcode Hot100</li><li>备战11月16日南京马拉松</li></ul>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>Marathon Records</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<div class="markdown-body"><h2>成绩一览</h2><table>  <thead>    <tr>      <th style="text-align:right;">日期</th>      <th>赛事</th>      <th>城市</th>      <th style="text-align:center;">项目</th>      <th style="text-align:right;">净成绩</th>      <th style="text-align:right;">配速</th>    </tr>  </thead>  <tbody>      <tr>      <td style="text-align:right;">2024-04-14</td>      <td>2024雄安马拉松（半程）</td>      <td>雄安</td>      <td style="text-align:center;">HM</td>      <td style="text-align:right;">01:43:10</td>      <td style="text-align:right;">04:53/km</td>    </tr>      <tr>      <td style="text-align:right;">2024-05-12</td>      <td>2024秦皇岛马拉松</td>      <td>秦皇岛</td>      <td style="text-align:center;">FM</td>      <td style="text-align:right;">03:53:25</td>      <td style="text-align:right;">05:32/km</td>    </tr>      <tr>      <td style="text-align:right;">2024-10-20</td>      <td>2024天津马拉松</td>      <td>天津</td>      <td style="text-align:center;">FM</td>      <td style="text-align:right;">03:30:13</td>      <td style="text-align:right;">04:59/km</td>    </tr>      <tr>      <td style="text-align:right;">2024-11-03</td>      <td>2024北京马拉松</td>      <td>北京</td>      <td style="text-align:center;">FM</td>      <td style="text-align:right;">03:30:18</td>      <td style="text-align:right;">04:59/km</td>    </tr>      <tr>      <td style="text-align:right;">2025-03-23</td>      <td>2025武汉马拉松</td>      <td>武汉</td>      <td style="text-align:center;">FM</td>      <td style="text-align:right;">03:57:57</td>      <td style="text-align:right;">05:38/km</td>    </tr>    </tbody></table></div><hr><h2 id="全马净成绩趋势（Chip）"><a href="#全马净成绩趋势（Chip）" class="headerlink" title="全马净成绩趋势（Chip）"></a>全马净成绩趋势（Chip）</h2>                                      <div id="echarts8725" style="width: 100%;height:420px;margin: 0 auto"></div><script src="https://unpkg.com/echarts@5.6.0/dist/echarts.min.js"></script><script>  if (window.eChartecharts8725ResizeHandler) {    window.removeEventListener("resize", eChartecharts8725ResizeHandler);  }  var optionecharts8725 = {  "title": { "text": "全马净成绩（越低越好）" },  "tooltip": {    "trigger": "axis",    "valueFormatter": function (s) {      var h = Math.floor(s/3600), m = Math.floor((s%3600)/60), sec = Math.round(s%60);      var pad = function(x){ return x<10?('0'+x):(''+x); };      return (h>0? pad(h)+':' : '') + pad(m) + ':' + pad(sec);    }  },  "grid": { "left": "3%", "right": "4%", "bottom": "12%", "containLabel": true },  "xAxis": {    "type": "category",    "data": [                                            "2024秦皇岛马拉松"                                ,"2024天津马拉松"                                ,"2024北京马拉松"                                ,"2025武汉马拉松"                  ],    "axisLabel": { "interval": 0, "rotate": 12 }  },  "yAxis": {    "type": "value",    "name": "净成绩",    "min": 7200,          // 不显示2小时以下    "axisLabel": {      "formatter": function (s) {        var h = Math.floor(s/3600), m = Math.floor((s%3600)/60), sec = Math.round(s%60);        var pad = function(x){ return x<10?('0'+x):(''+x); };        return (h>0? pad(h)+':' : '') + pad(m) + ':' + pad(sec);      }    }  },  "series": [  {    "type": "line",    "smooth": true,    "showSymbol": true,    "symbolSize": 10,                 // 常规点大小    "lineStyle": { "width": 3 },      // 线条加粗    "data": [                                                        {              "value": 14005,              "label": { "show": true, "position": "top", "formatter": "03:53:25" }            }                                                      ,{              "value": 12613,              "label": { "show": true, "position": "top", "fontWeight": "bold", "formatter": "⭐ 03:30:13" },              "itemStyle": { "color": "#d97706" },     // PB 点颜色（可调）              "symbolSize": 16,                        // PB 点更大              "z": 10            }                                                      ,{              "value": 12618,              "label": { "show": true, "position": "top", "formatter": "03:30:18" }            }                                                      ,{              "value": 14277,              "label": { "show": true, "position": "top", "formatter": "03:57:57" }            }                            ]  }]};  if (window.echarts !== undefined) {    var eChartecharts8725 = echarts.init(document.getElementById('echarts8725'));    eChartecharts8725.setOption(optionecharts8725);    var eChartecharts8725ResizeHandler = function() {      eChartecharts8725.resize();    };    window.addEventListener("resize", eChartecharts8725ResizeHandler);  }</script>]]></content>
    
  </entry>
  
  
  
</search>
